!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=13)}([,,,function(t,n,e){var r,i,o;/*! nouislider - 13.1.5 - 4/24/2019 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.5";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(l(t,n),setTimeout((function(){c(t,n)}),e))}function a(t){return Math.max(Math.min(t,100),0)}function s(t){return Array.isArray(t)?t:[t]}function u(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function l(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function c(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function h(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||"");return{x:n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,y:n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop}}function f(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function g(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),i=t[r-1],o=t[r],a=n[r-1],s=n[r];return a+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],e)/f(a,s)}function _(t,n,e,r){if(100===r)return r;var i=d(r,t),o=t[i-1],a=t[i];return e?r-o>(a-o)/2?a:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(r-t[i-1],n[i-1]):r}function b(n,e,r){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(e[0]),o?r.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(r.xSteps[0]=e[1]),r.xHighestCompleteStep.push(0)}function v(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/f(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*i;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function m(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort((function(t,n){return t[0][0]-n[0][0]})):i.sort((function(t,n){return t[0]-n[0]})),r=0;r<i.length;r++)b(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)v(r,this.xNumSteps[r],this)}m.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},m.prototype.toStepping=function(t){return t=g(this.xVal,this.xPct,t)},m.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),i=t[r-1],o=t[r],a=n[r-1];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(e-a)*f(a,n[r]))}(this.xVal,this.xPct,t)},m.prototype.getStep=function(t){return t=_(this.xPct,this.xSteps,this.snap,t)},m.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},m.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},m.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(u);return Math.max.apply(null,t)},m.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function y(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function w(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function M(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new m(e,n.snap,n.singleStep)}function k(n,e){if(e=s(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function S(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function N(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function U(n,e){var r,i=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<n.handles;r++)i.push(e);i.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=e}n.connect=i}function E(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function T(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function A(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function z(n,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function L(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function F(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=e.indexOf("tap")>=0,i=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,a=e.indexOf("snap")>=0,s=e.indexOf("hover")>=0,u=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");T(n,n.start[1]-n.start[0])}if(u&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:r||a,drag:i,fixed:o,snap:a,hover:s,unconstrained:u}}function D(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(!0)}else{if(n.tooltips=s(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach((function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")}))}}function P(t,n){t.ariaFormat=n,y(n)}function R(t,n){t.format=n,y(n)}function j(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function O(t,n){t.documentElement=n}function H(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function B(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var r in n.cssClasses={},e)e.hasOwnProperty(r)&&(n.cssClasses[r]=n.cssPrefix+e[r]);else n.cssClasses=e}function q(n){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:w},start:{r:!0,t:k},connect:{r:!0,t:U},direction:{r:!0,t:L},snap:{r:!1,t:S},animate:{r:!1,t:C},animationDuration:{r:!1,t:N},range:{r:!0,t:M},orientation:{r:!1,t:E},margin:{r:!1,t:T},limit:{r:!1,t:A},padding:{r:!1,t:z},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:P},format:{r:!1,t:R},tooltips:{r:!1,t:D},keyboardSupport:{r:!0,t:j},documentElement:{r:!1,t:O},cssPrefix:{r:!0,t:H},cssClasses:{r:!0,t:B}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach((function(a){if(!e(n[a])&&void 0===o[a]){if(i[a].r)throw new Error("noUiSlider ("+t+"): '"+a+"' is required.");return!0}i[a].t(r,e(n[a])?n[a]:o[a])})),r.pips=n.pips;var a=document.createElement("div"),s=void 0!==a.style.msTransform,u=void 0!==a.style.transform;return r.transformRule=u?"transform":s?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function V(e,i,u){var f,p,d,g,_,b,v,m,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},y=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),w=e,M=i.spectrum,k=[],S=[],C=[],N=0,U={},E=e.ownerDocument,T=i.documentElement||E.documentElement,A=E.body,z=-1,L=0,F=1,D=2,P="rtl"===E.dir||1===i.ort?0:100;function R(t,n){var e=E.createElement("div");return n&&l(e,n),t.appendChild(e),e}function j(t,n){var e=R(t,i.cssClasses.origin),r=R(e,i.cssClasses.handle);return R(r,i.cssClasses.touchArea),r.setAttribute("data-handle",n),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",(function(t){return function(t,n){if(B()||V(n))return!1;var e=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),a=o===r[0]||o===e[0],s=o===r[1]||o===e[1];if(!a&&!s)return!0;t.preventDefault();var u=a?0:1,l=vt(n)[u];return null!==l&&(!1===l&&(l=M.getDefaultStep(S[n],a,10)),l=Math.max(l,1e-7),l*=a?-1:1,_t(n,k[n]+l,!0),!1)}(t,n)}))),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?l(r,i.cssClasses.handleLower):n===i.handles-1&&l(r,i.cssClasses.handleUpper),e}function O(t,n){return!!n&&R(t,i.cssClasses.connect)}function H(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function B(){return w.hasAttribute("disabled")}function V(t){return p[t].hasAttribute("disabled")}function I(){_&&(ot("update.tooltips"),_.forEach((function(t){t&&n(t)})),_=null)}function Y(){I(),_=p.map(H),it("update.tooltips",(function(t,n,e){if(_[n]){var r=t[n];!0!==i.tooltips[n]&&(r=i.tooltips[n].to(e[n])),_[n].innerHTML=r}}))}function X(t,n,e){var r=E.createElement("div"),o=[];o[L]=i.cssClasses.valueNormal,o[F]=i.cssClasses.valueLarge,o[D]=i.cssClasses.valueSub;var a=[];a[L]=i.cssClasses.markerNormal,a[F]=i.cssClasses.markerLarge,a[D]=i.cssClasses.markerSub;var s=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],u=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function c(t,n){var e=n===i.cssClasses.value,r=e?o:a;return n+" "+(e?s:u)[i.ort]+" "+r[t]}return l(r,i.cssClasses.pips),l(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach((function(o){!function(t,o,a){if((a=n?n(o,a):a)!==z){var s=R(r,!1);s.className=c(a,i.cssClasses.marker),s.style[i.style]=t+"%",a>L&&((s=R(r,!1)).className=c(a,i.cssClasses.value),s.setAttribute("data-value",o),s.style[i.style]=t+"%",s.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])})),r}function $(){g&&(n(g),g=null)}function Z(n){$();var e=n.mode,r=n.density||1,i=n.filter||!1,o=function(n,e,r){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=e-1,o=100/i;for(e=[];i--;)e[i]=i*o;e.push(100),n="positions"}return"positions"===n?e.map((function(t){return M.fromStepping(r?M.getStep(t):t)})):"values"===n?r?e.map((function(t){return M.fromStepping(M.getStep(M.toStepping(t)))})):e:void 0}(e,n.values||!1,n.stepped||!1),a=function(t,n,e){var r,i={},o=M.xVal[0],a=M.xVal[M.xVal.length-1],s=!1,u=!1,l=0;return r=e.slice().sort((function(t,n){return t-n})),(e=r.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==o&&(e.unshift(o),s=!0),e[e.length-1]!==a&&(e.push(a),u=!0),e.forEach((function(r,o){var a,c,h,f,p,d,g,_,b,v,m=r,x=e[o+1],y="steps"===n;if(y&&(a=M.xNumSteps[o]),a||(a=x-m),!1!==m&&void 0!==x)for(a=Math.max(a,1e-7),c=m;c<=x;c=(c+a).toFixed(7)/1){for(_=(p=(f=M.toStepping(c))-l)/t,v=p/(b=Math.round(_)),h=1;h<=b;h+=1)i[(d=l+h*v).toFixed(5)]=[M.fromStepping(d),0];g=e.indexOf(c)>-1?F:y?D:L,!o&&s&&(g=0),c===x&&u||(i[f.toFixed(5)]=[c,g]),l=f}})),i}(r,e,o),s=n.format||{to:Math.round};return g=w.appendChild(X(a,i,s))}function W(){var t=f.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||f[n]:t.height||f[n]}function J(t,n,e,r){var o=function(o){return!!(o=function(t,n,e){var r,i,o=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),s=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(s=!0),o){var u=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var l=Array.prototype.filter.call(t.touches,u);if(l.length>1)return!1;r=l[0].pageX,i=l[0].pageY}else{var c=Array.prototype.find.call(t.changedTouches,u);if(!c)return!1;r=c.pageX,i=c.pageY}}return n=n||h(E),(a||s)&&(r=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[r,i],t.cursor=a||s,t}(o,r.pageOffset,r.target||n))&&!(B()&&!r.doNotReject)&&(a=w,s=i.cssClasses.tap,!((a.classList?a.classList.contains(s):new RegExp("\\b"+s+"\\b").test(a.className))&&!r.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(y||o.preventDefault(),o.calcPoint=o.points[i.ort],void e(o,r)));var a,s},a=[];return t.split(" ").forEach((function(t){n.addEventListener(t,o,!!y&&{passive:!0}),a.push([t,o])})),a}function Q(t){var n,e,r,o,s,u,l=100*(t-(n=f,e=i.ort,r=n.getBoundingClientRect(),o=n.ownerDocument,s=o.documentElement,u=h(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(u.x=0),e?r.top+u.y-s.clientTop:r.left+u.x-s.clientLeft))/W();return l=a(l),i.dir?100-l:l}function G(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&tt(t,n)}function K(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return tt(t,n);var e=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint);lt(e>0,100*e/n.baseSize,n.locations,n.handleNumbers)}function tt(t,n){n.handle&&(c(n.handle,i.cssClasses.active),N-=1),n.listeners.forEach((function(t){T.removeEventListener(t[0],t[1])})),0===N&&(c(w,i.cssClasses.drag),ht(),t.cursor&&(A.style.cursor="",A.removeEventListener("selectstart",r))),n.handleNumbers.forEach((function(t){at("change",t),at("set",t),at("end",t)}))}function nt(t,n){if(n.handleNumbers.some(V))return!1;var e;1===n.handleNumbers.length&&(e=p[n.handleNumbers[0]].children[0],N+=1,l(e,i.cssClasses.active)),t.stopPropagation();var o=[],a=J(x.move,T,K,{target:t.target,handle:e,listeners:o,startCalcPoint:t.calcPoint,baseSize:W(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:S.slice()}),s=J(x.end,T,tt,{target:t.target,handle:e,listeners:o,doNotReject:!0,handleNumbers:n.handleNumbers}),u=J("mouseout",T,G,{target:t.target,handle:e,listeners:o,doNotReject:!0,handleNumbers:n.handleNumbers});o.push.apply(o,a.concat(s,u)),t.cursor&&(A.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&l(w,i.cssClasses.drag),A.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach((function(t){at("start",t)}))}function et(t){t.stopPropagation();var n=Q(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach((function(r,i){if(!V(i)){var o=Math.abs(S[i]-t);(o<n||100===o&&100===n)&&(e=i,n=o)}})),e}(n);if(!1===e)return!1;i.events.snap||o(w,i.cssClasses.tap,i.animationDuration),ft(e,n,!0,!0),ht(),at("slide",e,!0),at("update",e,!0),at("change",e,!0),at("set",e,!0),i.events.snap&&nt(t,{handleNumbers:[e]})}function rt(t){var n=Q(t.calcPoint),e=M.getStep(n),r=M.fromStepping(e);Object.keys(U).forEach((function(t){"hover"===t.split(".")[0]&&U[t].forEach((function(t){t.call(b,r)}))}))}function it(t,n){U[t]=U[t]||[],U[t].push(n),"update"===t.split(".")[0]&&p.forEach((function(t,n){at("update",n)}))}function ot(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(U).forEach((function(t){var r=t.split(".")[0],i=t.substring(r.length);n&&n!==r||e&&e!==i||delete U[t]}))}function at(t,n,e){Object.keys(U).forEach((function(r){var o=r.split(".")[0];t===o&&U[r].forEach((function(t){t.call(b,k.map(i.format.to),n,k.slice(),e||!1,S.slice())}))}))}function st(t,n,e,r,o,s){return p.length>1&&!i.events.unconstrained&&(r&&n>0&&(e=Math.max(e,t[n-1]+i.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-i.margin))),p.length>1&&i.limit&&(r&&n>0&&(e=Math.min(e,t[n-1]+i.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-i.limit))),i.padding&&(0===n&&(e=Math.max(e,i.padding[0])),n===p.length-1&&(e=Math.min(e,100-i.padding[1]))),!((e=a(e=M.getStep(e)))===t[n]&&!s)&&e}function ut(t,n){var e=i.ort;return(e?n:t)+", "+(e?t:n)}function lt(t,n,e,r){var i=e.slice(),o=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,e){var r=st(i,t,i[t]+n,o[e],a[e],!1);!1===r?n=0:(n=r-i[t],i[t]=r)})):o=a=[!0];var s=!1;r.forEach((function(t,r){s=ft(t,e[t]+n,o[r],a[r])||s})),s&&r.forEach((function(t){at("update",t),at("slide",t)}))}function ct(t,n){return i.dir?100-t-n:t}function ht(){C.forEach((function(t){var n=S[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e}))}function ft(t,n,e,r){return!1!==(n=st(S,t,n,e,r,!1))&&(function(t,n){S[t]=n,k[t]=M.fromStepping(n);var e="translate("+ut(ct(n,0)-P+"%","0")+")";p[t].style[i.transformRule]=e,pt(t),pt(t+1)}(t,n),!0)}function pt(t){if(d[t]){var n=0,e=100;0!==t&&(n=S[t-1]),t!==d.length-1&&(e=S[t]);var r=e-n,o="translate("+ut(ct(n,r)+"%","0")+")",a="scale("+ut(r/100,"1")+")";d[t].style[i.transformRule]=o+" "+a}}function dt(t,n){return null===t||!1===t||void 0===t?S[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?S[n]:t)}function gt(t,n){var e=s(t),r=void 0===S[0];n=void 0===n||!!n,i.animate&&!r&&o(w,i.cssClasses.tap,i.animationDuration),C.forEach((function(t){ft(t,dt(e[t],t),!0,!1)})),C.forEach((function(t){ft(t,S[t],!0,!0)})),ht(),C.forEach((function(t){at("update",t),null!==e[t]&&n&&at("set",t)}))}function _t(n,e,r){if(!((n=Number(n))>=0&&n<C.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);ft(n,dt(e,n),!0,!0),at("update",n),r&&at("set",n)}function bt(){var t=k.map(i.format.to);return 1===t.length?t[0]:t}function vt(t){var n=S[t],e=M.getNearbySteps(n),r=k[t],o=e.thisStep.step,a=null;if(i.snap)return[r-e.stepBefore.startValue||null,e.stepAfter.startValue-r||null];!1!==o&&r+o>e.stepAfter.startValue&&(o=e.stepAfter.startValue-r),a=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===n?o=null:0===n&&(a=null);var s=M.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==a&&!1!==a&&(a=Number(a.toFixed(s))),[a,o]}return l(v=w,i.cssClasses.target),0===i.dir?l(v,i.cssClasses.ltr):l(v,i.cssClasses.rtl),0===i.ort?l(v,i.cssClasses.horizontal):l(v,i.cssClasses.vertical),f=R(v,i.cssClasses.base),function(t,n){var e=R(n,i.cssClasses.connects);p=[],(d=[]).push(O(e,t[0]));for(var r=0;r<i.handles;r++)p.push(j(n,r)),C[r]=r,d.push(O(e,t[r+1]))}(i.connect,f),(m=i.events).fixed||p.forEach((function(t,n){J(x.start,t.children[0],nt,{handleNumbers:[n]})})),m.tap&&J(x.start,f,et,{}),m.hover&&J(x.move,f,rt,{hover:!0}),m.drag&&d.forEach((function(t,n){if(!1!==t&&0!==n&&n!==d.length-1){var e=p[n-1],r=p[n],o=[t];l(t,i.cssClasses.draggable),m.fixed&&(o.push(e.children[0]),o.push(r.children[0])),o.forEach((function(t){J(x.start,t,nt,{handles:[e,r],handleNumbers:[n-1,n]})}))}})),gt(i.start),i.pips&&Z(i.pips),i.tooltips&&Y(),it("update",(function(t,n,e,r,o){C.forEach((function(t){var n=p[t],r=st(S,t,0,!0,!0,!0),a=st(S,t,100,!0,!0,!0),s=o[t],u=i.ariaFormat.to(e[t]);r=M.fromStepping(r).toFixed(1),a=M.fromStepping(a).toFixed(1),s=M.fromStepping(s).toFixed(1),n.children[0].setAttribute("aria-valuemin",r),n.children[0].setAttribute("aria-valuemax",a),n.children[0].setAttribute("aria-valuenow",s),n.children[0].setAttribute("aria-valuetext",u)}))})),b={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&c(w,i.cssClasses[t]);for(;w.firstChild;)w.removeChild(w.firstChild);delete w.noUiSlider},steps:function(){return C.map(vt)},on:it,off:ot,get:bt,set:gt,setHandle:_t,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,e){lt(t,n,S,e)},options:u,updateOptions:function(t,n){var e=bt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach((function(n){void 0!==t[n]&&(u[n]=t[n])}));var o=q(u);r.forEach((function(n){void 0!==t[n]&&(i[n]=o[n])})),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?Z(i.pips):$(),i.tooltips?Y():I(),S=[],gt(t.start||e,n)},target:w,removePips:$,removeTooltips:I,pips:Z}}return{__spectrum:m,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=V(n,q(e),e);return n.noUiSlider=r,r}}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[e].concat(o).concat([i]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e})).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(t,n){return n?n.querySelector(t):document.querySelector(t)},u=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=s.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),l=null,c=0,h=[],f=e(10);function p(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],n));o[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,n){for(var e=[],r={},i=0;i<t.length;i++){var o=t[i],a=n.base?o[0]+n.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):e.push(r[a]={id:a,parts:[s]})}return e}function g(t,n){var e=u(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),h.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=u(t.insertAt.before,e);e.insertBefore(n,i)}}function _(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=h.indexOf(t);n>=0&&h.splice(n,1)}function b(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return v(n,t.attrs),g(t,n),n}function v(t,n){Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])}))}function m(t,n){var e,r,i,o;if(n.transform&&t.css){if(!(o="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=o}if(n.singleton){var a=c++;e=l||(l=b(n)),r=w.bind(null,e,a,!1),i=w.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(n,t.attrs),g(t,n),n}(n),r=k.bind(null,e,n),i=function(){_(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(n),r=M.bind(null,e),i=function(){_(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return p(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var a=e[i];(s=o[a.id]).refs--,r.push(s)}t&&p(d(t,n),n);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete o[s.id]}}}};var x,y=(x=[],function(t,n){return x[t]=n,x.filter(Boolean).join("\n")});function w(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(n,i);else{var o=document.createTextNode(i),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(o,a[n]):t.appendChild(o)}}function M(t,n){var e=n.css,r=n.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}function k(t,n,e){var r=e.css,i=e.sourceMap,o=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||o)&&(r=f(r)),i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},,function(t,n,e){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function n(t){return t.split("").reverse().join("")}function e(t,n){return t.substring(0,n.length)===n}function r(t,n,e){if((t[n]||t[e])&&t[n]===t[e])throw new Error(n)}function i(t){return"number"==typeof t&&isFinite(t)}function o(t,e,r,o,a,s,u,l,c,h,f,p){var d,g,_,b,v,m=p,x="",y="";return s&&(p=s(p)),!!i(p)&&(!1!==t&&0===parseFloat(p.toFixed(t))&&(p=0),p<0&&(d=!0,p=Math.abs(p)),!1!==t&&(v=t,b=(b=p).toString().split("e"),p=(+((b=(b=Math.round(+(b[0]+"e"+(b[1]?+b[1]+v:v)))).toString().split("e"))[0]+"e"+(b[1]?+b[1]-v:-v))).toFixed(v)),-1!==(p=p.toString()).indexOf(".")?(_=(g=p.split("."))[0],r&&(x=r+g[1])):_=p,e&&(_=n(_).match(/.{1,3}/g),_=n(_.join(n(e)))),d&&l&&(y+=l),o&&(y+=o),d&&c&&(y+=c),y+=_,y+=x,a&&(y+=a),h&&(y=h(y,m)),y)}function a(t,n,r,o,a,s,u,l,c,h,f,p){var d,g="";return f&&(p=f(p)),!(!p||"string"!=typeof p)&&(l&&e(p,l)&&(p=p.replace(l,""),d=!0),o&&e(p,o)&&(p=p.replace(o,"")),c&&e(p,c)&&(p=p.replace(c,""),d=!0),a&&function(t,n){return t.slice(-1*n.length)===n}(p,a)&&(p=p.slice(0,-1*a.length)),n&&(p=p.split(n).join("")),r&&(p=p.replace(r,".")),d&&(g+="-"),""!==(g=(g+=p).replace(/[^0-9\.\-.]/g,""))&&(g=Number(g),u&&(g=u(g)),!!i(g)&&g))}function s(n,e,r){var i,o=[];for(i=0;i<t.length;i+=1)o.push(n[t[i]]);return o.push(r),e.apply("",o)}return function n(e){if(!(this instanceof n))return new n(e);"object"==typeof e&&(e=function(n){var e,i,o,a={};for(void 0===n.suffix&&(n.suffix=n.postfix),e=0;e<t.length;e+=1)if(void 0===(o=n[i=t[e]]))"negative"!==i||a.negativeBefore?"mark"===i&&"."!==a.thousand?a[i]=".":a[i]=!1:a[i]="-";else if("decimals"===i){if(!(o>=0&&o<8))throw new Error(i);a[i]=o}else if("encoder"===i||"decoder"===i||"edit"===i||"undo"===i){if("function"!=typeof o)throw new Error(i);a[i]=o}else{if("string"!=typeof o)throw new Error(i);a[i]=o}return r(a,"mark","thousand"),r(a,"prefix","negative"),r(a,"prefix","negativeBefore"),a}(e),this.to=function(t){return s(e,o,t)},this.from=function(t){return s(e,a,t)})}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){var r=e(9);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,'/* Tabulator v4.4.3 (c) Oliver Folkerd */\n.tabulator{position:relative;border:1px solid #999;background-color:#888;font-size:14px;text-align:left;overflow:hidden;transform:translatez(0)}.tabulator[tabulator-layout=fitDataFill] .tabulator-tableHolder .tabulator-table{min-width:100%}.tabulator.tabulator-block-select{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.tabulator .tabulator-header{position:relative;box-sizing:border-box;width:100%;border-bottom:1px solid #999;background-color:#e6e6e6;color:#555;font-weight:700;white-space:nowrap;overflow:hidden;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator .tabulator-header.tabulator-header-hidden{display:none}.tabulator .tabulator-header .tabulator-col{display:inline-block;position:relative;box-sizing:border-box;border-right:1px solid #aaa;background:#e6e6e6;text-align:left;vertical-align:bottom;overflow:hidden}.tabulator .tabulator-header .tabulator-col.tabulator-moving{position:absolute;border:1px solid #999;background:#cdcdcd;pointer-events:none}.tabulator .tabulator-header .tabulator-col .tabulator-col-content{box-sizing:border-box;position:relative;padding:4px}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title{box-sizing:border-box;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;vertical-align:bottom}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor{box-sizing:border-box;width:100%;border:1px solid #999;padding:1px;background:#fff}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-arrow{display:inline-block;position:absolute;top:9px;right:8px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #bbb}.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols{position:relative;display:-ms-flexbox;display:flex;border-top:1px solid #aaa;overflow:hidden}.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols .tabulator-col:last-child{margin-right:-1px}.tabulator .tabulator-header .tabulator-col:first-child .tabulator-col-resize-handle.prev{display:none}.tabulator .tabulator-header .tabulator-col.ui-sortable-helper{position:absolute;background-color:#e6e6e6!important;border:1px solid #aaa}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter{position:relative;box-sizing:border-box;margin-top:2px;width:100%;text-align:center}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea{height:auto!important}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg{margin-top:3px}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear{width:0;height:0}.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title{padding-right:25px}.tabulator .tabulator-header .tabulator-col.tabulator-sortable:hover{cursor:pointer;background-color:#cdcdcd}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-arrow{border-top:none;border-bottom:6px solid #bbb}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=asc] .tabulator-col-content .tabulator-arrow{border-top:none;border-bottom:6px solid #666}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=desc] .tabulator-col-content .tabulator-arrow{border-top:6px solid #666;border-bottom:none}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title{-ms-writing-mode:tb-rl;writing-mode:vertical-rl;text-orientation:mixed;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title{transform:rotate(180deg)}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title{padding-right:0;padding-top:20px}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title{padding-right:0;padding-bottom:20px}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-arrow{right:calc(50% - 6px)}.tabulator .tabulator-header .tabulator-frozen{display:inline-block;position:absolute;z-index:10}.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left{border-right:2px solid #aaa}.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator .tabulator-header .tabulator-calcs-holder{box-sizing:border-box;min-width:600%;background:#f3f3f3!important;border-top:1px solid #aaa;border-bottom:1px solid #aaa;overflow:hidden}.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row{background:#f3f3f3!important}.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle{display:none}.tabulator .tabulator-header .tabulator-frozen-rows-holder{min-width:600%}.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty{display:none}.tabulator .tabulator-tableHolder{position:relative;width:100%;white-space:nowrap;overflow:auto;-webkit-overflow-scrolling:touch}.tabulator .tabulator-tableHolder:focus{outline:none}.tabulator .tabulator-tableHolder .tabulator-placeholder{box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%}.tabulator .tabulator-tableHolder .tabulator-placeholder[tabulator-render-mode=virtual]{position:absolute;top:0;left:0;height:100%}.tabulator .tabulator-tableHolder .tabulator-placeholder span{display:inline-block;margin:0 auto;padding:10px;color:#ccc;font-weight:700;font-size:20px}.tabulator .tabulator-tableHolder .tabulator-table{position:relative;display:inline-block;background-color:#fff;white-space:nowrap;overflow:visible;color:#333}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs{font-weight:700;background:#e2e2e2!important}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top{border-bottom:2px solid #aaa}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom{border-top:2px solid #aaa}.tabulator .tabulator-footer{padding:5px 10px;border-top:1px solid #999;background-color:#e6e6e6;text-align:right;color:#555;font-weight:700;white-space:nowrap;-ms-user-select:none;user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator .tabulator-footer .tabulator-calcs-holder{box-sizing:border-box;width:calc(100% + 20px);margin:-5px -10px 5px;text-align:left;background:#f3f3f3!important;border-bottom:1px solid #aaa;border-top:1px solid #aaa;overflow:hidden}.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row{background:#f3f3f3!important}.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle{display:none}.tabulator .tabulator-footer .tabulator-calcs-holder:only-child{margin-bottom:-5px;border-bottom:none}.tabulator .tabulator-footer .tabulator-paginator{color:#555;font-family:inherit;font-weight:inherit;font-size:inherit}.tabulator .tabulator-footer .tabulator-page-size{display:inline-block;margin:0 5px;padding:2px 5px;border:1px solid #aaa;border-radius:3px}.tabulator .tabulator-footer .tabulator-pages{margin:0 7px}.tabulator .tabulator-footer .tabulator-page{display:inline-block;margin:0 2px;padding:2px 5px;border:1px solid #aaa;border-radius:3px;background:hsla(0,0%,100%,.2)}.tabulator .tabulator-footer .tabulator-page.active{color:#d00}.tabulator .tabulator-footer .tabulator-page:disabled{opacity:.5}.tabulator .tabulator-footer .tabulator-page:not(.disabled):hover{cursor:pointer;background:rgba(0,0,0,.2);color:#fff}.tabulator .tabulator-col-resize-handle{position:absolute;right:0;top:0;bottom:0;width:5px}.tabulator .tabulator-col-resize-handle.prev{left:0;right:auto}.tabulator .tabulator-col-resize-handle:hover{cursor:ew-resize}.tabulator .tabulator-loader{position:absolute;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;top:0;left:0;z-index:100;height:100%;width:100%;background:rgba(0,0,0,.4);text-align:center}.tabulator .tabulator-loader .tabulator-loader-msg{display:inline-block;margin:0 auto;padding:10px 20px;border-radius:10px;background:#fff;font-weight:700;font-size:16px}.tabulator .tabulator-loader .tabulator-loader-msg.tabulator-loading{border:4px solid #333;color:#000}.tabulator .tabulator-loader .tabulator-loader-msg.tabulator-error{border:4px solid #d00;color:#590000}.tabulator-row{position:relative;box-sizing:border-box;min-height:22px;background-color:#fff}.tabulator-row.tabulator-row-even{background-color:#efefef}.tabulator-row.tabulator-selectable:hover{background-color:#bbb;cursor:pointer}.tabulator-row.tabulator-selected{background-color:#9abcea}.tabulator-row.tabulator-selected:hover{background-color:#769bcc;cursor:pointer}.tabulator-row.tabulator-row-moving{border:1px solid #000;background:#fff}.tabulator-row.tabulator-moving{position:absolute;border-top:1px solid #aaa;border-bottom:1px solid #aaa;pointer-events:none;z-index:15}.tabulator-row .tabulator-row-resize-handle{position:absolute;right:0;bottom:0;left:0;height:5px}.tabulator-row .tabulator-row-resize-handle.prev{top:0;bottom:auto}.tabulator-row .tabulator-row-resize-handle:hover{cursor:ns-resize}.tabulator-row .tabulator-frozen{display:inline-block;position:absolute;background-color:inherit;z-index:10}.tabulator-row .tabulator-frozen.tabulator-frozen-left{border-right:2px solid #aaa}.tabulator-row .tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator-row .tabulator-responsive-collapse{box-sizing:border-box;padding:5px;border-top:1px solid #aaa;border-bottom:1px solid #aaa}.tabulator-row .tabulator-responsive-collapse:empty{display:none}.tabulator-row .tabulator-responsive-collapse table{font-size:14px}.tabulator-row .tabulator-responsive-collapse table tr td{position:relative}.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type{padding-right:10px}.tabulator-row .tabulator-cell{display:inline-block;position:relative;box-sizing:border-box;padding:4px;border-right:1px solid #aaa;vertical-align:middle;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.tabulator-row .tabulator-cell.tabulator-editing{border:1px solid #1d68cd;padding:0}.tabulator-row .tabulator-cell.tabulator-editing input,.tabulator-row .tabulator-cell.tabulator-editing select{border:1px;background:transparent}.tabulator-row .tabulator-cell.tabulator-validation-fail{border:1px solid #d00}.tabulator-row .tabulator-cell.tabulator-validation-fail input,.tabulator-row .tabulator-cell.tabulator-validation-fail select{border:1px;background:transparent;color:#d00}.tabulator-row .tabulator-cell:first-child .tabulator-col-resize-handle.prev{display:none}.tabulator-row .tabulator-cell.tabulator-row-handle{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box{width:80%}.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar{width:100%;height:3px;margin-top:2px;background:#666}.tabulator-row .tabulator-cell .tabulator-data-tree-branch{display:inline-block;vertical-align:middle;height:9px;width:7px;margin-top:-9px;margin-right:5px;border-bottom-left-radius:1px;border-left:2px solid #aaa;border-bottom:2px solid #aaa}.tabulator-row .tabulator-cell .tabulator-data-tree-control{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;vertical-align:middle;height:11px;width:11px;margin-right:5px;border:1px solid #333;border-radius:2px;background:rgba(0,0,0,.1);overflow:hidden}.tabulator-row .tabulator-cell .tabulator-data-tree-control:hover{cursor:pointer;background:rgba(0,0,0,.2)}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse{display:inline-block;position:relative;height:7px;width:1px;background:transparent}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after{position:absolute;content:"";left:-3px;top:3px;height:1px;width:7px;background:#333}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand{display:inline-block;position:relative;height:7px;width:1px;background:#333}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after{position:absolute;content:"";left:-3px;top:3px;height:1px;width:7px;background:#333}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none;height:15px;width:15px;border-radius:20px;background:#666;color:#fff;font-weight:700;font-size:1.1em}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover{opacity:.7}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close{display:initial}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open,.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close{display:none}.tabulator-row .tabulator-cell .tabulator-traffic-light{display:inline-block;height:14px;width:14px;border-radius:14px}.tabulator-row.tabulator-group{box-sizing:border-box;border-bottom:1px solid #999;border-right:1px solid #aaa;border-top:1px solid #999;padding:5px;padding-left:10px;background:#ccc;font-weight:700;min-width:100%}.tabulator-row.tabulator-group:hover{cursor:pointer;background-color:rgba(0,0,0,.1)}.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow{margin-right:10px;border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #666;border-bottom:0}.tabulator-row.tabulator-group.tabulator-group-level-1{padding-left:30px}.tabulator-row.tabulator-group.tabulator-group-level-2{padding-left:50px}.tabulator-row.tabulator-group.tabulator-group-level-3{padding-left:70px}.tabulator-row.tabulator-group.tabulator-group-level-4{padding-left:90px}.tabulator-row.tabulator-group.tabulator-group-level-5{padding-left:110px}.tabulator-row.tabulator-group .tabulator-arrow{display:inline-block;width:0;height:0;margin-right:16px;border-top:6px solid transparent;border-bottom:6px solid transparent;border-right:0;border-left:6px solid #666;vertical-align:middle}.tabulator-row.tabulator-group span{margin-left:10px;color:#d00}.tabulator-edit-select-list{position:absolute;display:inline-block;box-sizing:border-box;max-height:200px;background:#fff;border:1px solid #aaa;font-size:14px;overflow-y:auto;-webkit-overflow-scrolling:touch;z-index:10000}.tabulator-edit-select-list .tabulator-edit-select-list-item{padding:4px;color:#333}.tabulator-edit-select-list .tabulator-edit-select-list-item.active{color:#fff;background:#1d68cd}.tabulator-edit-select-list .tabulator-edit-select-list-item:hover{cursor:pointer;color:#fff;background:#1d68cd}.tabulator-edit-select-list .tabulator-edit-select-list-group{border-bottom:1px solid #aaa;padding:4px;padding-top:6px;color:#333;font-weight:700}.tabulator-print-fullscreen{position:absolute;top:0;bottom:0;left:0;right:0;z-index:10000}body.tabulator-print-fullscreen-hide>:not(.tabulator-print-fullscreen){display:none!important}.tabulator-print-table{border-collapse:collapse}\n',""])},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,n){var i,o=n.trim().replace(/^"(.*)"$/,(function(t,n){return n})).replace(/^'(.*)'$/,(function(t,n){return n}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?e+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(t,n,e){var r=e(12);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,'/*! nouislider - 13.1.5 - 4/24/2019 */\n.noUi-target,.noUi-target *{-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-ms-touch-action:none;touch-action:none;-ms-user-select:none;-moz-user-select:none;user-select:none;-moz-box-sizing:border-box;box-sizing:border-box}.noUi-target{position:relative;direction:ltr}.noUi-base,.noUi-connects{width:100%;height:100%;position:relative;z-index:1}.noUi-connects{overflow:hidden;z-index:0}.noUi-connect,.noUi-origin{will-change:transform;position:absolute;z-index:1;top:0;left:0;height:100%;width:100%;-ms-transform-origin:0 0;-webkit-transform-origin:0 0;-webkit-transform-style:preserve-3d;transform-origin:0 0;transform-style:flat}html:not([dir=rtl]) .noUi-horizontal .noUi-origin{left:auto;right:0}.noUi-vertical .noUi-origin{width:0}.noUi-horizontal .noUi-origin{height:0}.noUi-handle{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute}.noUi-touch-area{height:100%;width:100%}.noUi-state-tap .noUi-connect,.noUi-state-tap .noUi-origin{-webkit-transition:transform .3s;transition:transform .3s}.noUi-state-drag *{cursor:inherit!important}.noUi-horizontal{height:18px}.noUi-horizontal .noUi-handle{width:34px;height:28px;left:-17px;top:-6px}.noUi-vertical{width:18px}.noUi-vertical .noUi-handle{width:28px;height:34px;left:-6px;top:-17px}html:not([dir=rtl]) .noUi-horizontal .noUi-handle{right:-17px;left:auto}.noUi-target{background:#FAFAFA;border-radius:4px;border:1px solid #D3D3D3;box-shadow:inset 0 1px 1px #F0F0F0,0 3px 6px -5px #BBB}.noUi-connects{border-radius:3px}.noUi-connect{background:#3FB8AF}.noUi-draggable{cursor:ew-resize}.noUi-vertical .noUi-draggable{cursor:ns-resize}.noUi-handle{border:1px solid #D9D9D9;border-radius:3px;background:#FFF;cursor:default;box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #EBEBEB,0 3px 6px -3px #BBB}.noUi-active{box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #DDD,0 3px 6px -3px #BBB}.noUi-handle:after,.noUi-handle:before{content:"";display:block;position:absolute;height:14px;width:1px;background:#E8E7E6;left:14px;top:6px}.noUi-handle:after{left:17px}.noUi-vertical .noUi-handle:after,.noUi-vertical .noUi-handle:before{width:14px;height:1px;left:6px;top:14px}.noUi-vertical .noUi-handle:after{top:17px}[disabled] .noUi-connect{background:#B8B8B8}[disabled] .noUi-handle,[disabled].noUi-handle,[disabled].noUi-target{cursor:not-allowed}.noUi-pips,.noUi-pips *{-moz-box-sizing:border-box;box-sizing:border-box}.noUi-pips{position:absolute;color:#999}.noUi-value{position:absolute;white-space:nowrap;text-align:center}.noUi-value-sub{color:#ccc;font-size:10px}.noUi-marker{position:absolute;background:#CCC}.noUi-marker-sub{background:#AAA}.noUi-marker-large{background:#AAA}.noUi-pips-horizontal{padding:10px 0;height:80px;top:100%;left:0;width:100%}.noUi-value-horizontal{-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}.noUi-rtl .noUi-value-horizontal{-webkit-transform:translate(50%,50%);transform:translate(50%,50%)}.noUi-marker-horizontal.noUi-marker{margin-left:-1px;width:2px;height:5px}.noUi-marker-horizontal.noUi-marker-sub{height:10px}.noUi-marker-horizontal.noUi-marker-large{height:15px}.noUi-pips-vertical{padding:0 10px;height:100%;top:0;left:100%}.noUi-value-vertical{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);padding-left:25px}.noUi-rtl .noUi-value-vertical{-webkit-transform:translate(0,50%);transform:translate(0,50%)}.noUi-marker-vertical.noUi-marker{width:5px;height:2px;margin-top:-1px}.noUi-marker-vertical.noUi-marker-sub{width:10px}.noUi-marker-vertical.noUi-marker-large{width:15px}.noUi-tooltip{display:block;position:absolute;border:1px solid #D9D9D9;border-radius:3px;background:#fff;color:#000;padding:5px;text-align:center;white-space:nowrap}.noUi-horizontal .noUi-tooltip{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);left:50%;bottom:120%}.noUi-vertical .noUi-tooltip{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);top:50%;right:120%}',""])},function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r);o.right,o.left;var a=Array.prototype;a.slice,a.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var s=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e};Array.prototype.slice;var u={value:function(){}};function l(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new c(r)}function c(t){this._=t}function h(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function p(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=u,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}c.prototype=l.prototype={constructor:c,on:function(t,n){var e,r=this._,i=h(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=p(r[e],t.name,n);else if(null==n)for(e in r)r[e]=p(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=f(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new c(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var d=l,g="http://www.w3.org/1999/xhtml",_={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},b=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),_.hasOwnProperty(n)?{space:_[n],local:t}:t};function v(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===g&&n.documentElement.namespaceURI===g?n.createElement(t):n.createElementNS(e,t)}}function m(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var x=function(t){var n=b(t);return(n.local?m:v)(n)};function y(){}var w=function(t){return null==t?y:function(){return this.querySelector(t)}};function M(){return[]}var k=function(t){return null==t?M:function(){return this.querySelectorAll(t)}},S=function(t){return function(){return this.matches(t)}},C=function(t){return new Array(t.length)};function N(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}N.prototype={constructor:N,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var U="$";function E(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new N(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function T(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l=U+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=U+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new N(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function A(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function z(t){return function(){this.removeAttribute(t)}}function L(t){return function(){this.removeAttributeNS(t.space,t.local)}}function F(t,n){return function(){this.setAttribute(t,n)}}function D(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function P(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function R(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var j=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function O(t){return function(){this.style.removeProperty(t)}}function H(t,n,e){return function(){this.style.setProperty(t,n,e)}}function B(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function q(t,n){return t.style.getPropertyValue(n)||j(t).getComputedStyle(t,null).getPropertyValue(n)}function V(t){return function(){delete this[t]}}function I(t,n){return function(){this[t]=n}}function Y(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function X(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new Z(t)}function Z(t){this._node=t,this._names=X(t.getAttribute("class")||"")}function W(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function J(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Q(t){return function(){W(this,t)}}function G(t){return function(){J(this,t)}}function K(t,n){return function(){(n.apply(this,arguments)?W:J)(this,t)}}Z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function tt(){this.textContent=""}function nt(t){return function(){this.textContent=t}}function et(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function rt(){this.innerHTML=""}function it(t){return function(){this.innerHTML=t}}function ot(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function at(){this.nextSibling&&this.parentNode.appendChild(this)}function st(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ut(){return null}function lt(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ht(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ft={},pt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ft={mouseenter:"mouseover",mouseleave:"mouseout"}));function dt(t,n,e){return t=gt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function gt(t,n,e){return function(r){var i=pt;pt=r;try{t.call(this,this.__data__,n,e)}finally{pt=i}}}function _t(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function bt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function vt(t,n,e){var r=ft.hasOwnProperty(t.type)?dt:gt;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function mt(t,n,e){var r=j(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function xt(t,n){return function(){return mt(this,t,n)}}function yt(t,n){return function(){return mt(this,t,n.apply(this,arguments))}}var wt=[null];function Mt(t,n){this._groups=t,this._parents=n}function kt(){return new Mt([[document.documentElement]],wt)}Mt.prototype=kt.prototype={constructor:Mt,select:function(t){"function"!=typeof t&&(t=w(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Mt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=k(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new Mt(r,i)},filter:function(t){"function"!=typeof t&&(t=S(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Mt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var e,r=n?T:E,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,_=u[c]=new Array(g),b=s[c]=new Array(g);r(h,f,_,b,l[c]=new Array(p),d,n);for(var v,m,x=0,y=0;x<g;++x)if(v=_[x]){for(x>=y&&(y=x+1);!(m=b[y])&&++y<g;);v._next=m||null}}return(s=new Mt(s,i))._enter=u,s._exit=l,s},enter:function(){return new Mt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new Mt(this._exit||this._groups.map(C),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new Mt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=A);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new Mt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=b(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?L:z:"function"==typeof n?e.local?R:P:e.local?D:F)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?O:"function"==typeof n?B:H)(t,n,null==e?"":e)):q(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?V:"function"==typeof n?Y:I)(t,n)):this.node()[t]},classed:function(t,n){var e=X(t+"");if(arguments.length<2){for(var r=$(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?K:n?Q:G)(e,n))},text:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?et:nt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?rt:("function"==typeof t?ot:it)(t)):this.node().innerHTML},raise:function(){return this.each(at)},lower:function(){return this.each(st)},append:function(t){var n="function"==typeof t?t:x(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:x(t),r=null==n?ut:"function"==typeof n?n:w(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(lt)},clone:function(t){return this.select(t?ht:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=_t(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?vt:bt,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?yt:xt)(t,n))}};var St=kt,Ct=0;function Nt(){this._="@"+(++Ct).toString(36)}Nt.prototype=function(){return new Nt}.prototype={constructor:Nt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Ut(t,n,e,r,i,o,a,s,u,l){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=u,this._=l}Ut.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Et=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Tt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function At(){}var zt="\\s*([+-]?\\d+)\\s*",Lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ft="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dt=/^#([0-9a-f]{3,8})$/,Pt=new RegExp("^rgb\\("+[zt,zt,zt]+"\\)$"),Rt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),jt=new RegExp("^rgba\\("+[zt,zt,zt,Lt]+"\\)$"),Ot=new RegExp("^rgba\\("+[Ft,Ft,Ft,Lt]+"\\)$"),Ht=new RegExp("^hsl\\("+[Lt,Ft,Ft]+"\\)$"),Bt=new RegExp("^hsla\\("+[Lt,Ft,Ft,Lt]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Vt(){return this.rgb().formatHex()}function It(){return this.rgb().formatRgb()}function Yt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Dt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Xt(n):3===e?new Jt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new Jt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new Jt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Pt.exec(t))?new Jt(n[1],n[2],n[3],1):(n=Rt.exec(t))?new Jt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=jt.exec(t))?$t(n[1],n[2],n[3],n[4]):(n=Ot.exec(t))?$t(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Ht.exec(t))?tn(n[1],n[2]/100,n[3]/100,1):(n=Bt.exec(t))?tn(n[1],n[2]/100,n[3]/100,n[4]):qt.hasOwnProperty(t)?Xt(qt[t]):"transparent"===t?new Jt(NaN,NaN,NaN,0):null}function Xt(t){return new Jt(t>>16&255,t>>8&255,255&t,1)}function $t(t,n,e,r){return r<=0&&(t=n=e=NaN),new Jt(t,n,e,r)}function Zt(t){return t instanceof At||(t=Yt(t)),t?new Jt((t=t.rgb()).r,t.g,t.b,t.opacity):new Jt}function Wt(t,n,e,r){return 1===arguments.length?Zt(t):new Jt(t,n,e,null==r?1:r)}function Jt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Qt(){return"#"+Kt(this.r)+Kt(this.g)+Kt(this.b)}function Gt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Kt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function tn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,r)}function nn(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=Yt(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new rn(a,s,u,t.opacity)}function en(t,n,e,r){return 1===arguments.length?nn(t):new rn(t,n,e,null==r?1:r)}function rn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function an(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Et(At,Yt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Vt,formatHex:Vt,formatHsl:function(){return nn(this).formatHsl()},formatRgb:It,toString:It}),Et(Jt,Wt,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qt,formatHex:Qt,formatRgb:Gt,toString:Gt})),Et(rn,en,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Jt(on(t>=240?t-240:t+120,i,r),on(t,i,r),on(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var sn=function(t){return function(){return t}};function un(t,n){return function(e){return t+e*n}}function ln(t,n){var e=n-t;return e?un(t,e>180||e<-180?e-360*Math.round(e/360):e):sn(isNaN(t)?n:t)}function cn(t){return 1==(t=+t)?hn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):sn(isNaN(n)?e:n)}}function hn(t,n){var e=n-t;return e?un(t,e):sn(isNaN(t)?n:t)}var fn=function t(n){var e=cn(n);function r(t,n){var r=e((t=Wt(t)).r,(n=Wt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=hn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function pn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),s=new Array(i);for(e=0;e<i;++e)r=Wt(n[e]),o[e]=r.r||0,a[e]=r.g||0,s[e]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}pn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<n-1?t[r+2]:2*o-i;return an((e-r/n)*n,a,i,o,s)}})),pn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],s=t[(r+2)%n];return an((e-r/n)*n,i,o,a,s)}}));var dn=function(t,n){return n-=t=+t,function(e){return t+n*e}},gn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,_n=new RegExp(gn.source,"g");var bn,vn,mn,xn,yn=function(t,n){var e,r,i,o=gn.lastIndex=_n.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=gn.exec(t))&&(r=_n.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:dn(e,r)})),o=_n.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})},wn=180/Math.PI,Mn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},kn=function(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*wn,skewX:Math.atan(u)*wn,scaleX:a,scaleY:s}};function Sn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:dn(t,i)},{i:u-2,x:dn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:dn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:dn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:dn(t,e)},{i:s-2,x:dn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Cn=Sn((function(t){return"none"===t?Mn:(bn||(bn=document.createElement("DIV"),vn=document.documentElement,mn=document.defaultView),bn.style.transform=t,t=mn.getComputedStyle(vn.appendChild(bn),null).getPropertyValue("transform"),vn.removeChild(bn),t=t.slice(7,-1).split(","),kn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Nn=Sn((function(t){return null==t?Mn:(xn||(xn=document.createElementNS("http://www.w3.org/2000/svg","g")),xn.setAttribute("transform",t),(t=xn.transform.baseVal.consolidate())?(t=t.matrix,kn(t.a,t.b,t.c,t.d,t.e,t.f)):Mn)}),", ",")",")");Math.SQRT2;function Un(t){return function(n,e){var r=t((n=en(n)).h,(e=en(e)).h),i=hn(n.s,e.s),o=hn(n.l,e.l),a=hn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}Un(ln),Un(hn);var En=Math.PI/180,Tn=180/Math.PI,An=.96422,zn=1,Ln=.82521,Fn=4/29,Dn=6/29,Pn=3*Dn*Dn,Rn=Dn*Dn*Dn;function jn(t){if(t instanceof Hn)return new Hn(t.l,t.a,t.b,t.opacity);if(t instanceof $n)return Zn(t);t instanceof Jt||(t=Zt(t));var n,e,r=In(t.r),i=In(t.g),o=In(t.b),a=Bn((.2225045*r+.7168786*i+.0606169*o)/zn);return r===i&&i===o?n=e=a:(n=Bn((.4360747*r+.3850649*i+.1430804*o)/An),e=Bn((.0139322*r+.0971045*i+.7141733*o)/Ln)),new Hn(116*a-16,500*(n-a),200*(a-e),t.opacity)}function On(t,n,e,r){return 1===arguments.length?jn(t):new Hn(t,n,e,null==r?1:r)}function Hn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Bn(t){return t>Rn?Math.pow(t,1/3):t/Pn+Fn}function qn(t){return t>Dn?t*t*t:Pn*(t-Fn)}function Vn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function In(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Yn(t){if(t instanceof $n)return new $n(t.h,t.c,t.l,t.opacity);if(t instanceof Hn||(t=jn(t)),0===t.a&&0===t.b)return new $n(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Tn;return new $n(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Xn(t,n,e,r){return 1===arguments.length?Yn(t):new $n(t,n,e,null==r?1:r)}function $n(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Zn(t){if(isNaN(t.h))return new Hn(t.l,0,0,t.opacity);var n=t.h*En;return new Hn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}function Wn(t){return function(n,e){var r=t((n=Xn(n)).h,(e=Xn(e)).h),i=hn(n.c,e.c),o=hn(n.l,e.l),a=hn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}Et(Hn,On,Tt(At,{brighter:function(t){return new Hn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Hn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Jt(Vn(3.1338561*(n=An*qn(n))-1.6168667*(t=zn*qn(t))-.4906146*(e=Ln*qn(e))),Vn(-.9787684*n+1.9161415*t+.033454*e),Vn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Et($n,Xn,Tt(At,{brighter:function(t){return new $n(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new $n(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Zn(this).rgb()}}));Wn(ln),Wn(hn);var Jn=-.29227,Qn=-.90649,Gn=1.97294,Kn=Gn*Qn,te=1.78277*Gn,ne=1.78277*Jn- -.14861*Qn;function ee(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);t instanceof Jt||(t=Zt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ne*r+Kn*n-te*e)/(ne+Kn-te),o=r-i,a=(Gn*(e-i)-Jn*o)/Qn,s=Math.sqrt(a*a+o*o)/(Gn*i*(1-i)),u=s?Math.atan2(a,o)*Tn-120:NaN;return new re(u<0?u+360:u,s,i,t.opacity)}(t):new re(t,n,e,null==r?1:r)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t){return function n(e){function r(n,r){var i=t((n=ee(n)).h,(r=ee(r)).h),o=hn(n.s,r.s),a=hn(n.l,r.l),s=hn(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=s(t),n+""}}return e=+e,r.gamma=n,r}(1)}Et(re,ee,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*En,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Jt(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Jn*r+Qn*i)),255*(n+e*(Gn*r)),this.opacity)}}));ie(ln),ie(hn);var oe,ae,se=0,ue=0,le=0,ce=1e3,he=0,fe=0,pe=0,de="object"==typeof performance&&performance.now?performance:Date,ge="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function _e(){return fe||(ge(be),fe=de.now()+pe)}function be(){fe=0}function ve(){this._call=this._time=this._next=null}function me(t,n,e){var r=new ve;return r.restart(t,n,e),r}function xe(){fe=(he=de.now())+pe,se=ue=0;try{!function(){_e(),++se;for(var t,n=oe;n;)(t=fe-n._time)>=0&&n._call.call(null,t),n=n._next;--se}()}finally{se=0,function(){var t,n,e=oe,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:oe=n);ae=t,we(r)}(),fe=0}}function ye(){var t=de.now(),n=t-he;n>ce&&(pe-=n,he=t)}function we(t){se||(ue&&(ue=clearTimeout(ue)),t-fe>24?(t<1/0&&(ue=setTimeout(xe,t-de.now()-pe)),le&&(le=clearInterval(le))):(le||(he=de.now(),le=setInterval(ye,ce)),se=1,ge(xe)))}ve.prototype=me.prototype={constructor:ve,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?_e():+e)+(null==n?0:+n),this._next||ae===this||(ae?ae._next=this:oe=this,ae=this),this._call=t,this._time=e,we()},stop:function(){this._call&&(this._call=null,this._time=1/0,we())}};var Me=function(t,n,e){var r=new ve;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},ke=d("start","end","cancel","interrupt"),Se=[],Ce=0,Ne=1,Ue=2,Ee=3,Te=4,Ae=5,ze=6,Le=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(e.state!==Ne)return s();for(l in i)if((f=i[l]).name===e.name){if(f.state===Ee)return Me(o);f.state===Te?(f.state=ze,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=ze,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Me((function(){e.state===Ee&&(e.state=Te,e.timer.restart(a,e.delay,e.time),a(u))})),e.state=Ue,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Ue){for(e.state=Ee,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=Ae,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===Ae&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=ze,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=me((function(t){e.state=Ne,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:ke,tween:Se,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ce})};function Fe(t,n){var e=Pe(t,n);if(e.state>Ce)throw new Error("too late; already scheduled");return e}function De(t,n){var e=Pe(t,n);if(e.state>Ee)throw new Error("too late; already running");return e}function Pe(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Re=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Ue&&e.state<Ae,e.state=ze,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}};function je(t,n){var e,r;return function(){var i=De(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Oe(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=De(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function He(t,n,e){var r=t._id;return t.each((function(){var t=De(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Pe(t,r).value[n]}}var Be=function(t,n){var e;return("number"==typeof n?dn:n instanceof Yt?fn:(e=Yt(n))?(n=e,fn):yn)(t,n)};function qe(t){return function(){this.removeAttribute(t)}}function Ve(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ie(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Ye(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Xe(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}}function $e(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Ze(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}function We(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i}function Je(t,n){return function(){Fe(this,t).delay=+n.apply(this,arguments)}}function Qe(t,n){return n=+n,function(){Fe(this,t).delay=n}}function Ge(t,n){return function(){De(this,t).duration=+n.apply(this,arguments)}}function Ke(t,n){return n=+n,function(){De(this,t).duration=n}}function tr(t,n){if("function"!=typeof n)throw new Error;return function(){De(this,t).ease=n}}function nr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Fe:De;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}var er=St.prototype.constructor;function rr(t){return function(){this.style.removeProperty(t)}}function ir(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}var or=0;function ar(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function sr(){return++or}var ur=St.prototype;ar.prototype=function(t){return St().transition(t)}.prototype={constructor:ar,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=w(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,Le(h[f],n,e,f,h,Pe(s,e)));return new ar(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=k(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=Pe(u,e),g=0,_=p.length;g<_;++g)(f=p[g])&&Le(f,n,e,g,p,d);o.push(p),a.push(u)}return new ar(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=S(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new ar(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new ar(a,this._parents,this._name,this._id)},selection:function(){return new er(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=sr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=Pe(a,n);Le(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ar(r,this._parents,t,e)},call:ur.call,nodes:ur.nodes,node:ur.node,size:ur.size,empty:ur.empty,each:ur.each,on:function(t,n){var e=this._id;return arguments.length<2?Pe(this.node(),e).on.on(t):this.each(nr(e,t,n))},attr:function(t,n){var e=b(t),r="transform"===e?Nn:Be;return this.attrTween(t,"function"==typeof n?(e.local?$e:Xe)(e,r,He(this,"attr."+t,n)):null==n?(e.local?Ve:qe)(e):(e.local?Ye:Ie)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=b(t);return this.tween(e,(r.local?Ze:We)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Cn:Be;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=q(this,t),a=(this.style.removeProperty(t),q(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,rr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=q(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=q(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,He(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=De(this,t),l=u.on,c=null==u.value[a]?o||(o=rr(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=q(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ir(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(He(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Pe(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?je:Oe)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Je:Qe)(n,t)):Pe(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ge:Ke)(n,t)):Pe(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(tr(n,t)):Pe(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each((function(){var e=De(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n}))}))}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var lr=2*Math.PI,cr=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=lr);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*lr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=lr);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*lr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=lr);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*lr)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function hr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return cr.time=_e(),cr;return e}St.prototype.interrupt=function(t){return this.each((function(){Re(this,t)}))},St.prototype.transition=function(t){var n,e;t instanceof ar?(n=t._id,t=t._name):(n=sr(),(e=cr).time=_e(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&Le(a,t,n,l,s,e||hr(a,n));return new ar(r,this._parents,t,n)};function fr(t){return[+t[0],+t[1]]}function pr(t){return[fr(t[0]),fr(t[1])]}["w","e"].map(dr),["n","s"].map(dr),["n","w","e","s","nw","ne","sw","se"].map(dr);function dr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var gr=Math.PI,_r=2*gr,br=_r-1e-6;function vr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function mr(){return new vr}vr.prototype=mr.prototype={constructor:vr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,_=Math.sqrt(d),b=Math.sqrt(h),v=i*Math.tan((gr-Math.acos((d+h-g)/(2*_*b)))/2),m=v/b,x=v/_;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*l)+","+(n+m*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+x*s)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%_r+_r),h>br?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=gr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function xr(){}function yr(t,n){var e=new xr;if(t instanceof xr)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}xr.prototype=yr.prototype={constructor:xr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var wr=yr;function Mr(){}var kr=wr.prototype;function Sr(t,n){var e=new Mr;if(t instanceof Mr)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Mr.prototype=Sr.prototype={constructor:Mr,has:kr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:kr.remove,clear:kr.clear,values:kr.keys,size:kr.size,empty:kr.empty,each:kr.each};Array.prototype.slice;var Cr={},Nr={},Ur=34,Er=10,Tr=13;function Ar(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function zr(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function Lr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Fr(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Lr(-n,6):n>9999?"+"+Lr(n,6):Lr(n,4))+"-"+Lr(t.getUTCMonth()+1,2)+"-"+Lr(t.getUTCDate(),2)+(o?"T"+Lr(e,2)+":"+Lr(r,2)+":"+Lr(i,2)+"."+Lr(o,3)+"Z":i?"T"+Lr(e,2)+":"+Lr(r,2)+":"+Lr(i,2)+"Z":r||e?"T"+Lr(e,2)+":"+Lr(r,2)+"Z":"")}var Dr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,s=0,u=o<=0,l=!1;function c(){if(u)return Nr;if(l)return l=!1,Cr;var n,r,i=a;if(t.charCodeAt(i)===Ur){for(;a++<o&&t.charCodeAt(a)!==Ur||t.charCodeAt(++a)===Ur;);return(n=a)>=o?u=!0:(r=t.charCodeAt(a++))===Er?l=!0:r===Tr&&(l=!0,t.charCodeAt(a)===Er&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(n=a++))===Er)l=!0;else if(r===Tr)l=!0,t.charCodeAt(a)===Er&&++a;else if(r!==e)continue;return t.slice(i,n)}return u=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Er&&--o,t.charCodeAt(o-1)===Tr&&--o;(r=c())!==Nr;){for(var h=[];r!==Cr&&r!==Nr;)h.push(r),r=c();n&&null==(h=n(h,s++))||i.push(h)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?Fr(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Ar(t);return function(r,i){return n(e(r),i,t)}}(t,n):Ar(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=zr(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=zr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Pr=Dr(","),Rr=Pr.parse,jr=(Pr.parseRows,Pr.format,Pr.formatBody,Pr.formatRows,Dr("\t")),Or=jr.parse;jr.parseRows,jr.format,jr.formatBody,jr.formatRows;function Hr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Br=function(t,n){return fetch(t,n).then(Hr)};function qr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Br(n,e).then((function(n){return t(n,r)}))}}var Vr=qr(Rr);qr(Or);function Ir(t){return function(n,e){return Br(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Ir("application/xml"),Ir("text/html"),Ir("image/svg+xml");function Yr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,s,u,l,c,h,f,p=t._root,d={data:r},g=t._x0,_=t._y0,b=t._x1,v=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=n>=(o=(g+b)/2))?g=o:b=o,(c=e>=(a=(_+v)/2))?_=a:v=a,i=p,!(p=p[h=c<<1|l]))return i[h]=d,t;if(s=+t._x.call(null,p.data),u=+t._y.call(null,p.data),n===s&&e===u)return d.next=p,i?i[h]=d:t._root=d,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(l=n>=(o=(g+b)/2))?g=o:b=o,(c=e>=(a=(_+v)/2))?_=a:v=a}while((h=c<<1|l)==(f=(u>=a)<<1|s>=o));return i[f]=p,i[h]=d,t}var Xr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function $r(t){return t[0]}function Zr(t){return t[1]}function Wr(t,n,e){var r=new Jr(null==n?$r:n,null==e?Zr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Jr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Qr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Gr=Wr.prototype=Jr.prototype;Gr.copy=function(){var t,n,e=new Jr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Qr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Qr(n));return e},Gr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Yr(this.cover(n,e),n,e,t)},Gr.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),s=new Array(o),u=1/0,l=1/0,c=-1/0,h=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,s[e]=i,r<u&&(u=r),r>c&&(c=r),i<l&&(l=i),i>h&&(h=i));if(u>c||l>h)return this;for(this.cover(u,l).cover(c,h),e=0;e<o;++e)Yr(this,a[e],s[e],t[e]);return this},Gr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,s,u=i-e,l=this._root;e>t||t>=i||r>n||n>=o;)switch(s=(n<r)<<1|t<e,(a=new Array(4))[s]=l,l=a,u*=2,s){case 0:i=e+u,o=r+u;break;case 1:e=i-u,o=r+u;break;case 2:i=e+u,r=o-u;break;case 3:e=i-u,r=o-u}this._root&&this._root.length&&(this._root=l)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Gr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Gr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Gr.find=function(t,n,e){var r,i,o,a,s,u,l,c=this._x0,h=this._y0,f=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Xr(g,c,h,f,p)),null==e?e=1/0:(c=t-e,h=n-e,f=t+e,p=n+e,e*=e);u=d.pop();)if(!(!(g=u.node)||(i=u.x0)>f||(o=u.y0)>p||(a=u.x1)<c||(s=u.y1)<h))if(g.length){var _=(i+a)/2,b=(o+s)/2;d.push(new Xr(g[3],_,b,a,s),new Xr(g[2],i,b,_,s),new Xr(g[1],_,o,a,b),new Xr(g[0],i,o,_,b)),(l=(n>=b)<<1|t>=_)&&(u=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=u)}else{var v=t-+this._x.call(null,g.data),m=n-+this._y.call(null,g.data),x=v*v+m*m;if(x<e){var y=Math.sqrt(e=x);c=t-y,h=n-y,f=t+y,p=n+y,r=g.data}}return r},Gr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,s,u,l,c,h,f,p=this._root,d=this._x0,g=this._y0,_=this._x1,b=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(s=(d+_)/2))?d=s:_=s,(c=a>=(u=(g+b)/2))?g=u:b=u,n=p,!(p=p[h=c<<1|l]))return this;if(!p.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,f=h)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[f]=p:this._root=p),this):(this._root=i,this)},Gr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Gr.root=function(){return this._root},Gr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Gr.visit=function(t){var n,e,r,i,o,a,s=[],u=this._root;for(u&&s.push(new Xr(u,this._x0,this._y0,this._x1,this._y1));n=s.pop();)if(!t(u=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&u.length){var l=(r+o)/2,c=(i+a)/2;(e=u[3])&&s.push(new Xr(e,l,c,o,a)),(e=u[2])&&s.push(new Xr(e,r,c,l,a)),(e=u[1])&&s.push(new Xr(e,l,i,o,c)),(e=u[0])&&s.push(new Xr(e,r,i,l,c))}return this},Gr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Xr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,s=n.y0,u=n.x1,l=n.y1,c=(a+u)/2,h=(s+l)/2;(o=i[0])&&e.push(new Xr(o,a,s,c,h)),(o=i[1])&&e.push(new Xr(o,c,s,u,h)),(o=i[2])&&e.push(new Xr(o,a,h,c,l)),(o=i[3])&&e.push(new Xr(o,c,h,u,l))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Gr.x=function(t){return arguments.length?(this._x=t,this):this._x},Gr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Kr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},ti=function(t){return(t=Kr(Math.abs(t)))?t[1]:NaN},ni=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ei(t){if(!(n=ni.exec(t)))throw new Error("invalid format: "+t);var n;return new ri({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ri(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ei.prototype=ri.prototype,ri.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ii,oi,ai=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},si=function(t,n){var e=Kr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ui={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return si(100*t,n)},r:si,s:function(t,n){var e=Kr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ii=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Kr(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},li=function(t){return t},ci=Array.prototype.map,hi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];oi=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?li:(n=ci.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?li:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(ci.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=ei(t)).fill,e=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,_=t.precision,b=t.trim,v=t.type;"n"===v?(g=!0,v="g"):ui[v]||(void 0===_&&(_=12),b=!0,v="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var m="$"===f?i:"#"===f&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===f?o:/[%p]/.test(v)?u:"",y=ui[v],w=/[defgprs%]/.test(v);function M(t){var i,o,u,f=m,M=x;if("c"===v)M=y(t)+M,t="";else{var k=(t=+t)<0;if(t=isNaN(t)?c:y(Math.abs(t),_),b&&(t=ai(t)),k&&0==+t&&(k=!1),f=(k?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===v?hi[8+ii/3]:"")+M+(k&&"("===h?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){M=(46===u?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var S=f.length+t.length+M.length,C=S<d?new Array(d-S+1).join(n):"";switch(g&&p&&(t=r(C+t,C.length?d-M.length:1/0),C=""),e){case"<":t=f+t+M+C;break;case"=":t=f+C+t+M;break;case"^":t=C.slice(0,S=C.length>>1)+f+t+M+C.slice(S);break;default:t=C+f+t+M}return s(t)}return _=void 0===_?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,_)):Math.max(0,Math.min(20,_)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,n){var e=h(((t=ei(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ti(n)/3))),i=Math.pow(10,-r),o=hi[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),oi.format,oi.formatPrefix;var fi=function(){return new pi};function pi(){this.reset()}pi.prototype={constructor:pi,reset:function(){this.s=this.t=0},add:function(t){gi(di,t,this.t),gi(this,di.s,this.s),this.s?this.t+=di.t:this.s=di.t},valueOf:function(){return this.s}};var di=new pi;function gi(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var _i=1e-6,bi=1e-12,vi=Math.PI,mi=vi/2,xi=vi/4,yi=2*vi,wi=vi/180,Mi=Math.abs,ki=Math.atan,Si=Math.atan2,Ci=Math.cos,Ni=(Math.ceil,Math.exp),Ui=(Math.floor,Math.log),Ei=(Math.pow,Math.sin),Ti=Math.sign||function(t){return t>0?1:t<0?-1:0},Ai=Math.sqrt,zi=Math.tan;function Li(t){return t>1?0:t<-1?vi:Math.acos(t)}function Fi(t){return t>1?mi:t<-1?-mi:Math.asin(t)}function Di(){}fi(),fi();function Pi(t){var n=t[0],e=t[1],r=Ci(e);return[r*Ci(n),r*Ei(n),Ei(e)]}function Ri(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function ji(t){var n=Ai(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}fi();function Oi(t,n){return[Mi(t)>vi?t+Math.round(-t/yi)*yi:t,n]}Oi.invert=Oi;var Hi=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Di,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Bi=function(t,n){return Mi(t[0]-n[0])<_i&&Mi(t[1]-n[1])<_i};function qi(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Vi=function(t,n,e,r,i){var o,a,s=[],u=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(Bi(r,a)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else s.push(e=new qi(r,t,null,!0)),u.push(e.o=new qi(r,null,e,!1)),s.push(e=new qi(a,t,null,!1)),u.push(e.o=new qi(a,null,e,!0))}})),s.length){for(u.sort(n),Ii(s),Ii(u),o=0,a=u.length;o<a;++o)u[o].e=e=!e;for(var l,c,h=s[0];;){for(var f=h,p=!0;f.v;)if((f=f.n)===h)return;l=f.z,i.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(o=0,a=l.length;o<a;++o)i.point((c=l[o])[0],c[1]);else r(f.x,f.n.x,1,i);f=f.n}else{if(p)for(l=f.p.z,o=l.length-1;o>=0;--o)i.point((c=l[o])[0],c[1]);else r(f.x,f.p.x,-1,i);f=f.p}l=(f=f.o).z,p=!p}while(!f.v);i.lineEnd()}}};function Ii(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var Yi=fi();function Xi(t){return Mi(t[0])<=vi?t[0]:Ti(t[0])*((Mi(t[0])+vi)%yi-vi)}var $i=function(t,n){var e=Xi(n),r=n[1],i=Ei(r),o=[Ei(e),-Ci(e),0],a=0,s=0;Yi.reset(),1===i?r=mi+_i:-1===i&&(r=-mi-_i);for(var u=0,l=t.length;u<l;++u)if(h=(c=t[u]).length)for(var c,h,f=c[h-1],p=Xi(f),d=f[1]/2+xi,g=Ei(d),_=Ci(d),b=0;b<h;++b,p=m,g=y,_=w,f=v){var v=c[b],m=Xi(v),x=v[1]/2+xi,y=Ei(x),w=Ci(x),M=m-p,k=M>=0?1:-1,S=k*M,C=S>vi,N=g*y;if(Yi.add(Si(N*k*Ei(S),_*w+N*Ci(S))),a+=C?M+k*yi:M,C^p>=e^m>=e){var U=Ri(Pi(f),Pi(v));ji(U);var E=Ri(o,U);ji(E);var T=(C^M>=0?-1:1)*Fi(E[2]);(r>T||r===T&&(U[0]||U[1]))&&(s+=C^M>=0?1:-1)}}return(a<-_i||a<_i&&Yi<-_i)^1&s},Zi=function(t,n,e,r){return function(i){var o,a,u,l=n(i),c=Hi(),h=n(c),f=!1,p={point:d,lineStart:_,lineEnd:b,polygonStart:function(){p.point=v,p.lineStart=m,p.lineEnd=x,a=[],o=[]},polygonEnd:function(){p.point=d,p.lineStart=_,p.lineEnd=b,a=s(a);var t=$i(o,r);a.length?(f||(i.polygonStart(),f=!0),Vi(a,Ji,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function g(t,n){l.point(t,n)}function _(){p.point=g,l.lineStart()}function b(){p.point=d,l.lineEnd()}function v(t,n){u.push([t,n]),h.point(t,n)}function m(){h.lineStart(),u=[]}function x(){v(u[0][0],u[0][1]),h.lineEnd();var t,n,e,r,s=h.clean(),l=c.result(),p=l.length;if(u.pop(),o.push(u),u=null,p)if(1&s){if((n=(e=l[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&s&&l.push(l.pop().concat(l.shift())),a.push(l.filter(Wi))}return p}};function Wi(t){return t.length>1}function Ji(t,n){return((t=t.x)[0]<0?t[1]-mi-_i:mi-t[1])-((n=n.x)[0]<0?n[1]-mi-_i:mi-n[1])}Zi((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var s=o>0?vi:-vi,u=Mi(o-e);Mi(u-vi)<_i?(t.point(e,r=(r+a)/2>0?mi:-mi),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),t.point(o,r),n=0):i!==s&&u>=vi&&(Mi(e-i)<_i&&(e-=i*_i),Mi(o-s)<_i&&(o-=s*_i),r=function(t,n,e,r){var i,o,a=Ei(t-e);return Mi(a)>_i?ki((Ei(n)*(o=Ci(r))*Ei(e)-Ei(r)*(i=Ci(n))*Ei(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),n=0),t.point(e=o,r=a),i=s},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*mi,r.point(-vi,i),r.point(0,i),r.point(vi,i),r.point(vi,0),r.point(vi,-i),r.point(0,-i),r.point(-vi,-i),r.point(-vi,0),r.point(-vi,i);else if(Mi(t[0]-n[0])>_i){var o=t[0]<n[0]?vi:-vi;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-vi,-mi]);fi();fi(),fi();function Qi(t){this._context=t}Qi.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,yi)}},result:Di};fi();function Gi(){this._string=[]}function Ki(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Gi.prototype={_radius:4.5,_circle:Ki(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Ki(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function to(t){return function(n){var e=new no;for(var r in t)e[r]=t[r];return e.stream=n,e}}function no(){}no.prototype={constructor:no,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Ci(30*wi);to({point:function(t,n){this.stream.point(t*wi,n*wi)}});function eo(t){return function(n,e){var r=Ci(n),i=Ci(e),o=t(r*i);return[o*i*Ei(n),o*Ei(e)]}}function ro(t){return function(n,e){var r=Ai(n*n+e*e),i=t(r),o=Ei(i),a=Ci(i);return[Si(n*o,r*a),Fi(r&&e*o/r)]}}var io=eo((function(t){return Ai(2/(1+t))}));io.invert=ro((function(t){return 2*Fi(t/2)}));var oo=eo((function(t){return(t=Li(t))&&t/Ei(t)}));oo.invert=ro((function(t){return t}));function ao(t,n){return[t,Ui(zi((mi+n)/2))]}ao.invert=function(t,n){return[t,2*ki(Ni(n))-mi]};function so(t,n){return[t,n]}so.invert=so;var uo=1.340264,lo=-.081106,co=893e-6,ho=.003796,fo=Ai(3)/2;function po(t,n){var e=Fi(fo*Ei(n)),r=e*e,i=r*r*r;return[t*Ci(e)/(fo*(uo+3*lo*r+i*(7*co+9*ho*r))),e*(uo+lo*r+i*(co+ho*r))]}po.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(uo+lo*i+o*(co+ho*i))-n)/(uo+3*lo*i+o*(7*co+9*ho*i)))*r)*i*i,!(Mi(e)<bi));++a);return[fo*t*(uo+3*lo*i+o*(7*co+9*ho*i))/Ci(r),Fi(Ei(r)/fo)]};function go(t,n){var e=Ci(n),r=Ci(t)*e;return[e*Ei(t)/r,Ei(n)/r]}go.invert=ro(ki);function _o(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}_o.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(Mi(e)>_i&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function bo(t,n){return[Ci(n)*Ei(t),Ei(n)]}bo.invert=ro(Fi);function vo(t,n){var e=Ci(n),r=1+Ci(t)*e;return[e*Ei(t)/r,Ei(n)/r]}vo.invert=ro((function(t){return 2*ki(t)}));function mo(t,n){return[Ui(zi((mi+n)/2)),-t]}mo.invert=function(t,n){return[-n,2*ki(Ni(t))-mi]};function xo(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function yo(t,n){var e,r,i,o,a,s=new So(t),u=+t.value&&(s.value=t.value),l=[s];for(null==n&&(n=wo);e=l.pop();)if(u&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)l.push(r=e.children[o]=new So(i[o])),r.parent=e,r.depth=e.depth+1;return s.eachBefore(ko)}function wo(t){return t.children}function Mo(t){t.data=t.data.data}function ko(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function So(t){this.data=t,this.depth=this.height=0,this.parent=null}So.prototype=yo.prototype={constructor:So,count:function(){return this.eachAfter(xo)},each:function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return yo(this).eachBefore(Mo)}};Array.prototype.slice;var Co=function(t,n,e,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(r-n)/t.value;++s<u;)(o=a[s]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*l};function No(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}No.prototype=Object.create(So.prototype);var Uo=function(t,n,e,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(i-e)/t.value;++s<u;)(o=a[s]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*l},Eo=(1+Math.sqrt(5))/2;function To(t,n,e,r,i,o){for(var a,s,u,l,c,h,f,p,d,g,_,b=[],v=n.children,m=0,x=0,y=v.length,w=n.value;m<y;){u=i-e,l=o-r;do{c=v[x++].value}while(!c&&x<y);for(h=f=c,_=c*c*(g=Math.max(l/u,u/l)/(w*t)),d=Math.max(f/_,_/h);x<y;++x){if(c+=s=v[x].value,s<h&&(h=s),s>f&&(f=s),_=c*c*g,(p=Math.max(f/_,_/h))>d){c-=s;break}d=p}b.push(a={value:c,dice:u<l,children:v.slice(m,x)}),a.dice?Co(a,e,r,i,w?r+=l*c/w:o):Uo(a,e,r,w?e+=u*c/w:i,o),w-=c,m=x}return b}(function t(n){function e(t,e,r,i,o){To(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(Eo),function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,s,u,l,c,h=-1,f=a.length,p=t.value;++h<f;){for(u=(s=a[h]).children,l=s.value=0,c=u.length;l<c;++l)s.value+=u[l].value;s.dice?Co(s,e,r,i,r+=(o-r)*s.value/p):Uo(s,e,r,e+=(i-e)*s.value/p,o),p-=s.value}else t._squarify=a=To(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Eo);var Ao=function(){return Math.random()},zo=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Ao),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Ao)),Lo=(function t(n){function e(){var t=zo.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Ao),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Ao));(function t(n){function e(t){var e=Lo.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Ao),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Ao);var Fo=Array.prototype;Fo.map,Fo.slice;var Do=new Date,Po=new Date;function Ro(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return Ro((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Do.setTime(+n),Po.setTime(+r),t(Do),t(Po),Math.floor(e(Do,Po))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var jo=Ro((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));jo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ro((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Oo=jo,Ho=(jo.range,Ro((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Bo=(Ho.range,6e4),qo=6048e5;function Vo(t){return Ro((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Bo)/qo}))}var Io=Vo(0),Yo=Vo(1),Xo=Vo(2),$o=Vo(3),Zo=Vo(4),Wo=Vo(5),Jo=Vo(6),Qo=(Io.range,Yo.range,Xo.range,$o.range,Zo.range,Wo.range,Jo.range,Ro((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Bo)/864e5}),(function(t){return t.getDate()-1}))),Go=Qo,Ko=(Qo.range,Ro((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Bo)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),ta=(Ko.range,Ro((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+n*Bo)}),(function(t,n){return(n-t)/Bo}),(function(t){return t.getMinutes()}))),na=(ta.range,Ro((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),ea=(na.range,Ro((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));ea.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ro((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):ea:null};ea.range;function ra(t){return Ro((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/qo}))}var ia=ra(0),oa=ra(1),aa=ra(2),sa=ra(3),ua=ra(4),la=ra(5),ca=ra(6),ha=(ia.range,oa.range,aa.range,sa.range,ua.range,la.range,ca.range,Ro((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),fa=ha,pa=(ha.range,Ro((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));pa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ro((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var da=pa;pa.range;function ga(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function _a(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ba(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var va,ma={"-":"",_:" ",0:"0"},xa=/^\s*\d+/,ya=/^%/,wa=/[\\^$*+?|[\]().{}]/g;function Ma(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ka(t){return t.replace(wa,"\\$&")}function Sa(t){return new RegExp("^(?:"+t.map(ka).join("|")+")","i")}function Ca(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Na(t,n,e){var r=xa.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ua(t,n,e){var r=xa.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ea(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ta(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Aa(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function za(t,n,e){var r=xa.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function La(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Fa(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Da(t,n,e){var r=xa.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Pa(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Ra(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ja(t,n,e){var r=xa.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Oa(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ha(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ba(t,n,e){var r=xa.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function qa(t,n,e){var r=xa.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Va(t,n,e){var r=xa.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Ia(t,n,e){var r=ya.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Ya(t,n,e){var r=xa.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Xa(t,n,e){var r=xa.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function $a(t,n){return Ma(t.getDate(),n,2)}function Za(t,n){return Ma(t.getHours(),n,2)}function Wa(t,n){return Ma(t.getHours()%12||12,n,2)}function Ja(t,n){return Ma(1+Go.count(Oo(t),t),n,3)}function Qa(t,n){return Ma(t.getMilliseconds(),n,3)}function Ga(t,n){return Qa(t,n)+"000"}function Ka(t,n){return Ma(t.getMonth()+1,n,2)}function ts(t,n){return Ma(t.getMinutes(),n,2)}function ns(t,n){return Ma(t.getSeconds(),n,2)}function es(t){var n=t.getDay();return 0===n?7:n}function rs(t,n){return Ma(Io.count(Oo(t)-1,t),n,2)}function is(t,n){var e=t.getDay();return t=e>=4||0===e?Zo(t):Zo.ceil(t),Ma(Zo.count(Oo(t),t)+(4===Oo(t).getDay()),n,2)}function os(t){return t.getDay()}function as(t,n){return Ma(Yo.count(Oo(t)-1,t),n,2)}function ss(t,n){return Ma(t.getFullYear()%100,n,2)}function us(t,n){return Ma(t.getFullYear()%1e4,n,4)}function ls(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ma(n/60|0,"0",2)+Ma(n%60,"0",2)}function cs(t,n){return Ma(t.getUTCDate(),n,2)}function hs(t,n){return Ma(t.getUTCHours(),n,2)}function fs(t,n){return Ma(t.getUTCHours()%12||12,n,2)}function ps(t,n){return Ma(1+fa.count(da(t),t),n,3)}function ds(t,n){return Ma(t.getUTCMilliseconds(),n,3)}function gs(t,n){return ds(t,n)+"000"}function _s(t,n){return Ma(t.getUTCMonth()+1,n,2)}function bs(t,n){return Ma(t.getUTCMinutes(),n,2)}function vs(t,n){return Ma(t.getUTCSeconds(),n,2)}function ms(t){var n=t.getUTCDay();return 0===n?7:n}function xs(t,n){return Ma(ia.count(da(t)-1,t),n,2)}function ys(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ua(t):ua.ceil(t),Ma(ua.count(da(t),t)+(4===da(t).getUTCDay()),n,2)}function ws(t){return t.getUTCDay()}function Ms(t,n){return Ma(oa.count(da(t)-1,t),n,2)}function ks(t,n){return Ma(t.getUTCFullYear()%100,n,2)}function Ss(t,n){return Ma(t.getUTCFullYear()%1e4,n,4)}function Cs(){return"+0000"}function Ns(){return"%"}function Us(t){return+t}function Es(t){return Math.floor(+t/1e3)}!function(t){va=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Sa(i),c=Ca(i),h=Sa(o),f=Ca(o),p=Sa(a),d=Ca(a),g=Sa(s),_=Ca(s),b=Sa(u),v=Ca(u),m={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:$a,e:$a,f:Ga,H:Za,I:Wa,j:Ja,L:Qa,m:Ka,M:ts,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Us,s:Es,S:ns,u:es,U:rs,V:is,w:os,W:as,x:null,X:null,y:ss,Y:us,Z:ls,"%":Ns},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:cs,e:cs,f:gs,H:hs,I:fs,j:ps,L:ds,m:_s,M:bs,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Us,s:Es,S:vs,u:ms,U:xs,V:ys,w:ws,W:Ms,x:null,X:null,y:ks,Y:Ss,Z:Cs,"%":Ns},y={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return k(t,n,e,r)},d:Ra,e:Ra,f:Va,H:Oa,I:Oa,j:ja,L:qa,m:Pa,M:Ha,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:Da,Q:Ya,s:Xa,S:Ba,u:Ua,U:Ea,V:Ta,w:Na,W:Aa,x:function(t,n,r){return k(t,e,n,r)},X:function(t,n,e){return k(t,r,n,e)},y:La,Y:za,Z:Fa,"%":Ia};function w(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=ma[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=ba(1900,void 0,1);if(k(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!n||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=_a(ba(o.y,0,1))).getUTCDay(),r=i>4||0===i?oa.ceil(r):oa(r),r=fa.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ga(ba(o.y,0,1))).getDay(),r=i>4||0===i?Yo.ceil(r):Yo(r),r=Go.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?_a(ba(o.y,0,1)).getUTCDay():ga(ba(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,_a(o)):ga(o)}}function k(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=y[i in ma?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return(m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}})}(t),va.format,va.parse,va.utcFormat,va.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Ts=Ro((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),As=(Ts.range,Ro((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),zs=(As.range,Ro((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Bo)}),(function(t,n){return(n-t)/Bo}),(function(t){return t.getUTCMinutes()})));zs.range;Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Ls=1e-12,Fs=Math.PI,Ds=2*Fs;function Ps(t){this._context=t}Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Rs=function(t){return new Ps(t)};Os(Rs);function js(t){this._curve=t}function Os(t){function n(n){return new js(t(n))}return n._curve=t,n}js.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Hs=Math.sin(Fs/10)/Math.sin(7*Fs/10),Bs=(Math.sin(Ds/10),Math.cos(Ds/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function qs(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Vs(t){this._context=t}Vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:qs(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:qs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Is(t){this._context=t}Is.prototype={areaStart:Bs,areaEnd:Bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:qs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ys(t){this._context=t}Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:qs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Xs(t,n){this._basis=new Vs(t),this._beta=n}Xs.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,s=n[e]-o,u=-1;++u<=e;)r=u/e,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*a),this._beta*n[u]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Vs(t):new Xs(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function $s(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Zs(t,n){this._context=t,this._k=(1-n)/6}Zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:$s(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:$s(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Zs(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ws(t,n){this._context=t,this._k=(1-n)/6}Ws.prototype={areaStart:Bs,areaEnd:Bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:$s(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ws(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Js(t,n){this._context=t,this._k=(1-n)/6}Js.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:$s(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Js(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Qs(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Ls){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Ls){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-n*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-e*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Gs(t,n){this._context=t,this._alpha=n}Gs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Qs(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Gs(t,n):new Zs(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ks(t,n){this._context=t,this._alpha=n}Ks.prototype={areaStart:Bs,areaEnd:Bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Qs(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ks(t,n):new Ws(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function tu(t,n){this._context=t,this._alpha=n}tu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Qs(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new tu(t,n):new Js(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function nu(t){this._context=t}nu.prototype={areaStart:Bs,areaEnd:Bs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function eu(t){return t<0?-1:1}function ru(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(eu(o)+eu(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function iu(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function ou(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function au(t){this._context=t}function su(t){this._context=new uu(t)}function uu(t){this._context=t}function lu(t){this._context=t}function cu(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}au.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ou(this,this._t0,iu(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,ou(this,iu(this,e=ru(this,t,n)),e);break;default:ou(this,this._t0,e=ru(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(su.prototype=Object.create(au.prototype)).point=function(t,n){au.prototype.point.call(this,n,t)},uu.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},lu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=cu(t),i=cu(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function hu(t,n){this._context=t,this._t=n}hu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function fu(){this._=null}function pu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function du(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function gu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function _u(t){for(;t.L;)t=t.L;return t}fu.prototype={constructor:fu,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=_u(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(du(this,e),e=(t=e).U),e.C=!1,r.C=!0,gu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(gu(this,e),e=(t=e).U),e.C=!1,r.C=!0,du(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?_u(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,du(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,gu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,du(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,gu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,du(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,gu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var bu=fu;function vu(t,n,e,r){var i=[null,null],o=qu.push(i)-1;return i.left=t,i.right=n,e&&xu(i,t,n,e),r&&xu(i,n,t,r),Hu[t.index].halfedges.push(o),Hu[n.index].halfedges.push(o),i}function mu(t,n,e){var r=[n,e];return r.left=t,r}function xu(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function yu(t,n,e,r,i){var o,a=t[0],s=t[1],u=a[0],l=a[1],c=0,h=1,f=s[0]-u,p=s[1]-l;if(o=n-u,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<h&&(h=o)}else if(f>0){if(o>h)return;o>c&&(c=o)}if(o=r-u,f||!(o<0)){if(o/=f,f<0){if(o>h)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<h&&(h=o)}if(o=e-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<h&&(h=o)}else if(p>0){if(o>h)return;o>c&&(c=o)}if(o=i-l,p||!(o<0)){if(o/=p,p<0){if(o>h)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<h&&(h=o)}return!(c>0||h<1)||(c>0&&(t[0]=[u+c*f,l+c*p]),h<1&&(t[1]=[u+h*f,l+h*p]),!0)}}}}}function wu(t,n,e,r,i){var o=t[1];if(o)return!0;var a,s,u=t[0],l=t.left,c=t.right,h=l[0],f=l[1],p=c[0],d=c[1],g=(h+p)/2,_=(f+d)/2;if(d===f){if(g<n||g>=r)return;if(h>p){if(u){if(u[1]>=i)return}else u=[g,e];o=[g,i]}else{if(u){if(u[1]<e)return}else u=[g,i];o=[g,e]}}else if(s=_-(a=(h-p)/(d-f))*g,a<-1||a>1)if(h>p){if(u){if(u[1]>=i)return}else u=[(e-s)/a,e];o=[(i-s)/a,i]}else{if(u){if(u[1]<e)return}else u=[(i-s)/a,i];o=[(e-s)/a,e]}else if(f<d){if(u){if(u[0]>=r)return}else u=[n,a*n+s];o=[r,a*r+s]}else{if(u){if(u[0]<n)return}else u=[r,a*r+s];o=[n,a*n+s]}return t[0]=u,t[1]=o,!0}function Mu(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ku(t,n){return n[+(n.left!==t.site)]}function Su(t,n){return n[+(n.left===t.site)]}var Cu,Nu=[];function Uu(){pu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Eu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],s=i[1],u=r[0]-a,l=r[1]-s,c=o[0]-a,h=o[1]-s,f=2*(u*h-l*c);if(!(f>=-Iu)){var p=u*u+l*l,d=c*c+h*h,g=(h*p-l*d)/f,_=(u*d-c*p)/f,b=Nu.pop()||new Uu;b.arc=t,b.site=i,b.x=g+a,b.y=(b.cy=_+s)+Math.sqrt(g*g+_*_),t.circle=b;for(var v=null,m=Bu._;m;)if(b.y<m.y||b.y===m.y&&b.x<=m.x){if(!m.L){v=m.P;break}m=m.L}else{if(!m.R){v=m;break}m=m.R}Bu.insert(v,b),v||(Cu=b)}}}}function Tu(t){var n=t.circle;n&&(n.P||(Cu=n.N),Bu.remove(n),Nu.push(n),pu(n),t.circle=null)}var Au=[];function zu(){pu(this),this.edge=this.site=this.circle=null}function Lu(t){var n=Au.pop()||new zu;return n.site=t,n}function Fu(t){Tu(t),Ou.remove(t),Au.push(t),pu(t)}function Du(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,s=[t];Fu(t);for(var u=o;u.circle&&Math.abs(e-u.circle.x)<Vu&&Math.abs(r-u.circle.cy)<Vu;)o=u.P,s.unshift(u),Fu(u),u=o;s.unshift(u),Tu(u);for(var l=a;l.circle&&Math.abs(e-l.circle.x)<Vu&&Math.abs(r-l.circle.cy)<Vu;)a=l.N,s.push(l),Fu(l),l=a;s.push(l),Tu(l);var c,h=s.length;for(c=1;c<h;++c)l=s[c],u=s[c-1],xu(l.edge,u.site,l.site,i);u=s[0],(l=s[h-1]).edge=vu(u.site,l.site,null,i),Eu(u),Eu(l)}function Pu(t){for(var n,e,r,i,o=t[0],a=t[1],s=Ou._;s;)if((r=Ru(s,a)-o)>Vu)s=s.L;else{if(!((i=o-ju(s,a))>Vu)){r>-Vu?(n=s.P,e=s):i>-Vu?(n=s,e=s.N):n=e=s;break}if(!s.R){n=s;break}s=s.R}!function(t){Hu[t.index]={site:t,halfedges:[]}}(t);var u=Lu(t);if(Ou.insert(n,u),n||e){if(n===e)return Tu(n),e=Lu(n.site),Ou.insert(u,e),u.edge=e.edge=vu(n.site,u.site),Eu(n),void Eu(e);if(e){Tu(n),Tu(e);var l=n.site,c=l[0],h=l[1],f=t[0]-c,p=t[1]-h,d=e.site,g=d[0]-c,_=d[1]-h,b=2*(f*_-p*g),v=f*f+p*p,m=g*g+_*_,x=[(_*v-p*m)/b+c,(f*m-g*v)/b+h];xu(e.edge,l,d,x),u.edge=vu(l,t,null,x),e.edge=vu(t,d,null,x),Eu(n),Eu(e)}else u.edge=vu(n.site,u.site)}}function Ru(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(e=a.site)[0],u=e[1],l=u-n;if(!l)return s;var c=s-r,h=1/o-1/l,f=c/l;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*l)-u+l/2+i-o/2)))/h+r:(r+s)/2}function ju(t,n){var e=t.N;if(e)return Ru(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Ou,Hu,Bu,qu,Vu=1e-6,Iu=1e-12;function Yu(t,n){return n[1]-t[1]||n[0]-t[0]}function Xu(t,n){var e,r,i,o=t.sort(Yu).pop();for(qu=[],Hu=new Array(t.length),Ou=new bu,Bu=new bu;;)if(i=Cu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Pu(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Du(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Hu.length;i<o;++i)if((t=Hu[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(e=0;e<r;++e)a[e]=e,s[e]=Mu(t,qu[n[e]]);for(a.sort((function(t,n){return s[n]-s[t]})),e=0;e<r;++e)s[e]=n[a[e]];for(e=0;e<r;++e)n[e]=s[e]}}(),n){var a=+n[0][0],s=+n[0][1],u=+n[1][0],l=+n[1][1];!function(t,n,e,r){for(var i,o=qu.length;o--;)wu(i=qu[o],t,n,e,r)&&yu(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Vu||Math.abs(i[0][1]-i[1][1])>Vu)||delete qu[o]}(a,s,u,l),function(t,n,e,r){var i,o,a,s,u,l,c,h,f,p,d,g,_=Hu.length,b=!0;for(i=0;i<_;++i)if(o=Hu[i]){for(a=o.site,s=(u=o.halfedges).length;s--;)qu[u[s]]||u.splice(s,1);for(s=0,l=u.length;s<l;)d=(p=Su(o,qu[u[s]]))[0],g=p[1],h=(c=ku(o,qu[u[++s%l]]))[0],f=c[1],(Math.abs(d-h)>Vu||Math.abs(g-f)>Vu)&&(u.splice(s,0,qu.push(mu(a,p,Math.abs(d-t)<Vu&&r-g>Vu?[t,Math.abs(h-t)<Vu?f:r]:Math.abs(g-r)<Vu&&e-d>Vu?[Math.abs(f-r)<Vu?h:e,r]:Math.abs(d-e)<Vu&&g-n>Vu?[e,Math.abs(h-e)<Vu?f:n]:Math.abs(g-n)<Vu&&d-t>Vu?[Math.abs(f-n)<Vu?h:t,n]:null))-1),++l);l&&(b=!1)}if(b){var v,m,x,y=1/0;for(i=0,b=null;i<_;++i)(o=Hu[i])&&(x=(v=(a=o.site)[0]-t)*v+(m=a[1]-n)*m)<y&&(y=x,b=o);if(b){var w=[t,n],M=[t,r],k=[e,r],S=[e,n];b.halfedges.push(qu.push(mu(a=b.site,w,M))-1,qu.push(mu(a,M,k))-1,qu.push(mu(a,k,S))-1,qu.push(mu(a,S,w))-1)}}for(i=0;i<_;++i)(o=Hu[i])&&(o.halfedges.length||delete Hu[i])}(a,s,u,l)}this.edges=qu,this.cells=Hu,Ou=Bu=qu=Hu=null}Xu.prototype={constructor:Xu,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return ku(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,s,u,l,c=e.site,h=-1,f=n[i[o-1]],p=f.left===c?f.right:f.left;++h<o;)a=p,p=(f=n[i[h]]).left===c?f.right:f.left,a&&p&&r<a.index&&r<p.index&&(u=a,l=p,((s=c)[0]-l[0])*(u[1]-s[1])-(s[0]-u[0])*(l[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var u=t-i.site[0],l=n-i.site[1],c=u*u+l*l;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=t-s[0],l=n-s[1],h=u*u+l*l;h<c&&(c=h,a=s.index)}}))}while(null!==a);return o._found=r,null==e||c<=e*e?i.site:null}};function $u(t,n,e){this.k=t,this.x=n,this.y=e}$u.prototype={constructor:$u,scale:function(t){return 1===t?this:new $u(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new $u(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new $u(1,0,0);$u.prototype;var Zu=function(t,n){var e=this;this.filterData=function(t){e.filteredData=e.data.filter((function(n){return t(n)})),e.adapter.update(e.filteredData)},this.adapter=n,Vr(t).then((function(t){e.data=t.slice(0),e.filteredData=e.data,n.update(e.filteredData)}))},Wu=e(3),Ju=(e(7),function(t){var n=this;this.registreeFilter=document.getElementById("registreeFilter"),this.statusFilter=document.getElementById("statusFilter"),this.sexFilter=document.getElementById("sexFilter"),this.originFilter=document.getElementById("originFilter"),this.occupationFilter=document.getElementById("occupationFilter"),this.masterFilter=document.getElementById("masterFilter"),this.masterResidenceFilter=document.getElementById("masterResidenceFilter"),this.registrationDistrictFilter=document.getElementById("registrationDistrictFilter"),this.sourcesFilter=document.getElementById("sourcesFilter"),this.ageSlider=document.getElementById("ageSlider"),Wu.create(document.getElementById("ageSlider"),{start:[0,100],connect:!0,range:{min:0,max:100},tooltips:!0,format:wNumb({decimals:0}),step:1}),this.dateSlider=document.getElementById("dateSlider"),Wu.create(this.dateSlider,{start:[0,100],connect:!0,range:{min:0,max:100},tooltips:!0,format:wNumb({decimals:0}),step:1}),this.predicates={registree:function(t){return!0},status:function(t){return!0},sex:function(t){return!0},origin:function(t){return!0},age:function(t){return!0},occupation:function(t){return!0},master:function(t){return!0},masterResidence:function(t){return!0},registrationDate:function(t){return!0},registrationDistrict:function(t){return!0},sources:function(t){return!0}},this.registreeFilter.onchange=function(){n.predicates.registree=function(t){return""===n.registreeFilter.value||t.Registree===n.registreeFilter.value},t.refilter(n.predicates)},this.statusFilter.onchange=function(){n.predicates.status=function(t){return t.Status.toLowerCase().includes(n.statusFilter.value.toLowerCase())},t.refilter(n.predicates)},this.sexFilter.onchange=function(){n.predicates.sex=function(t){return t.Sex.toLowerCase()===n.sexFilter.value.toLowerCase()},t.refilter(n.predicates)},this.originFilter.onchange=function(){n.predicates.origin=function(t){return t.Origin.toLowerCase().includes(n.originFilter.value.toLowerCase())},t.refilter(n.predicates)},this.occupationFilter.onchange=function(){n.predicates.occupation=function(t){return t.Occupation.toLowerCase().includes(n.occupationFilter.value.toLowerCase())},t.refilter(n.predicates)},this.masterFilter.onchange=function(){n.predicates.master=function(t){return t.Master.toLowerCase().includes(n.masterFilter.value.toLowerCase())},t.refilter(n.predicates)},this.masterResidenceFilter.onchange=function(){n.predicates.masterResidence=function(t){return t["Master Residence"].toLowerCase().includes(n.masterResidenceFilter.value.toLowerCase())},t.refilter(n.predicates)},this.registrationDistrictFilter.onchange=function(){n.predicates.registrationDistrict=function(t){return t["Registration District"].toLowerCase().includes(n.registrationDistrictFilter.value.toLowerCase())},t.refilter(n.predicates)},this.sourcesFilter.onchange=function(){n.predicates.sources=function(t){return t.Sources.toLowerCase().includes(n.sourcesFilter.value.toLowerCase())},t.refilter(n.predicates)},this.ageSlider.noUiSlider.on("change",(function(e){var r=e.map((function(t){return parseFloat(t)}));n.predicates.age=function(t){return parseFloat(t.Age)>=r[0]&&parseFloat(t.Age)<=r[1]},t.refilter(n.predicates)})),this.dateSlider.noUiSlider.on("change",(function(e){var r=e.map((function(t){return parseFloat(t)}));n.predicates.registrationDate=function(t){var n=t["Registration Date"].substr(0,4);return n>=r[0]&&n<=r[1]},t.refilter(n.predicates)}))}),Qu=function(t,n,e,r,i,o){this.redraw=function(t){console.log("redrawing donut")},console.log("Constructing donut")},Gu=function(t,n,e,r,i){this.redraw=function(t){console.log("Redrawing histogram")},console.log("Constructing histogram")},Ku=function(t,n,e,r,i,o){this.redraw=function(t){console.log("Redrawing map")},console.log("Constructing map")},tl=function(t,n,e,r,i){this.redraw=function(t){console.log("Redrawing table")},console.log("Constructing table")},nl=(e(8),e(11),function(t){var n=this;this.vizualizerHeight=600,this.updateActiveViz=function(t){return n.activeViz.redraw(t)},this.fillDatalists=function(t){},this.adapter=t,this.filters=new Ju(this.adapter);var e=document.getElementById("vizualizers"),r=t.getData();this.donut=new Qu(r,document.getElementById("donutChart"),document.getElementById("dountSelect"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.histogram=new Gu(r,document.getElementById("histogramOverTimeChart"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.map=new Ku(r,document.getElementById("mapChart"),document.getElementById("mapSelect"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.table=new tl(r,"tableChart",this.filters,this.vizualizerHeight,e.offsetWidth-10),this.activeViz=this.map}),el=new Zu("boc.csv",{update:function(t){rl.updateActiveViz(t),rl.fillDatalists(t)}}),rl=new nl({getData:function(){return el.data},refilter:function(t){var n=Object.values(t).reduce((function(t,n){return function(e){return t(e)&&n(e)}}));el.filterData(n)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,