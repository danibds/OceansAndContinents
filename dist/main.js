!function(t){var n={};function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(n){return t[n]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=4)}({4:function(t,n,e){"use strict";e.r(n);var i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},r=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)<0?i=o+1:r=o}return i},right:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)>0?r=o:i=o+1}return i}}};var o=r(i);o.right,o.left;var s=Array.prototype;s.slice,s.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var u=function(t){for(var n,e,i,r=t.length,o=-1,s=0;++o<r;)s+=t[o].length;for(e=new Array(s);--r>=0;)for(n=(i=t[r]).length;--n>=0;)e[--s]=i[n];return e};Array.prototype.slice;var a={value:function(){}};function h(){for(var t,n=0,e=arguments.length,i={};n<e;++n){if(!(t=arguments[n]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new c(i)}function c(t){this._=t}function l(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",i=t.indexOf(".");if(i>=0&&(e=t.slice(i+1),t=t.slice(0,i)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,i=0,r=t.length;i<r;++i)if((e=t[i]).name===n)return e.value}function _(t,n,e){for(var i=0,r=t.length;i<r;++i)if(t[i].name===n){t[i]=a,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}c.prototype=h.prototype={constructor:c,on:function(t,n){var e,i=this._,r=l(t+"",i),o=-1,s=r.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<s;)if(e=(t=r[o]).type)i[e]=_(i[e],t.name,n);else if(null==n)for(e in i)i[e]=_(i[e],t.name,null);return this}for(;++o<s;)if((e=(t=r[o]).type)&&(e=f(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new c(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,i,r=new Array(e),o=0;o<e;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(i=this._[t]).length;o<e;++o)i[o].value.apply(n,r)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(n,e)}};var p=h,v="http://www.w3.org/1999/xhtml",y={svg:"http://www.w3.org/2000/svg",xhtml:v,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},d=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),y.hasOwnProperty(n)?{space:y[n],local:t}:t};function g(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===v&&n.documentElement.namespaceURI===v?n.createElement(t):n.createElementNS(e,t)}}function x(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var m=function(t){var n=d(t);return(n.local?x:g)(n)};function w(){}var M=function(t){return null==t?w:function(){return this.querySelector(t)}};function b(){return[]}var N=function(t){return null==t?b:function(){return this.querySelectorAll(t)}},T=function(t){return function(){return this.matches(t)}},C=function(t){return new Array(t.length)};function k(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}k.prototype={constructor:k,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var S="$";function A(t,n,e,i,r,o){for(var s,u=0,a=n.length,h=o.length;u<h;++u)(s=n[u])?(s.__data__=o[u],i[u]=s):e[u]=new k(t,o[u]);for(;u<a;++u)(s=n[u])&&(r[u]=s)}function E(t,n,e,i,r,o,s){var u,a,h,c={},l=n.length,f=o.length,_=new Array(l);for(u=0;u<l;++u)(a=n[u])&&(_[u]=h=S+s.call(a,a.__data__,u,n),h in c?r[u]=a:c[h]=a);for(u=0;u<f;++u)(a=c[h=S+s.call(t,o[u],u,o)])?(i[u]=a,a.__data__=o[u],c[h]=null):e[u]=new k(t,o[u]);for(u=0;u<l;++u)(a=n[u])&&c[_[u]]===a&&(r[u]=a)}function U(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function P(t){return function(){this.removeAttribute(t)}}function L(t){return function(){this.removeAttributeNS(t.space,t.local)}}function D(t,n){return function(){this.setAttribute(t,n)}}function R(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function q(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Y(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var F=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function j(t){return function(){this.style.removeProperty(t)}}function H(t,n,e){return function(){this.style.setProperty(t,n,e)}}function z(t,n,e){return function(){var i=n.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,e)}}function O(t,n){return t.style.getPropertyValue(n)||F(t).getComputedStyle(t,null).getPropertyValue(n)}function X(t){return function(){delete this[t]}}function $(t,n){return function(){this[t]=n}}function I(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function B(t){return t.trim().split(/^|\s+/)}function Z(t){return t.classList||new V(t)}function V(t){this._node=t,this._names=B(t.getAttribute("class")||"")}function W(t,n){for(var e=Z(t),i=-1,r=n.length;++i<r;)e.add(n[i])}function Q(t,n){for(var e=Z(t),i=-1,r=n.length;++i<r;)e.remove(n[i])}function J(t){return function(){W(this,t)}}function G(t){return function(){Q(this,t)}}function K(t,n){return function(){(n.apply(this,arguments)?W:Q)(this,t)}}V.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function tt(){this.textContent=""}function nt(t){return function(){this.textContent=t}}function et(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function it(){this.innerHTML=""}function rt(t){return function(){this.innerHTML=t}}function ot(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function st(){this.nextSibling&&this.parentNode.appendChild(this)}function ut(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function at(){return null}function ht(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function lt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ft={},_t=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ft={mouseenter:"mouseover",mouseleave:"mouseout"}));function pt(t,n,e){return t=vt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function vt(t,n,e){return function(i){var r=_t;_t=i;try{t.call(this,this.__data__,n,e)}finally{_t=r}}}function yt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function dt(t){return function(){var n=this.__on;if(n){for(var e,i=0,r=-1,o=n.length;i<o;++i)e=n[i],t.type&&e.type!==t.type||e.name!==t.name?n[++r]=e:this.removeEventListener(e.type,e.listener,e.capture);++r?n.length=r:delete this.__on}}}function gt(t,n,e){var i=ft.hasOwnProperty(t.type)?pt:vt;return function(r,o,s){var u,a=this.__on,h=i(n,o,s);if(a)for(var c=0,l=a.length;c<l;++c)if((u=a[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=h,u.capture=e),void(u.value=n);this.addEventListener(t.type,h,e),u={type:t.type,name:t.name,value:n,listener:h,capture:e},a?a.push(u):this.__on=[u]}}function xt(t,n,e){var i=F(t),r=i.CustomEvent;"function"==typeof r?r=new r(n,e):(r=i.document.createEvent("Event"),e?(r.initEvent(n,e.bubbles,e.cancelable),r.detail=e.detail):r.initEvent(n,!1,!1)),t.dispatchEvent(r)}function mt(t,n){return function(){return xt(this,t,n)}}function wt(t,n){return function(){return xt(this,t,n.apply(this,arguments))}}var Mt=[null];function bt(t,n){this._groups=t,this._parents=n}function Nt(){return new bt([[document.documentElement]],Mt)}bt.prototype=Nt.prototype={constructor:bt,select:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s,u=n[r],a=u.length,h=i[r]=new Array(a),c=0;c<a;++c)(o=u[c])&&(s=t.call(o,o.__data__,c,u))&&("__data__"in o&&(s.__data__=o.__data__),h[c]=s);return new bt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,i=[],r=[],o=0;o<e;++o)for(var s,u=n[o],a=u.length,h=0;h<a;++h)(s=u[h])&&(i.push(t.call(s,s.__data__,h,u)),r.push(s));return new bt(i,r)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s=n[r],u=s.length,a=i[r]=[],h=0;h<u;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&a.push(o);return new bt(i,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),c=-1,this.each((function(t){p[++c]=t})),p;var e,i=n?E:A,r=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var s=o.length,u=new Array(s),a=new Array(s),h=new Array(s),c=0;c<s;++c){var l=r[c],f=o[c],_=f.length,p=t.call(l,l&&l.__data__,c,r),v=p.length,y=a[c]=new Array(v),d=u[c]=new Array(v);i(l,f,y,d,h[c]=new Array(_),p,n);for(var g,x,m=0,w=0;m<v;++m)if(g=y[m]){for(m>=w&&(w=m+1);!(x=d[w])&&++w<v;);g._next=x||null}}return(u=new bt(u,r))._enter=a,u._exit=h,u},enter:function(){return new bt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new bt(this._exit||this._groups.map(C),this._parents)},join:function(t,n,e){var i=this.enter(),r=this,o=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=n&&(r=n(r)),null==e?o.remove():e(o),i&&r?i.merge(r).order():r},merge:function(t){for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),s=new Array(i),u=0;u<o;++u)for(var a,h=n[u],c=e[u],l=h.length,f=s[u]=new Array(l),_=0;_<l;++_)(a=h[_]||c[_])&&(f[_]=a);for(;u<i;++u)s[u]=n[u];return new bt(s,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var i,r=t[n],o=r.length-1,s=r[o];--o>=0;)(i=r[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=U);for(var e=this._groups,i=e.length,r=new Array(i),o=0;o<i;++o){for(var s,u=e[o],a=u.length,h=r[o]=new Array(a),c=0;c<a;++c)(s=u[c])&&(h[c]=s);h.sort(n)}return new bt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var i=t[n],r=0,o=i.length;r<o;++r){var s=i[r];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,i=n.length;e<i;++e)for(var r,o=n[e],s=0,u=o.length;s<u;++s)(r=o[s])&&t.call(r,r.__data__,s,o);return this},attr:function(t,n){var e=d(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?L:P:"function"==typeof n?e.local?Y:q:e.local?R:D)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?j:"function"==typeof n?z:H)(t,n,null==e?"":e)):O(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?X:"function"==typeof n?I:$)(t,n)):this.node()[t]},classed:function(t,n){var e=B(t+"");if(arguments.length<2){for(var i=Z(this.node()),r=-1,o=e.length;++r<o;)if(!i.contains(e[r]))return!1;return!0}return this.each(("function"==typeof n?K:n?J:G)(e,n))},text:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?et:nt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?it:("function"==typeof t?ot:rt)(t)):this.node().innerHTML},raise:function(){return this.each(st)},lower:function(){return this.each(ut)},append:function(t){var n="function"==typeof t?t:m(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:m(t),i=null==n?at:"function"==typeof n?n:M(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(ht)},clone:function(t){return this.select(t?lt:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var i,r,o=yt(t+""),s=o.length;if(!(arguments.length<2)){for(u=n?gt:dt,null==e&&(e=!1),i=0;i<s;++i)this.each(u(o[i],n,e));return this}var u=this.node().__on;if(u)for(var a,h=0,c=u.length;h<c;++h)for(i=0,a=u[h];i<s;++i)if((r=o[i]).type===a.type&&r.name===a.name)return a.value},dispatch:function(t,n){return this.each(("function"==typeof n?wt:mt)(t,n))}};var Tt=Nt,Ct=0;function kt(){this._="@"+(++Ct).toString(36)}kt.prototype=function(){return new kt}.prototype={constructor:kt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function St(t,n,e,i,r,o,s,u,a,h){this.target=t,this.type=n,this.subject=e,this.identifier=i,this.active=r,this.x=o,this.y=s,this.dx=u,this.dy=a,this._=h}St.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var At=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Et(t,n){var e=Object.create(t.prototype);for(var i in n)e[i]=n[i];return e}function Ut(){}var Pt="\\s*([+-]?\\d+)\\s*",Lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Dt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rt=/^#([0-9a-f]{3,8})$/,qt=new RegExp("^rgb\\("+[Pt,Pt,Pt]+"\\)$"),Yt=new RegExp("^rgb\\("+[Dt,Dt,Dt]+"\\)$"),Ft=new RegExp("^rgba\\("+[Pt,Pt,Pt,Lt]+"\\)$"),jt=new RegExp("^rgba\\("+[Dt,Dt,Dt,Lt]+"\\)$"),Ht=new RegExp("^hsl\\("+[Lt,Dt,Dt]+"\\)$"),zt=new RegExp("^hsla\\("+[Lt,Dt,Dt,Lt]+"\\)$"),Ot={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Xt(){return this.rgb().formatHex()}function $t(){return this.rgb().formatRgb()}function It(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Rt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Bt(n):3===e?new Qt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new Qt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new Qt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=qt.exec(t))?new Qt(n[1],n[2],n[3],1):(n=Yt.exec(t))?new Qt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ft.exec(t))?Zt(n[1],n[2],n[3],n[4]):(n=jt.exec(t))?Zt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Ht.exec(t))?tn(n[1],n[2]/100,n[3]/100,1):(n=zt.exec(t))?tn(n[1],n[2]/100,n[3]/100,n[4]):Ot.hasOwnProperty(t)?Bt(Ot[t]):"transparent"===t?new Qt(NaN,NaN,NaN,0):null}function Bt(t){return new Qt(t>>16&255,t>>8&255,255&t,1)}function Zt(t,n,e,i){return i<=0&&(t=n=e=NaN),new Qt(t,n,e,i)}function Vt(t){return t instanceof Ut||(t=It(t)),t?new Qt((t=t.rgb()).r,t.g,t.b,t.opacity):new Qt}function Wt(t,n,e,i){return 1===arguments.length?Vt(t):new Qt(t,n,e,null==i?1:i)}function Qt(t,n,e,i){this.r=+t,this.g=+n,this.b=+e,this.opacity=+i}function Jt(){return"#"+Kt(this.r)+Kt(this.g)+Kt(this.b)}function Gt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Kt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function tn(t,n,e,i){return i<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,i)}function nn(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=It(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,i=t.b/255,r=Math.min(n,e,i),o=Math.max(n,e,i),s=NaN,u=o-r,a=(o+r)/2;return u?(s=n===o?(e-i)/u+6*(e<i):e===o?(i-n)/u+2:(n-e)/u+4,u/=a<.5?o+r:2-o-r,s*=60):u=a>0&&a<1?0:s,new rn(s,u,a,t.opacity)}function en(t,n,e,i){return 1===arguments.length?nn(t):new rn(t,n,e,null==i?1:i)}function rn(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function sn(t,n,e,i,r){var o=t*t,s=o*t;return((1-3*t+3*o-s)*n+(4-6*o+3*s)*e+(1+3*t+3*o-3*s)*i+s*r)/6}At(Ut,It,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Xt,formatHex:Xt,formatHsl:function(){return nn(this).formatHsl()},formatRgb:$t,toString:$t}),At(Qt,Wt,Et(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Qt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Qt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jt,formatHex:Jt,formatRgb:Gt,toString:Gt})),At(rn,en,Et(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,i=e+(e<.5?e:1-e)*n,r=2*e-i;return new Qt(on(t>=240?t-240:t+120,r,i),on(t,r,i),on(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var un=function(t){return function(){return t}};function an(t,n){return function(e){return t+e*n}}function hn(t,n){var e=n-t;return e?an(t,e>180||e<-180?e-360*Math.round(e/360):e):un(isNaN(t)?n:t)}function cn(t){return 1==(t=+t)?ln:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(i){return Math.pow(t+i*n,e)}}(n,e,t):un(isNaN(n)?e:n)}}function ln(t,n){var e=n-t;return e?an(t,e):un(isNaN(t)?n:t)}var fn=function t(n){var e=cn(n);function i(t,n){var i=e((t=Wt(t)).r,(n=Wt(n)).r),r=e(t.g,n.g),o=e(t.b,n.b),s=ln(t.opacity,n.opacity);return function(n){return t.r=i(n),t.g=r(n),t.b=o(n),t.opacity=s(n),t+""}}return i.gamma=t,i}(1);function _n(t){return function(n){var e,i,r=n.length,o=new Array(r),s=new Array(r),u=new Array(r);for(e=0;e<r;++e)i=Wt(n[e]),o[e]=i.r||0,s[e]=i.g||0,u[e]=i.b||0;return o=t(o),s=t(s),u=t(u),i.opacity=1,function(t){return i.r=o(t),i.g=s(t),i.b=u(t),i+""}}}_n((function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),r=t[i],o=t[i+1],s=i>0?t[i-1]:2*r-o,u=i<n-1?t[i+2]:2*o-r;return sn((e-i/n)*n,s,r,o,u)}})),_n((function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),r=t[(i+n-1)%n],o=t[i%n],s=t[(i+1)%n],u=t[(i+2)%n];return sn((e-i/n)*n,r,o,s,u)}}));var pn=function(t,n){return n-=t=+t,function(e){return t+n*e}},vn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yn=new RegExp(vn.source,"g");var dn,gn,xn,mn,wn=function(t,n){var e,i,r,o=vn.lastIndex=yn.lastIndex=0,s=-1,u=[],a=[];for(t+="",n+="";(e=vn.exec(t))&&(i=yn.exec(n));)(r=i.index)>o&&(r=n.slice(o,r),u[s]?u[s]+=r:u[++s]=r),(e=e[0])===(i=i[0])?u[s]?u[s]+=i:u[++s]=i:(u[++s]=null,a.push({i:s,x:pn(e,i)})),o=yn.lastIndex;return o<n.length&&(r=n.slice(o),u[s]?u[s]+=r:u[++s]=r),u.length<2?a[0]?function(t){return function(n){return t(n)+""}}(a[0].x):function(t){return function(){return t}}(n):(n=a.length,function(t){for(var e,i=0;i<n;++i)u[(e=a[i]).i]=e.x(t);return u.join("")})},Mn=180/Math.PI,bn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Nn=function(t,n,e,i,r,o){var s,u,a;return(s=Math.sqrt(t*t+n*n))&&(t/=s,n/=s),(a=t*e+n*i)&&(e-=t*a,i-=n*a),(u=Math.sqrt(e*e+i*i))&&(e/=u,i/=u,a/=u),t*i<n*e&&(t=-t,n=-n,a=-a,s=-s),{translateX:r,translateY:o,rotate:Math.atan2(n,t)*Mn,skewX:Math.atan(a)*Mn,scaleX:s,scaleY:u}};function Tn(t,n,e,i){function r(t){return t.length?t.pop()+" ":""}return function(o,s){var u=[],a=[];return o=t(o),s=t(s),function(t,i,r,o,s,u){if(t!==r||i!==o){var a=s.push("translate(",null,n,null,e);u.push({i:a-4,x:pn(t,r)},{i:a-2,x:pn(i,o)})}else(r||o)&&s.push("translate("+r+n+o+e)}(o.translateX,o.translateY,s.translateX,s.translateY,u,a),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(r(e)+"rotate(",null,i)-2,x:pn(t,n)})):n&&e.push(r(e)+"rotate("+n+i)}(o.rotate,s.rotate,u,a),function(t,n,e,o){t!==n?o.push({i:e.push(r(e)+"skewX(",null,i)-2,x:pn(t,n)}):n&&e.push(r(e)+"skewX("+n+i)}(o.skewX,s.skewX,u,a),function(t,n,e,i,o,s){if(t!==e||n!==i){var u=o.push(r(o)+"scale(",null,",",null,")");s.push({i:u-4,x:pn(t,e)},{i:u-2,x:pn(n,i)})}else 1===e&&1===i||o.push(r(o)+"scale("+e+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,u,a),o=s=null,function(t){for(var n,e=-1,i=a.length;++e<i;)u[(n=a[e]).i]=n.x(t);return u.join("")}}}var Cn=Tn((function(t){return"none"===t?bn:(dn||(dn=document.createElement("DIV"),gn=document.documentElement,xn=document.defaultView),dn.style.transform=t,t=xn.getComputedStyle(gn.appendChild(dn),null).getPropertyValue("transform"),gn.removeChild(dn),t=t.slice(7,-1).split(","),Nn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),kn=Tn((function(t){return null==t?bn:(mn||(mn=document.createElementNS("http://www.w3.org/2000/svg","g")),mn.setAttribute("transform",t),(t=mn.transform.baseVal.consolidate())?(t=t.matrix,Nn(t.a,t.b,t.c,t.d,t.e,t.f)):bn)}),", ",")",")");Math.SQRT2;function Sn(t){return function(n,e){var i=t((n=en(n)).h,(e=en(e)).h),r=ln(n.s,e.s),o=ln(n.l,e.l),s=ln(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=r(t),n.l=o(t),n.opacity=s(t),n+""}}}Sn(hn),Sn(ln);var An=Math.PI/180,En=180/Math.PI,Un=.96422,Pn=1,Ln=.82521,Dn=4/29,Rn=6/29,qn=3*Rn*Rn,Yn=Rn*Rn*Rn;function Fn(t){if(t instanceof Hn)return new Hn(t.l,t.a,t.b,t.opacity);if(t instanceof Zn)return Vn(t);t instanceof Qt||(t=Vt(t));var n,e,i=$n(t.r),r=$n(t.g),o=$n(t.b),s=zn((.2225045*i+.7168786*r+.0606169*o)/Pn);return i===r&&r===o?n=e=s:(n=zn((.4360747*i+.3850649*r+.1430804*o)/Un),e=zn((.0139322*i+.0971045*r+.7141733*o)/Ln)),new Hn(116*s-16,500*(n-s),200*(s-e),t.opacity)}function jn(t,n,e,i){return 1===arguments.length?Fn(t):new Hn(t,n,e,null==i?1:i)}function Hn(t,n,e,i){this.l=+t,this.a=+n,this.b=+e,this.opacity=+i}function zn(t){return t>Yn?Math.pow(t,1/3):t/qn+Dn}function On(t){return t>Rn?t*t*t:qn*(t-Dn)}function Xn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function $n(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function In(t){if(t instanceof Zn)return new Zn(t.h,t.c,t.l,t.opacity);if(t instanceof Hn||(t=Fn(t)),0===t.a&&0===t.b)return new Zn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*En;return new Zn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Bn(t,n,e,i){return 1===arguments.length?In(t):new Zn(t,n,e,null==i?1:i)}function Zn(t,n,e,i){this.h=+t,this.c=+n,this.l=+e,this.opacity=+i}function Vn(t){if(isNaN(t.h))return new Hn(t.l,0,0,t.opacity);var n=t.h*An;return new Hn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}function Wn(t){return function(n,e){var i=t((n=Bn(n)).h,(e=Bn(e)).h),r=ln(n.c,e.c),o=ln(n.l,e.l),s=ln(n.opacity,e.opacity);return function(t){return n.h=i(t),n.c=r(t),n.l=o(t),n.opacity=s(t),n+""}}}At(Hn,jn,Et(Ut,{brighter:function(t){return new Hn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Hn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Qt(Xn(3.1338561*(n=Un*On(n))-1.6168667*(t=Pn*On(t))-.4906146*(e=Ln*On(e))),Xn(-.9787684*n+1.9161415*t+.033454*e),Xn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),At(Zn,Bn,Et(Ut,{brighter:function(t){return new Zn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Zn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Vn(this).rgb()}}));Wn(hn),Wn(ln);var Qn=-.29227,Jn=-.90649,Gn=1.97294,Kn=Gn*Jn,te=1.78277*Gn,ne=1.78277*Qn- -.14861*Jn;function ee(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof ie)return new ie(t.h,t.s,t.l,t.opacity);t instanceof Qt||(t=Vt(t));var n=t.r/255,e=t.g/255,i=t.b/255,r=(ne*i+Kn*n-te*e)/(ne+Kn-te),o=i-r,s=(Gn*(e-r)-Qn*o)/Jn,u=Math.sqrt(s*s+o*o)/(Gn*r*(1-r)),a=u?Math.atan2(s,o)*En-120:NaN;return new ie(a<0?a+360:a,u,r,t.opacity)}(t):new ie(t,n,e,null==i?1:i)}function ie(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function re(t){return function n(e){function i(n,i){var r=t((n=ee(n)).h,(i=ee(i)).h),o=ln(n.s,i.s),s=ln(n.l,i.l),u=ln(n.opacity,i.opacity);return function(t){return n.h=r(t),n.s=o(t),n.l=s(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,i.gamma=n,i}(1)}At(ie,ee,Et(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*An,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),i=Math.cos(t),r=Math.sin(t);return new Qt(255*(n+e*(-.14861*i+1.78277*r)),255*(n+e*(Qn*i+Jn*r)),255*(n+e*(Gn*i)),this.opacity)}}));re(hn),re(ln);var oe,se,ue=0,ae=0,he=0,ce=1e3,le=0,fe=0,_e=0,pe="object"==typeof performance&&performance.now?performance:Date,ve="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ye(){return fe||(ve(de),fe=pe.now()+_e)}function de(){fe=0}function ge(){this._call=this._time=this._next=null}function xe(t,n,e){var i=new ge;return i.restart(t,n,e),i}function me(){fe=(le=pe.now())+_e,ue=ae=0;try{!function(){ye(),++ue;for(var t,n=oe;n;)(t=fe-n._time)>=0&&n._call.call(null,t),n=n._next;--ue}()}finally{ue=0,function(){var t,n,e=oe,i=1/0;for(;e;)e._call?(i>e._time&&(i=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:oe=n);se=t,Me(i)}(),fe=0}}function we(){var t=pe.now(),n=t-le;n>ce&&(_e-=n,le=t)}function Me(t){ue||(ae&&(ae=clearTimeout(ae)),t-fe>24?(t<1/0&&(ae=setTimeout(me,t-pe.now()-_e)),he&&(he=clearInterval(he))):(he||(le=pe.now(),he=setInterval(we,ce)),ue=1,ve(me)))}ge.prototype=xe.prototype={constructor:ge,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ye():+e)+(null==n?0:+n),this._next||se===this||(se?se._next=this:oe=this,se=this),this._call=t,this._time=e,Me()},stop:function(){this._call&&(this._call=null,this._time=1/0,Me())}};var be=function(t,n,e){var i=new ge;return n=null==n?0:+n,i.restart((function(e){i.stop(),t(e+n)}),n,e),i},Ne=p("start","end","cancel","interrupt"),Te=[],Ce=0,ke=1,Se=2,Ae=3,Ee=4,Ue=5,Pe=6,Le=function(t,n,e,i,r,o){var s=t.__transition;if(s){if(e in s)return}else t.__transition={};!function(t,n,e){var i,r=t.__transition;function o(a){var h,c,l,f;if(e.state!==ke)return u();for(h in r)if((f=r[h]).name===e.name){if(f.state===Ae)return be(o);f.state===Ee?(f.state=Pe,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete r[h]):+h<n&&(f.state=Pe,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete r[h])}if(be((function(){e.state===Ae&&(e.state=Ee,e.timer.restart(s,e.delay,e.time),s(a))})),e.state=Se,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Se){for(e.state=Ae,i=new Array(l=e.tween.length),h=0,c=-1;h<l;++h)(f=e.tween[h].value.call(t,t.__data__,e.index,e.group))&&(i[++c]=f);i.length=c+1}}function s(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Ue,1),o=-1,s=i.length;++o<s;)i[o].call(t,r);e.state===Ue&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var i in e.state=Pe,e.timer.stop(),delete r[n],r)return;delete t.__transition}r[n]=e,e.timer=xe((function(t){e.state=ke,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:i,group:r,on:Ne,tween:Te,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ce})};function De(t,n){var e=qe(t,n);if(e.state>Ce)throw new Error("too late; already scheduled");return e}function Re(t,n){var e=qe(t,n);if(e.state>Ae)throw new Error("too late; already running");return e}function qe(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Ye=function(t,n){var e,i,r,o=t.__transition,s=!0;if(o){for(r in n=null==n?null:n+"",o)(e=o[r]).name===n?(i=e.state>Se&&e.state<Ue,e.state=Pe,e.timer.stop(),e.on.call(i?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[r]):s=!1;s&&delete t.__transition}};function Fe(t,n){var e,i;return function(){var r=Re(this,t),o=r.tween;if(o!==e)for(var s=0,u=(i=e=o).length;s<u;++s)if(i[s].name===n){(i=i.slice()).splice(s,1);break}r.tween=i}}function je(t,n,e){var i,r;if("function"!=typeof e)throw new Error;return function(){var o=Re(this,t),s=o.tween;if(s!==i){r=(i=s).slice();for(var u={name:n,value:e},a=0,h=r.length;a<h;++a)if(r[a].name===n){r[a]=u;break}a===h&&r.push(u)}o.tween=r}}function He(t,n,e){var i=t._id;return t.each((function(){var t=Re(this,i);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return qe(t,i).value[n]}}var ze=function(t,n){var e;return("number"==typeof n?pn:n instanceof It?fn:(e=It(n))?(n=e,fn):wn)(t,n)};function Oe(t){return function(){this.removeAttribute(t)}}function Xe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function $e(t,n,e){var i,r,o=e+"";return function(){var s=this.getAttribute(t);return s===o?null:s===i?r:r=n(i=s,e)}}function Ie(t,n,e){var i,r,o=e+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===i?r:r=n(i=s,e)}}function Be(t,n,e){var i,r,o;return function(){var s,u,a=e(this);if(null!=a)return(s=this.getAttribute(t))===(u=a+"")?null:s===i&&u===r?o:(r=u,o=n(i=s,a));this.removeAttribute(t)}}function Ze(t,n,e){var i,r,o;return function(){var s,u,a=e(this);if(null!=a)return(s=this.getAttributeNS(t.space,t.local))===(u=a+"")?null:s===i&&u===r?o:(r=u,o=n(i=s,a));this.removeAttributeNS(t.space,t.local)}}function Ve(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,r)),e}return r._value=n,r}function We(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,r)),e}return r._value=n,r}function Qe(t,n){return function(){De(this,t).delay=+n.apply(this,arguments)}}function Je(t,n){return n=+n,function(){De(this,t).delay=n}}function Ge(t,n){return function(){Re(this,t).duration=+n.apply(this,arguments)}}function Ke(t,n){return n=+n,function(){Re(this,t).duration=n}}function ti(t,n){if("function"!=typeof n)throw new Error;return function(){Re(this,t).ease=n}}function ni(t,n,e){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?De:Re;return function(){var s=o(this,t),u=s.on;u!==i&&(r=(i=u).copy()).on(n,e),s.on=r}}var ei=Tt.prototype.constructor;function ii(t){return function(){this.style.removeProperty(t)}}function ri(t,n,e){var i,r;function o(){var o=n.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,n,e){return function(i){this.style.setProperty(t,n(i),e)}}(t,o,e)),i}return o._value=n,o}var oi=0;function si(t,n,e,i){this._groups=t,this._parents=n,this._name=e,this._id=i}function ui(){return++oi}var ai=Tt.prototype;si.prototype=function(t){return Tt().transition(t)}.prototype={constructor:si,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=M(t));for(var i=this._groups,r=i.length,o=new Array(r),s=0;s<r;++s)for(var u,a,h=i[s],c=h.length,l=o[s]=new Array(c),f=0;f<c;++f)(u=h[f])&&(a=t.call(u,u.__data__,f,h))&&("__data__"in u&&(a.__data__=u.__data__),l[f]=a,Le(l[f],n,e,f,l,qe(u,e)));return new si(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=N(t));for(var i=this._groups,r=i.length,o=[],s=[],u=0;u<r;++u)for(var a,h=i[u],c=h.length,l=0;l<c;++l)if(a=h[l]){for(var f,_=t.call(a,a.__data__,l,h),p=qe(a,e),v=0,y=_.length;v<y;++v)(f=_[v])&&Le(f,n,e,v,_,p);o.push(_),s.push(a)}return new si(o,s,n,e)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s=n[r],u=s.length,a=i[r]=[],h=0;h<u;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&a.push(o);return new si(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),s=new Array(i),u=0;u<o;++u)for(var a,h=n[u],c=e[u],l=h.length,f=s[u]=new Array(l),_=0;_<l;++_)(a=h[_]||c[_])&&(f[_]=a);for(;u<i;++u)s[u]=n[u];return new si(s,this._parents,this._name,this._id)},selection:function(){return new ei(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ui(),i=this._groups,r=i.length,o=0;o<r;++o)for(var s,u=i[o],a=u.length,h=0;h<a;++h)if(s=u[h]){var c=qe(s,n);Le(s,t,e,h,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new si(i,this._parents,t,e)},call:ai.call,nodes:ai.nodes,node:ai.node,size:ai.size,empty:ai.empty,each:ai.each,on:function(t,n){var e=this._id;return arguments.length<2?qe(this.node(),e).on.on(t):this.each(ni(e,t,n))},attr:function(t,n){var e=d(t),i="transform"===e?kn:ze;return this.attrTween(t,"function"==typeof n?(e.local?Ze:Be)(e,i,He(this,"attr."+t,n)):null==n?(e.local?Xe:Oe)(e):(e.local?Ie:$e)(e,i,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=d(t);return this.tween(e,(i.local?Ve:We)(i,n))},style:function(t,n,e){var i="transform"==(t+="")?Cn:ze;return null==n?this.styleTween(t,function(t,n){var e,i,r;return function(){var o=O(this,t),s=(this.style.removeProperty(t),O(this,t));return o===s?null:o===e&&s===i?r:r=n(e=o,i=s)}}(t,i)).on("end.style."+t,ii(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var i,r,o;return function(){var s=O(this,t),u=e(this),a=u+"";return null==u&&(this.style.removeProperty(t),a=u=O(this,t)),s===a?null:s===i&&a===r?o:(r=a,o=n(i=s,u))}}(t,i,He(this,"style."+t,n))).each(function(t,n){var e,i,r,o,s="style."+n,u="end."+s;return function(){var a=Re(this,t),h=a.on,c=null==a.value[s]?o||(o=ii(n)):void 0;h===e&&r===c||(i=(e=h).copy()).on(u,r=c),a.on=i}}(this._id,t)):this.styleTween(t,function(t,n,e){var i,r,o=e+"";return function(){var s=O(this,t);return s===o?null:s===i?r:r=n(i=s,e)}}(t,i,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,ri(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(He(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var i,r=qe(this.node(),e).tween,o=0,s=r.length;o<s;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==n?Fe:je)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Qe:Je)(n,t)):qe(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ge:Ke)(n,t)):qe(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ti(n,t)):qe(this.node(),n).ease},end:function(){var t,n,e=this,i=e._id,r=e.size();return new Promise((function(o,s){var u={value:s},a={value:function(){0==--r&&o()}};e.each((function(){var e=Re(this,i),r=e.on;r!==t&&((n=(t=r).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(a)),e.on=n}))}))}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var hi=2*Math.PI,ci=(function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function li(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ci.time=ye(),ci;return e}Tt.prototype.interrupt=function(t){return this.each((function(){Ye(this,t)}))},Tt.prototype.transition=function(t){var n,e;t instanceof si?(n=t._id,t=t._name):(n=ui(),(e=ci).time=ye(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var s,u=i[o],a=u.length,h=0;h<a;++h)(s=u[h])&&Le(s,t,n,h,u,e||li(s,n));return new si(i,this._parents,t,n)};function fi(t){return[+t[0],+t[1]]}function _i(t){return[fi(t[0]),fi(t[1])]}["w","e"].map(pi),["n","s"].map(pi),["n","w","e","s","nw","ne","sw","se"].map(pi);function pi(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var vi=Math.PI,yi=2*vi,di=yi-1e-6;function gi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function xi(){return new gi}gi.prototype=xi.prototype={constructor:gi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,i){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+i)},bezierCurveTo:function(t,n,e,i,r,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +i+","+(this._x1=+r)+","+(this._y1=+o)},arcTo:function(t,n,e,i,r){t=+t,n=+n,e=+e,i=+i,r=+r;var o=this._x1,s=this._y1,u=e-t,a=i-n,h=o-t,c=s-n,l=h*h+c*c;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(c*u-a*h)>1e-6&&r){var f=e-o,_=i-s,p=u*u+a*a,v=f*f+_*_,y=Math.sqrt(p),d=Math.sqrt(l),g=r*Math.tan((vi-Math.acos((p+l-v)/(2*y*d)))/2),x=g/d,m=g/y;Math.abs(x-1)>1e-6&&(this._+="L"+(t+x*h)+","+(n+x*c)),this._+="A"+r+","+r+",0,0,"+ +(c*f>h*_)+","+(this._x1=t+m*u)+","+(this._y1=n+m*a)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,i,r,o){t=+t,n=+n,o=!!o;var s=(e=+e)*Math.cos(i),u=e*Math.sin(i),a=t+s,h=n+u,c=1^o,l=o?i-r:r-i;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+a+","+h:(Math.abs(this._x1-a)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+a+","+h),e&&(l<0&&(l=l%yi+yi),l>di?this._+="A"+e+","+e+",0,1,"+c+","+(t-s)+","+(n-u)+"A"+e+","+e+",0,1,"+c+","+(this._x1=a)+","+(this._y1=h):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=vi)+","+c+","+(this._x1=t+e*Math.cos(r))+","+(this._y1=n+e*Math.sin(r))))},rect:function(t,n,e,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +i+"h"+-e+"Z"},toString:function(){return this._}};function mi(){}function wi(t,n){var e=new mi;if(t instanceof mi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var i,r=-1,o=t.length;if(null==n)for(;++r<o;)e.set(r,t[r]);else for(;++r<o;)e.set(n(i=t[r],r,t),i)}else if(t)for(var s in t)e.set(s,t[s]);return e}mi.prototype=wi.prototype={constructor:mi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Mi=wi;function bi(){}var Ni=Mi.prototype;function Ti(t,n){var e=new bi;if(t instanceof bi)t.each((function(t){e.add(t)}));else if(t){var i=-1,r=t.length;if(null==n)for(;++i<r;)e.add(t[i]);else for(;++i<r;)e.add(n(t[i],i,t))}return e}bi.prototype=Ti.prototype={constructor:bi,has:Ni.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ni.remove,clear:Ni.clear,values:Ni.keys,size:Ni.size,empty:Ni.empty,each:Ni.each};Array.prototype.slice;var Ci={},ki={},Si=34,Ai=10,Ei=13;function Ui(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function Pi(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var i in t)i in n||e.push(n[i]=i)})),e}function Li(t,n){var e=t+"",i=e.length;return i<n?new Array(n-i+1).join(0)+e:e}function Di(t){var n,e=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Li(-n,6):n>9999?"+"+Li(n,6):Li(n,4))+"-"+Li(t.getUTCMonth()+1,2)+"-"+Li(t.getUTCDate(),2)+(o?"T"+Li(e,2)+":"+Li(i,2)+":"+Li(r,2)+"."+Li(o,3)+"Z":r?"T"+Li(e,2)+":"+Li(i,2)+":"+Li(r,2)+"Z":i||e?"T"+Li(e,2)+":"+Li(i,2)+"Z":"")}var Ri=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function i(t,n){var i,r=[],o=t.length,s=0,u=0,a=o<=0,h=!1;function c(){if(a)return ki;if(h)return h=!1,Ci;var n,i,r=s;if(t.charCodeAt(r)===Si){for(;s++<o&&t.charCodeAt(s)!==Si||t.charCodeAt(++s)===Si;);return(n=s)>=o?a=!0:(i=t.charCodeAt(s++))===Ai?h=!0:i===Ei&&(h=!0,t.charCodeAt(s)===Ai&&++s),t.slice(r+1,n-1).replace(/""/g,'"')}for(;s<o;){if((i=t.charCodeAt(n=s++))===Ai)h=!0;else if(i===Ei)h=!0,t.charCodeAt(s)===Ai&&++s;else if(i!==e)continue;return t.slice(r,n)}return a=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===Ai&&--o,t.charCodeAt(o-1)===Ei&&--o;(i=c())!==ki;){for(var l=[];i!==Ci&&i!==ki;)l.push(i),i=c();n&&null==(l=n(l,u++))||r.push(l)}return r}function r(n,e){return n.map((function(n){return e.map((function(t){return s(n[t])})).join(t)}))}function o(n){return n.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?Di(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,o=i(t,(function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=Ui(t);return function(i,r){return n(e(i),r,t)}}(t,n):Ui(t)}));return o.columns=r||[],o},parseRows:i,format:function(n,e){return null==e&&(e=Pi(n)),[e.map(s).join(t)].concat(r(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Pi(t)),r(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},qi=Ri(","),Yi=qi.parse,Fi=(qi.parseRows,qi.format,qi.formatBody,qi.formatRows,Ri("\t")),ji=Fi.parse;Fi.parseRows,Fi.format,Fi.formatBody,Fi.formatRows;function Hi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var zi=function(t,n){return fetch(t,n).then(Hi)};function Oi(t){return function(n,e,i){return 2===arguments.length&&"function"==typeof e&&(i=e,e=void 0),zi(n,e).then((function(n){return t(n,i)}))}}var Xi=Oi(Yi);Oi(ji);function $i(t){return function(n,e){return zi(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}$i("application/xml"),$i("text/html"),$i("image/svg+xml");function Ii(t,n,e,i){if(isNaN(n)||isNaN(e))return t;var r,o,s,u,a,h,c,l,f,_=t._root,p={data:i},v=t._x0,y=t._y0,d=t._x1,g=t._y1;if(!_)return t._root=p,t;for(;_.length;)if((h=n>=(o=(v+d)/2))?v=o:d=o,(c=e>=(s=(y+g)/2))?y=s:g=s,r=_,!(_=_[l=c<<1|h]))return r[l]=p,t;if(u=+t._x.call(null,_.data),a=+t._y.call(null,_.data),n===u&&e===a)return p.next=_,r?r[l]=p:t._root=p,t;do{r=r?r[l]=new Array(4):t._root=new Array(4),(h=n>=(o=(v+d)/2))?v=o:d=o,(c=e>=(s=(y+g)/2))?y=s:g=s}while((l=c<<1|h)==(f=(a>=s)<<1|u>=o));return r[f]=_,r[l]=p,t}var Bi=function(t,n,e,i,r){this.node=t,this.x0=n,this.y0=e,this.x1=i,this.y1=r};function Zi(t){return t[0]}function Vi(t){return t[1]}function Wi(t,n,e){var i=new Qi(null==n?Zi:n,null==e?Vi:e,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Qi(t,n,e,i,r,o){this._x=t,this._y=n,this._x0=e,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function Ji(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Gi=Wi.prototype=Qi.prototype;Gi.copy=function(){var t,n,e=new Qi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return e;if(!i.length)return e._root=Ji(i),e;for(t=[{source:i,target:e._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(n=i.source[r])&&(n.length?t.push({source:n,target:i.target[r]=new Array(4)}):i.target[r]=Ji(n));return e},Gi.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ii(this.cover(n,e),n,e,t)},Gi.addAll=function(t){var n,e,i,r,o=t.length,s=new Array(o),u=new Array(o),a=1/0,h=1/0,c=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(r=+this._y.call(null,n))||(s[e]=i,u[e]=r,i<a&&(a=i),i>c&&(c=i),r<h&&(h=r),r>l&&(l=r));if(a>c||h>l)return this;for(this.cover(a,h).cover(c,l),e=0;e<o;++e)Ii(this,s[e],u[e],t[e]);return this},Gi.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(e))r=(e=Math.floor(t))+1,o=(i=Math.floor(n))+1;else{for(var s,u,a=r-e,h=this._root;e>t||t>=r||i>n||n>=o;)switch(u=(n<i)<<1|t<e,(s=new Array(4))[u]=h,h=s,a*=2,u){case 0:r=e+a,o=i+a;break;case 1:e=r-a,o=i+a;break;case 2:r=e+a,i=o-a;break;case 3:e=r-a,i=o-a}this._root&&this._root.length&&(this._root=h)}return this._x0=e,this._y0=i,this._x1=r,this._y1=o,this},Gi.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Gi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Gi.find=function(t,n,e){var i,r,o,s,u,a,h,c=this._x0,l=this._y0,f=this._x1,_=this._y1,p=[],v=this._root;for(v&&p.push(new Bi(v,c,l,f,_)),null==e?e=1/0:(c=t-e,l=n-e,f=t+e,_=n+e,e*=e);a=p.pop();)if(!(!(v=a.node)||(r=a.x0)>f||(o=a.y0)>_||(s=a.x1)<c||(u=a.y1)<l))if(v.length){var y=(r+s)/2,d=(o+u)/2;p.push(new Bi(v[3],y,d,s,u),new Bi(v[2],r,d,y,u),new Bi(v[1],y,o,s,d),new Bi(v[0],r,o,y,d)),(h=(n>=d)<<1|t>=y)&&(a=p[p.length-1],p[p.length-1]=p[p.length-1-h],p[p.length-1-h]=a)}else{var g=t-+this._x.call(null,v.data),x=n-+this._y.call(null,v.data),m=g*g+x*x;if(m<e){var w=Math.sqrt(e=m);c=t-w,l=n-w,f=t+w,_=n+w,i=v.data}}return i},Gi.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var n,e,i,r,o,s,u,a,h,c,l,f,_=this._root,p=this._x0,v=this._y0,y=this._x1,d=this._y1;if(!_)return this;if(_.length)for(;;){if((h=o>=(u=(p+y)/2))?p=u:y=u,(c=s>=(a=(v+d)/2))?v=a:d=a,n=_,!(_=_[l=c<<1|h]))return this;if(!_.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,f=l)}for(;_.data!==t;)if(i=_,!(_=_.next))return this;return(r=_.next)&&delete _.next,i?(r?i.next=r:delete i.next,this):n?(r?n[l]=r:delete n[l],(_=n[0]||n[1]||n[2]||n[3])&&_===(n[3]||n[2]||n[1]||n[0])&&!_.length&&(e?e[f]=_:this._root=_),this):(this._root=r,this)},Gi.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Gi.root=function(){return this._root},Gi.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Gi.visit=function(t){var n,e,i,r,o,s,u=[],a=this._root;for(a&&u.push(new Bi(a,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(a=n.node,i=n.x0,r=n.y0,o=n.x1,s=n.y1)&&a.length){var h=(i+o)/2,c=(r+s)/2;(e=a[3])&&u.push(new Bi(e,h,c,o,s)),(e=a[2])&&u.push(new Bi(e,i,c,h,s)),(e=a[1])&&u.push(new Bi(e,h,r,o,c)),(e=a[0])&&u.push(new Bi(e,i,r,h,c))}return this},Gi.visitAfter=function(t){var n,e=[],i=[];for(this._root&&e.push(new Bi(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var r=n.node;if(r.length){var o,s=n.x0,u=n.y0,a=n.x1,h=n.y1,c=(s+a)/2,l=(u+h)/2;(o=r[0])&&e.push(new Bi(o,s,u,c,l)),(o=r[1])&&e.push(new Bi(o,c,u,a,l)),(o=r[2])&&e.push(new Bi(o,s,l,c,h)),(o=r[3])&&e.push(new Bi(o,c,l,a,h))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Gi.x=function(t){return arguments.length?(this._x=t,this):this._x},Gi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ki=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,i=t.slice(0,e);return[i.length>1?i[0]+i.slice(2):i,+t.slice(e+1)]},tr=function(t){return(t=Ki(Math.abs(t)))?t[1]:NaN},nr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function er(t){if(!(n=nr.exec(t)))throw new Error("invalid format: "+t);var n;return new ir({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ir(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}er.prototype=ir.prototype,ir.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var rr,or,sr=function(t){t:for(var n,e=t.length,i=1,r=-1;i<e;++i)switch(t[i]){case".":r=n=i;break;case"0":0===r&&(r=i),n=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(n+1):t},ur=function(t,n){var e=Ki(t,n);if(!e)return t+"";var i=e[0],r=e[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},ar={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ur(100*t,n)},r:ur,s:function(t,n){var e=Ki(t,n);if(!e)return t+"";var i=e[0],r=e[1],o=r-(rr=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return o===s?i:o>s?i+new Array(o-s+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+Ki(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},hr=function(t){return t},cr=Array.prototype.map,lr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];or=function(t){var n,e,i=void 0===t.grouping||void 0===t.thousands?hr:(n=cr.call(t.grouping,Number),e=t.thousands+"",function(t,i){for(var r=t.length,o=[],s=0,u=n[0],a=0;r>0&&u>0&&(a+u+1>i&&(u=Math.max(1,i-a)),o.push(t.substring(r-=u,r+u)),!((a+=u+1)>i));)u=n[s=(s+1)%n.length];return o.reverse().join(e)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?hr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(cr.call(t.numerals,String)),a=void 0===t.percent?"%":t.percent+"",h=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=er(t)).fill,e=t.align,l=t.sign,f=t.symbol,_=t.zero,p=t.width,v=t.comma,y=t.precision,d=t.trim,g=t.type;"n"===g?(v=!0,g="g"):ar[g]||(void 0===y&&(y=12),d=!0,g="g"),(_||"0"===n&&"="===e)&&(_=!0,n="0",e="=");var x="$"===f?r:"#"===f&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===f?o:/[%p]/.test(g)?a:"",w=ar[g],M=/[defgprs%]/.test(g);function b(t){var r,o,a,f=x,b=m;if("c"===g)b=w(t)+b,t="";else{var N=(t=+t)<0;if(t=isNaN(t)?c:w(Math.abs(t),y),d&&(t=sr(t)),N&&0==+t&&(N=!1),f=(N?"("===l?l:h:"-"===l||"("===l?"":l)+f,b=("s"===g?lr[8+rr/3]:"")+b+(N&&"("===l?")":""),M)for(r=-1,o=t.length;++r<o;)if(48>(a=t.charCodeAt(r))||a>57){b=(46===a?s+t.slice(r+1):t.slice(r))+b,t=t.slice(0,r);break}}v&&!_&&(t=i(t,1/0));var T=f.length+t.length+b.length,C=T<p?new Array(p-T+1).join(n):"";switch(v&&_&&(t=i(C+t,C.length?p-b.length:1/0),C=""),e){case"<":t=f+t+b+C;break;case"=":t=f+C+t+b;break;case"^":t=C.slice(0,T=C.length>>1)+f+t+b+C.slice(T);break;default:t=C+f+t+b}return u(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),b.toString=function(){return t+""},b}return{format:l,formatPrefix:function(t,n){var e=l(((t=er(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(tr(n)/3))),r=Math.pow(10,-i),o=lr[8+i/3];return function(t){return e(r*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),or.format,or.formatPrefix;var fr=function(){return new _r};function _r(){this.reset()}_r.prototype={constructor:_r,reset:function(){this.s=this.t=0},add:function(t){vr(pr,t,this.t),vr(this,pr.s,this.s),this.s?this.t+=pr.t:this.s=pr.t},valueOf:function(){return this.s}};var pr=new _r;function vr(t,n,e){var i=t.s=n+e,r=i-n,o=i-r;t.t=n-o+(e-r)}var yr=1e-6,dr=1e-12,gr=Math.PI,xr=gr/2,mr=gr/4,wr=2*gr,Mr=gr/180,br=Math.abs,Nr=Math.atan,Tr=Math.atan2,Cr=Math.cos,kr=(Math.ceil,Math.exp),Sr=(Math.floor,Math.log),Ar=(Math.pow,Math.sin),Er=Math.sign||function(t){return t>0?1:t<0?-1:0},Ur=Math.sqrt,Pr=Math.tan;function Lr(t){return t>1?0:t<-1?gr:Math.acos(t)}function Dr(t){return t>1?xr:t<-1?-xr:Math.asin(t)}function Rr(){}fr(),fr();function qr(t){var n=t[0],e=t[1],i=Cr(e);return[i*Cr(n),i*Ar(n),Ar(e)]}function Yr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Fr(t){var n=Ur(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}fr();function jr(t,n){return[br(t)>gr?t+Math.round(-t/wr)*wr:t,n]}jr.invert=jr;var Hr=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Rr,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},zr=function(t,n){return br(t[0]-n[0])<yr&&br(t[1]-n[1])<yr};function Or(t,n,e,i){this.x=t,this.z=n,this.o=e,this.e=i,this.v=!1,this.n=this.p=null}var Xr=function(t,n,e,i,r){var o,s,u=[],a=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],s=t[n];if(zr(i,s)){for(r.lineStart(),o=0;o<n;++o)r.point((i=t[o])[0],i[1]);r.lineEnd()}else u.push(e=new Or(i,t,null,!0)),a.push(e.o=new Or(i,null,e,!1)),u.push(e=new Or(s,t,null,!1)),a.push(e.o=new Or(s,null,e,!0))}})),u.length){for(a.sort(n),$r(u),$r(a),o=0,s=a.length;o<s;++o)a[o].e=e=!e;for(var h,c,l=u[0];;){for(var f=l,_=!0;f.v;)if((f=f.n)===l)return;h=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(_)for(o=0,s=h.length;o<s;++o)r.point((c=h[o])[0],c[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(_)for(h=f.p.z,o=h.length-1;o>=0;--o)r.point((c=h[o])[0],c[1]);else i(f.x,f.p.x,-1,r);f=f.p}h=(f=f.o).z,_=!_}while(!f.v);r.lineEnd()}}};function $r(t){if(n=t.length){for(var n,e,i=0,r=t[0];++i<n;)r.n=e=t[i],e.p=r,r=e;r.n=e=t[0],e.p=r}}var Ir=fr();function Br(t){return br(t[0])<=gr?t[0]:Er(t[0])*((br(t[0])+gr)%wr-gr)}var Zr=function(t,n){var e=Br(n),i=n[1],r=Ar(i),o=[Ar(e),-Cr(e),0],s=0,u=0;Ir.reset(),1===r?i=xr+yr:-1===r&&(i=-xr-yr);for(var a=0,h=t.length;a<h;++a)if(l=(c=t[a]).length)for(var c,l,f=c[l-1],_=Br(f),p=f[1]/2+mr,v=Ar(p),y=Cr(p),d=0;d<l;++d,_=x,v=w,y=M,f=g){var g=c[d],x=Br(g),m=g[1]/2+mr,w=Ar(m),M=Cr(m),b=x-_,N=b>=0?1:-1,T=N*b,C=T>gr,k=v*w;if(Ir.add(Tr(k*N*Ar(T),y*M+k*Cr(T))),s+=C?b+N*wr:b,C^_>=e^x>=e){var S=Yr(qr(f),qr(g));Fr(S);var A=Yr(o,S);Fr(A);var E=(C^b>=0?-1:1)*Dr(A[2]);(i>E||i===E&&(S[0]||S[1]))&&(u+=C^b>=0?1:-1)}}return(s<-yr||s<yr&&Ir<-yr)^1&u},Vr=function(t,n,e,i){return function(r){var o,s,a,h=n(r),c=Hr(),l=n(c),f=!1,_={point:p,lineStart:y,lineEnd:d,polygonStart:function(){_.point=g,_.lineStart=x,_.lineEnd=m,s=[],o=[]},polygonEnd:function(){_.point=p,_.lineStart=y,_.lineEnd=d,s=u(s);var t=Zr(o,i);s.length?(f||(r.polygonStart(),f=!0),Xr(s,Qr,t,e,r)):t&&(f||(r.polygonStart(),f=!0),r.lineStart(),e(null,null,1,r),r.lineEnd()),f&&(r.polygonEnd(),f=!1),s=o=null},sphere:function(){r.polygonStart(),r.lineStart(),e(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function p(n,e){t(n,e)&&r.point(n,e)}function v(t,n){h.point(t,n)}function y(){_.point=v,h.lineStart()}function d(){_.point=p,h.lineEnd()}function g(t,n){a.push([t,n]),l.point(t,n)}function x(){l.lineStart(),a=[]}function m(){g(a[0][0],a[0][1]),l.lineEnd();var t,n,e,i,u=l.clean(),h=c.result(),_=h.length;if(a.pop(),o.push(a),a=null,_)if(1&u){if((n=(e=h[0]).length-1)>0){for(f||(r.polygonStart(),f=!0),r.lineStart(),t=0;t<n;++t)r.point((i=e[t])[0],i[1]);r.lineEnd()}}else _>1&&2&u&&h.push(h.pop().concat(h.shift())),s.push(h.filter(Wr))}return _}};function Wr(t){return t.length>1}function Qr(t,n){return((t=t.x)[0]<0?t[1]-xr-yr:xr-t[1])-((n=n.x)[0]<0?n[1]-xr-yr:xr-n[1])}Vr((function(){return!0}),(function(t){var n,e=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,s){var u=o>0?gr:-gr,a=br(o-e);br(a-gr)<yr?(t.point(e,i=(i+s)/2>0?xr:-xr),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),t.point(o,i),n=0):r!==u&&a>=gr&&(br(e-r)<yr&&(e-=r*yr),br(o-u)<yr&&(o-=u*yr),i=function(t,n,e,i){var r,o,s=Ar(t-e);return br(s)>yr?Nr((Ar(n)*(o=Cr(i))*Ar(e)-Ar(i)*(r=Cr(n))*Ar(t))/(r*o*s)):(n+i)/2}(e,i,o,s),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),n=0),t.point(e=o,i=s),r=u},lineEnd:function(){t.lineEnd(),e=i=NaN},clean:function(){return 2-n}}}),(function(t,n,e,i){var r;if(null==t)r=e*xr,i.point(-gr,r),i.point(0,r),i.point(gr,r),i.point(gr,0),i.point(gr,-r),i.point(0,-r),i.point(-gr,-r),i.point(-gr,0),i.point(-gr,r);else if(br(t[0]-n[0])>yr){var o=t[0]<n[0]?gr:-gr;r=e*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(n[0],n[1])}),[-gr,-xr]);fr();fr(),fr();function Jr(t){this._context=t}Jr.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,wr)}},result:Rr};fr();function Gr(){this._string=[]}function Kr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Gr.prototype={_radius:4.5,_circle:Kr(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Kr(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function to(t){return function(n){var e=new no;for(var i in t)e[i]=t[i];return e.stream=n,e}}function no(){}no.prototype={constructor:no,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Cr(30*Mr);to({point:function(t,n){this.stream.point(t*Mr,n*Mr)}});function eo(t){return function(n,e){var i=Cr(n),r=Cr(e),o=t(i*r);return[o*r*Ar(n),o*Ar(e)]}}function io(t){return function(n,e){var i=Ur(n*n+e*e),r=t(i),o=Ar(r),s=Cr(r);return[Tr(n*o,i*s),Dr(i&&e*o/i)]}}var ro=eo((function(t){return Ur(2/(1+t))}));ro.invert=io((function(t){return 2*Dr(t/2)}));var oo=eo((function(t){return(t=Lr(t))&&t/Ar(t)}));oo.invert=io((function(t){return t}));function so(t,n){return[t,Sr(Pr((xr+n)/2))]}so.invert=function(t,n){return[t,2*Nr(kr(n))-xr]};function uo(t,n){return[t,n]}uo.invert=uo;var ao=1.340264,ho=-.081106,co=893e-6,lo=.003796,fo=Ur(3)/2;function _o(t,n){var e=Dr(fo*Ar(n)),i=e*e,r=i*i*i;return[t*Cr(e)/(fo*(ao+3*ho*i+r*(7*co+9*lo*i))),e*(ao+ho*i+r*(co+lo*i))]}_o.invert=function(t,n){for(var e,i=n,r=i*i,o=r*r*r,s=0;s<12&&(o=(r=(i-=e=(i*(ao+ho*r+o*(co+lo*r))-n)/(ao+3*ho*r+o*(7*co+9*lo*r)))*i)*r*r,!(br(e)<dr));++s);return[fo*t*(ao+3*ho*r+o*(7*co+9*lo*r))/Cr(i),Dr(Ar(i)/fo)]};function po(t,n){var e=Cr(n),i=Cr(t)*e;return[e*Ar(t)/i,Ar(n)/i]}po.invert=io(Nr);function vo(t,n){var e=n*n,i=e*e;return[t*(.8707-.131979*e+i*(i*(.003971*e-.001529*i)-.013791)),n*(1.007226+e*(.015085+i*(.028874*e-.044475-.005916*i)))]}vo.invert=function(t,n){var e,i=n,r=25;do{var o=i*i,s=o*o;i-=e=(i*(1.007226+o*(.015085+s*(.028874*o-.044475-.005916*s)))-n)/(1.007226+o*(.045255+s*(.259866*o-.311325-.005916*11*s)))}while(br(e)>yr&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]};function yo(t,n){return[Cr(n)*Ar(t),Ar(n)]}yo.invert=io(Dr);function go(t,n){var e=Cr(n),i=1+Cr(t)*e;return[e*Ar(t)/i,Ar(n)/i]}go.invert=io((function(t){return 2*Nr(t)}));function xo(t,n){return[Sr(Pr((xr+n)/2)),-t]}xo.invert=function(t,n){return[-n,2*Nr(kr(t))-xr]};function mo(t){var n=0,e=t.children,i=e&&e.length;if(i)for(;--i>=0;)n+=e[i].value;else n=1;t.value=n}function wo(t,n){var e,i,r,o,s,u=new To(t),a=+t.value&&(u.value=t.value),h=[u];for(null==n&&(n=Mo);e=h.pop();)if(a&&(e.value=+e.data.value),(r=n(e.data))&&(s=r.length))for(e.children=new Array(s),o=s-1;o>=0;--o)h.push(i=e.children[o]=new To(r[o])),i.parent=e,i.depth=e.depth+1;return u.eachBefore(No)}function Mo(t){return t.children}function bo(t){t.data=t.data.data}function No(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function To(t){this.data=t,this.depth=this.height=0,this.parent=null}To.prototype=wo.prototype={constructor:To,count:function(){return this.eachAfter(mo)},each:function(t){var n,e,i,r,o=this,s=[o];do{for(n=s.reverse(),s=[];o=n.pop();)if(t(o),e=o.children)for(i=0,r=e.length;i<r;++i)s.push(e[i])}while(s.length);return this},eachAfter:function(t){for(var n,e,i,r=this,o=[r],s=[];r=o.pop();)if(s.push(r),n=r.children)for(e=0,i=n.length;e<i;++e)o.push(n[e]);for(;r=s.pop();)t(r);return this},eachBefore:function(t){for(var n,e,i=this,r=[i];i=r.pop();)if(t(i),n=i.children)for(e=n.length-1;e>=0;--e)r.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,i=n.children,r=i&&i.length;--r>=0;)e+=i[r].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),i=n.ancestors(),r=null;t=e.pop(),n=i.pop();for(;t===n;)r=t,t=e.pop(),n=i.pop();return r}(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var r=i.length;t!==e;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return wo(this).eachBefore(bo)}};Array.prototype.slice;var Co=function(t,n,e,i,r){for(var o,s=t.children,u=-1,a=s.length,h=t.value&&(i-n)/t.value;++u<a;)(o=s[u]).y0=e,o.y1=r,o.x0=n,o.x1=n+=o.value*h};function ko(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}ko.prototype=Object.create(To.prototype);var So=function(t,n,e,i,r){for(var o,s=t.children,u=-1,a=s.length,h=t.value&&(r-e)/t.value;++u<a;)(o=s[u]).x0=n,o.x1=i,o.y0=e,o.y1=e+=o.value*h},Ao=(1+Math.sqrt(5))/2;function Eo(t,n,e,i,r,o){for(var s,u,a,h,c,l,f,_,p,v,y,d=[],g=n.children,x=0,m=0,w=g.length,M=n.value;x<w;){a=r-e,h=o-i;do{c=g[m++].value}while(!c&&m<w);for(l=f=c,y=c*c*(v=Math.max(h/a,a/h)/(M*t)),p=Math.max(f/y,y/l);m<w;++m){if(c+=u=g[m].value,u<l&&(l=u),u>f&&(f=u),y=c*c*v,(_=Math.max(f/y,y/l))>p){c-=u;break}p=_}d.push(s={value:c,dice:a<h,children:g.slice(x,m)}),s.dice?Co(s,e,i,r,M?i+=h*c/M:o):So(s,e,i,M?e+=a*c/M:r,o),M-=c,x=m}return d}(function t(n){function e(t,e,i,r,o){Eo(n,t,e,i,r,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(Ao),function t(n){function e(t,e,i,r,o){if((s=t._squarify)&&s.ratio===n)for(var s,u,a,h,c,l=-1,f=s.length,_=t.value;++l<f;){for(a=(u=s[l]).children,h=u.value=0,c=a.length;h<c;++h)u.value+=a[h].value;u.dice?Co(u,e,i,r,i+=(o-i)*u.value/_):So(u,e,i,e+=(r-e)*u.value/_,o),_-=u.value}else t._squarify=s=Eo(n,t,e,i,r,o),s.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Ao);var Uo=function(){return Math.random()},Po=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Uo),function t(n){function e(t,e){var i,r;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=i)o=i,i=null;else do{i=2*n()-1,o=2*n()-1,r=i*i+o*o}while(!r||r>1);return t+e*o*Math.sqrt(-2*Math.log(r)/r)}}return e.source=t,e}(Uo)),Lo=(function t(n){function e(){var t=Po.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Uo),function t(n){function e(t){return function(){for(var e=0,i=0;i<t;++i)e+=n();return e}}return e.source=t,e}(Uo));(function t(n){function e(t){var e=Lo.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Uo),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Uo);var Do=Array.prototype;Do.map,Do.slice;var Ro=new Date,qo=new Date;function Yo(t,n,e,i){function r(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return r.floor=function(n){return t(n=new Date(+n)),n},r.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},r.round=function(t){var n=r(t),e=r.ceil(t);return t-n<e-t?n:e},r.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},r.range=function(e,i,o){var s,u=[];if(e=r.ceil(e),o=null==o?1:Math.floor(o),!(e<i&&o>0))return u;do{u.push(s=new Date(+e)),n(e,o),t(e)}while(s<e&&e<i);return u},r.filter=function(e){return Yo((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;n(t,-1),!e(t););else for(;--i>=0;)for(;n(t,1),!e(t););}))},e&&(r.count=function(n,i){return Ro.setTime(+n),qo.setTime(+i),t(Ro),t(qo),Math.floor(e(Ro,qo))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(n){return i(n)%t==0}:function(n){return r.count(0,n)%t==0}):r:null}),r}var Fo=Yo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Fo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Yo((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var jo=Fo,Ho=(Fo.range,Yo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),zo=(Ho.range,6e4),Oo=6048e5;function Xo(t){return Yo((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*zo)/Oo}))}var $o=Xo(0),Io=Xo(1),Bo=Xo(2),Zo=Xo(3),Vo=Xo(4),Wo=Xo(5),Qo=Xo(6),Jo=($o.range,Io.range,Bo.range,Zo.range,Vo.range,Wo.range,Qo.range,Yo((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*zo)/864e5}),(function(t){return t.getDate()-1}))),Go=Jo,Ko=(Jo.range,Yo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*zo)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),ts=(Ko.range,Yo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+n*zo)}),(function(t,n){return(n-t)/zo}),(function(t){return t.getMinutes()}))),ns=(ts.range,Yo((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),es=(ns.range,Yo((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));es.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Yo((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):es:null};es.range;function is(t){return Yo((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/Oo}))}var rs=is(0),os=is(1),ss=is(2),us=is(3),as=is(4),hs=is(5),cs=is(6),ls=(rs.range,os.range,ss.range,us.range,as.range,hs.range,cs.range,Yo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),fs=ls,_s=(ls.range,Yo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));_s.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Yo((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var ps=_s;_s.range;function vs(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ys(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ds(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var gs,xs={"-":"",_:" ",0:"0"},ms=/^\s*\d+/,ws=/^%/,Ms=/[\\^$*+?|[\]().{}]/g;function bs(t,n,e){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<e?new Array(e-o+1).join(n)+r:r)}function Ns(t){return t.replace(Ms,"\\$&")}function Ts(t){return new RegExp("^(?:"+t.map(Ns).join("|")+")","i")}function Cs(t){for(var n={},e=-1,i=t.length;++e<i;)n[t[e].toLowerCase()]=e;return n}function ks(t,n,e){var i=ms.exec(n.slice(e,e+1));return i?(t.w=+i[0],e+i[0].length):-1}function Ss(t,n,e){var i=ms.exec(n.slice(e,e+1));return i?(t.u=+i[0],e+i[0].length):-1}function As(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.U=+i[0],e+i[0].length):-1}function Es(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.V=+i[0],e+i[0].length):-1}function Us(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.W=+i[0],e+i[0].length):-1}function Ps(t,n,e){var i=ms.exec(n.slice(e,e+4));return i?(t.y=+i[0],e+i[0].length):-1}function Ls(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),e+i[0].length):-1}function Ds(t,n,e){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),e+i[0].length):-1}function Rs(t,n,e){var i=ms.exec(n.slice(e,e+1));return i?(t.q=3*i[0]-3,e+i[0].length):-1}function qs(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.m=i[0]-1,e+i[0].length):-1}function Ys(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.d=+i[0],e+i[0].length):-1}function Fs(t,n,e){var i=ms.exec(n.slice(e,e+3));return i?(t.m=0,t.d=+i[0],e+i[0].length):-1}function js(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.H=+i[0],e+i[0].length):-1}function Hs(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.M=+i[0],e+i[0].length):-1}function zs(t,n,e){var i=ms.exec(n.slice(e,e+2));return i?(t.S=+i[0],e+i[0].length):-1}function Os(t,n,e){var i=ms.exec(n.slice(e,e+3));return i?(t.L=+i[0],e+i[0].length):-1}function Xs(t,n,e){var i=ms.exec(n.slice(e,e+6));return i?(t.L=Math.floor(i[0]/1e3),e+i[0].length):-1}function $s(t,n,e){var i=ws.exec(n.slice(e,e+1));return i?e+i[0].length:-1}function Is(t,n,e){var i=ms.exec(n.slice(e));return i?(t.Q=+i[0],e+i[0].length):-1}function Bs(t,n,e){var i=ms.exec(n.slice(e));return i?(t.s=+i[0],e+i[0].length):-1}function Zs(t,n){return bs(t.getDate(),n,2)}function Vs(t,n){return bs(t.getHours(),n,2)}function Ws(t,n){return bs(t.getHours()%12||12,n,2)}function Qs(t,n){return bs(1+Go.count(jo(t),t),n,3)}function Js(t,n){return bs(t.getMilliseconds(),n,3)}function Gs(t,n){return Js(t,n)+"000"}function Ks(t,n){return bs(t.getMonth()+1,n,2)}function tu(t,n){return bs(t.getMinutes(),n,2)}function nu(t,n){return bs(t.getSeconds(),n,2)}function eu(t){var n=t.getDay();return 0===n?7:n}function iu(t,n){return bs($o.count(jo(t)-1,t),n,2)}function ru(t,n){var e=t.getDay();return t=e>=4||0===e?Vo(t):Vo.ceil(t),bs(Vo.count(jo(t),t)+(4===jo(t).getDay()),n,2)}function ou(t){return t.getDay()}function su(t,n){return bs(Io.count(jo(t)-1,t),n,2)}function uu(t,n){return bs(t.getFullYear()%100,n,2)}function au(t,n){return bs(t.getFullYear()%1e4,n,4)}function hu(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+bs(n/60|0,"0",2)+bs(n%60,"0",2)}function cu(t,n){return bs(t.getUTCDate(),n,2)}function lu(t,n){return bs(t.getUTCHours(),n,2)}function fu(t,n){return bs(t.getUTCHours()%12||12,n,2)}function _u(t,n){return bs(1+fs.count(ps(t),t),n,3)}function pu(t,n){return bs(t.getUTCMilliseconds(),n,3)}function vu(t,n){return pu(t,n)+"000"}function yu(t,n){return bs(t.getUTCMonth()+1,n,2)}function du(t,n){return bs(t.getUTCMinutes(),n,2)}function gu(t,n){return bs(t.getUTCSeconds(),n,2)}function xu(t){var n=t.getUTCDay();return 0===n?7:n}function mu(t,n){return bs(rs.count(ps(t)-1,t),n,2)}function wu(t,n){var e=t.getUTCDay();return t=e>=4||0===e?as(t):as.ceil(t),bs(as.count(ps(t),t)+(4===ps(t).getUTCDay()),n,2)}function Mu(t){return t.getUTCDay()}function bu(t,n){return bs(os.count(ps(t)-1,t),n,2)}function Nu(t,n){return bs(t.getUTCFullYear()%100,n,2)}function Tu(t,n){return bs(t.getUTCFullYear()%1e4,n,4)}function Cu(){return"+0000"}function ku(){return"%"}function Su(t){return+t}function Au(t){return Math.floor(+t/1e3)}!function(t){gs=function(t){var n=t.dateTime,e=t.date,i=t.time,r=t.periods,o=t.days,s=t.shortDays,u=t.months,a=t.shortMonths,h=Ts(r),c=Cs(r),l=Ts(o),f=Cs(o),_=Ts(s),p=Cs(s),v=Ts(u),y=Cs(u),d=Ts(a),g=Cs(a),x={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return a[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Zs,e:Zs,f:Gs,H:Vs,I:Ws,j:Qs,L:Js,m:Ks,M:tu,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Su,s:Au,S:nu,u:eu,U:iu,V:ru,w:ou,W:su,x:null,X:null,y:uu,Y:au,Z:hu,"%":ku},m={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return a[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:cu,e:cu,f:vu,H:lu,I:fu,j:_u,L:pu,m:yu,M:du,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Su,s:Au,S:gu,u:xu,U:mu,V:wu,w:Mu,W:bu,x:null,X:null,y:Nu,Y:Tu,Z:Cu,"%":ku},w={a:function(t,n,e){var i=_.exec(n.slice(e));return i?(t.w=p[i[0].toLowerCase()],e+i[0].length):-1},A:function(t,n,e){var i=l.exec(n.slice(e));return i?(t.w=f[i[0].toLowerCase()],e+i[0].length):-1},b:function(t,n,e){var i=d.exec(n.slice(e));return i?(t.m=g[i[0].toLowerCase()],e+i[0].length):-1},B:function(t,n,e){var i=v.exec(n.slice(e));return i?(t.m=y[i[0].toLowerCase()],e+i[0].length):-1},c:function(t,e,i){return N(t,n,e,i)},d:Ys,e:Ys,f:Xs,H:js,I:js,j:Fs,L:Os,m:qs,M:Hs,p:function(t,n,e){var i=h.exec(n.slice(e));return i?(t.p=c[i[0].toLowerCase()],e+i[0].length):-1},q:Rs,Q:Is,s:Bs,S:zs,u:Ss,U:As,V:Es,w:ks,W:Us,x:function(t,n,i){return N(t,e,n,i)},X:function(t,n,e){return N(t,i,n,e)},y:Ls,Y:Ps,Z:Ds,"%":$s};function M(t,n){return function(e){var i,r,o,s=[],u=-1,a=0,h=t.length;for(e instanceof Date||(e=new Date(+e));++u<h;)37===t.charCodeAt(u)&&(s.push(t.slice(a,u)),null!=(r=xs[i=t.charAt(++u)])?i=t.charAt(++u):r="e"===i?" ":"0",(o=n[i])&&(i=o(e,r)),s.push(i),a=u+1);return s.push(t.slice(a,u)),s.join("")}}function b(t,n){return function(e){var i,r,o=ds(1900,void 0,1);if(N(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!n||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=ys(ds(o.y,0,1))).getUTCDay(),i=r>4||0===r?os.ceil(i):os(i),i=fs.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=vs(ds(o.y,0,1))).getDay(),i=r>4||0===r?Io.ceil(i):Io(i),i=Go.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?ys(ds(o.y,0,1)).getUTCDay():vs(ds(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ys(o)):vs(o)}}function N(t,n,e,i){for(var r,o,s=0,u=n.length,a=e.length;s<u;){if(i>=a)return-1;if(37===(r=n.charCodeAt(s++))){if(r=n.charAt(s++),!(o=w[r in xs?n.charAt(s++):r])||(i=o(t,e,i))<0)return-1}else if(r!=e.charCodeAt(i++))return-1}return i}return(x.x=M(e,x),x.X=M(i,x),x.c=M(n,x),m.x=M(e,m),m.X=M(i,m),m.c=M(n,m),{format:function(t){var n=M(t+="",x);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}})}(t),gs.format,gs.parse,gs.utcFormat,gs.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Eu=Yo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Uu=(Eu.range,Yo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Pu=(Uu.range,Yo((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*zo)}),(function(t,n){return(n-t)/zo}),(function(t){return t.getUTCMinutes()})));Pu.range;Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Lu=1e-12,Du=Math.PI,Ru=2*Du;function qu(t){this._context=t}qu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Yu=function(t){return new qu(t)};ju(Yu);function Fu(t){this._curve=t}function ju(t){function n(n){return new Fu(t(n))}return n._curve=t,n}Fu.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Hu=Math.sin(Du/10)/Math.sin(7*Du/10),zu=(Math.sin(Ru/10),Math.cos(Ru/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Ou(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Xu(t){this._context=t}Xu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ou(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ou(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function $u(t){this._context=t}$u.prototype={areaStart:zu,areaEnd:zu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Ou(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Iu(t){this._context=t}Iu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:Ou(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Bu(t,n){this._basis=new Xu(t),this._beta=n}Bu.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var i,r=t[0],o=n[0],s=t[e]-r,u=n[e]-o,a=-1;++a<=e;)i=a/e,this._basis.point(this._beta*t[a]+(1-this._beta)*(r+i*s),this._beta*n[a]+(1-this._beta)*(o+i*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Xu(t):new Bu(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Zu(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Vu(t,n){this._context=t,this._k=(1-n)/6}Vu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Zu(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Zu(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Vu(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Wu(t,n){this._context=t,this._k=(1-n)/6}Wu.prototype={areaStart:zu,areaEnd:zu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Zu(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Wu(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Qu(t,n){this._context=t,this._k=(1-n)/6}Qu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Zu(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Qu(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ju(t,n,e){var i=t._x1,r=t._y1,o=t._x2,s=t._y2;if(t._l01_a>Lu){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,a=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/a,r=(r*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/a}if(t._l23_a>Lu){var h=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*h+t._x1*t._l23_2a-n*t._l12_2a)/c,s=(s*h+t._y1*t._l23_2a-e*t._l12_2a)/c}t._context.bezierCurveTo(i,r,o,s,t._x2,t._y2)}function Gu(t,n){this._context=t,this._alpha=n}Gu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ju(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Gu(t,n):new Vu(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ku(t,n){this._context=t,this._alpha=n}Ku.prototype={areaStart:zu,areaEnd:zu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ju(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ku(t,n):new Wu(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function ta(t,n){this._context=t,this._alpha=n}ta.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ju(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ta(t,n):new Qu(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function na(t){this._context=t}na.prototype={areaStart:zu,areaEnd:zu,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function ea(t){return t<0?-1:1}function ia(t,n,e){var i=t._x1-t._x0,r=n-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),s=(e-t._y1)/(r||i<0&&-0),u=(o*r+s*i)/(i+r);return(ea(o)+ea(s))*Math.min(Math.abs(o),Math.abs(s),.5*Math.abs(u))||0}function ra(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function oa(t,n,e){var i=t._x0,r=t._y0,o=t._x1,s=t._y1,u=(o-i)/3;t._context.bezierCurveTo(i+u,r+u*n,o-u,s-u*e,o,s)}function sa(t){this._context=t}function ua(t){this._context=new aa(t)}function aa(t){this._context=t}function ha(t){this._context=t}function ca(t){var n,e,i=t.length-1,r=new Array(i),o=new Array(i),s=new Array(i);for(r[0]=0,o[0]=2,s[0]=t[0]+2*t[1],n=1;n<i-1;++n)r[n]=1,o[n]=4,s[n]=4*t[n]+2*t[n+1];for(r[i-1]=2,o[i-1]=7,s[i-1]=8*t[i-1]+t[i],n=1;n<i;++n)e=r[n]/o[n-1],o[n]-=e,s[n]-=e*s[n-1];for(r[i-1]=s[i-1]/o[i-1],n=i-2;n>=0;--n)r[n]=(s[n]-r[n+1])/o[n];for(o[i-1]=(t[i]+r[i-1])/2,n=0;n<i-1;++n)o[n]=2*t[n+1]-r[n+1];return[r,o]}sa.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:oa(this,this._t0,ra(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,oa(this,ra(this,e=ia(this,t,n)),e);break;default:oa(this,this._t0,e=ia(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(ua.prototype=Object.create(sa.prototype)).point=function(t,n){sa.prototype.point.call(this,n,t)},aa.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,i,r,o){this._context.bezierCurveTo(n,t,i,e,o,r)}},ha.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var i=ca(t),r=ca(n),o=0,s=1;s<e;++o,++s)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[s],n[s]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function la(t,n){this._context=t,this._t=n}la.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function fa(){this._=null}function _a(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function pa(t,n){var e=n,i=n.R,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.R=i.L,e.R&&(e.R.U=e),i.L=e}function va(t,n){var e=n,i=n.L,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.L=i.R,e.L&&(e.L.U=e),i.R=e}function ya(t){for(;t.L;)t=t.L;return t}fa.prototype={constructor:fa,insert:function(t,n){var e,i,r;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=ya(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(i=e.U).L?(r=i.R)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.R&&(pa(this,e),e=(t=e).U),e.C=!1,i.C=!0,va(this,i)):(r=i.L)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.L&&(va(this,e),e=(t=e).U),e.C=!1,i.C=!0,pa(this,i)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,i,r=t.U,o=t.L,s=t.R;if(e=o?s?ya(s):o:s,r?r.L===t?r.L=e:r.R=e:this._=e,o&&s?(i=e.C,e.C=t.C,e.L=o,o.U=e,e!==s?(r=e.U,e.U=t.U,t=e.R,r.L=t,e.R=s,s.U=e):(e.U=r,r=e,t=e.R)):(i=t.C,t=e),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((n=r.R).C&&(n.C=!1,r.C=!0,pa(this,r),n=r.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,va(this,n),n=r.R),n.C=r.C,r.C=n.R.C=!1,pa(this,r),t=this._;break}}else if((n=r.L).C&&(n.C=!1,r.C=!0,va(this,r),n=r.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,pa(this,n),n=r.L),n.C=r.C,r.C=n.L.C=!1,va(this,r),t=this._;break}n.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var da=fa;function ga(t,n,e,i){var r=[null,null],o=Oa.push(r)-1;return r.left=t,r.right=n,e&&ma(r,t,n,e),i&&ma(r,n,t,i),Ha[t.index].halfedges.push(o),Ha[n.index].halfedges.push(o),r}function xa(t,n,e){var i=[n,e];return i.left=t,i}function ma(t,n,e,i){t[0]||t[1]?t.left===e?t[1]=i:t[0]=i:(t[0]=i,t.left=n,t.right=e)}function wa(t,n,e,i,r){var o,s=t[0],u=t[1],a=s[0],h=s[1],c=0,l=1,f=u[0]-a,_=u[1]-h;if(o=n-a,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>c&&(c=o)}if(o=i-a,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<l&&(l=o)}if(o=e-h,_||!(o>0)){if(o/=_,_<0){if(o<c)return;o<l&&(l=o)}else if(_>0){if(o>l)return;o>c&&(c=o)}if(o=r-h,_||!(o<0)){if(o/=_,_<0){if(o>l)return;o>c&&(c=o)}else if(_>0){if(o<c)return;o<l&&(l=o)}return!(c>0||l<1)||(c>0&&(t[0]=[a+c*f,h+c*_]),l<1&&(t[1]=[a+l*f,h+l*_]),!0)}}}}}function Ma(t,n,e,i,r){var o=t[1];if(o)return!0;var s,u,a=t[0],h=t.left,c=t.right,l=h[0],f=h[1],_=c[0],p=c[1],v=(l+_)/2,y=(f+p)/2;if(p===f){if(v<n||v>=i)return;if(l>_){if(a){if(a[1]>=r)return}else a=[v,e];o=[v,r]}else{if(a){if(a[1]<e)return}else a=[v,r];o=[v,e]}}else if(u=y-(s=(l-_)/(p-f))*v,s<-1||s>1)if(l>_){if(a){if(a[1]>=r)return}else a=[(e-u)/s,e];o=[(r-u)/s,r]}else{if(a){if(a[1]<e)return}else a=[(r-u)/s,r];o=[(e-u)/s,e]}else if(f<p){if(a){if(a[0]>=i)return}else a=[n,s*n+u];o=[i,s*i+u]}else{if(a){if(a[0]<n)return}else a=[i,s*i+u];o=[n,s*n+u]}return t[0]=a,t[1]=o,!0}function ba(t,n){var e=t.site,i=n.left,r=n.right;return e===r&&(r=i,i=e),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(e===i?(i=n[1],r=n[0]):(i=n[0],r=n[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function Na(t,n){return n[+(n.left!==t.site)]}function Ta(t,n){return n[+(n.left===t.site)]}var Ca,ka=[];function Sa(){_a(this),this.x=this.y=this.arc=this.site=this.cy=null}function Aa(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,r=t.site,o=e.site;if(i!==o){var s=r[0],u=r[1],a=i[0]-s,h=i[1]-u,c=o[0]-s,l=o[1]-u,f=2*(a*l-h*c);if(!(f>=-$a)){var _=a*a+h*h,p=c*c+l*l,v=(l*_-h*p)/f,y=(a*p-c*_)/f,d=ka.pop()||new Sa;d.arc=t,d.site=r,d.x=v+s,d.y=(d.cy=y+u)+Math.sqrt(v*v+y*y),t.circle=d;for(var g=null,x=za._;x;)if(d.y<x.y||d.y===x.y&&d.x<=x.x){if(!x.L){g=x.P;break}x=x.L}else{if(!x.R){g=x;break}x=x.R}za.insert(g,d),g||(Ca=d)}}}}function Ea(t){var n=t.circle;n&&(n.P||(Ca=n.N),za.remove(n),ka.push(n),_a(n),t.circle=null)}var Ua=[];function Pa(){_a(this),this.edge=this.site=this.circle=null}function La(t){var n=Ua.pop()||new Pa;return n.site=t,n}function Da(t){Ea(t),ja.remove(t),Ua.push(t),_a(t)}function Ra(t){var n=t.circle,e=n.x,i=n.cy,r=[e,i],o=t.P,s=t.N,u=[t];Da(t);for(var a=o;a.circle&&Math.abs(e-a.circle.x)<Xa&&Math.abs(i-a.circle.cy)<Xa;)o=a.P,u.unshift(a),Da(a),a=o;u.unshift(a),Ea(a);for(var h=s;h.circle&&Math.abs(e-h.circle.x)<Xa&&Math.abs(i-h.circle.cy)<Xa;)s=h.N,u.push(h),Da(h),h=s;u.push(h),Ea(h);var c,l=u.length;for(c=1;c<l;++c)h=u[c],a=u[c-1],ma(h.edge,a.site,h.site,r);a=u[0],(h=u[l-1]).edge=ga(a.site,h.site,null,r),Aa(a),Aa(h)}function qa(t){for(var n,e,i,r,o=t[0],s=t[1],u=ja._;u;)if((i=Ya(u,s)-o)>Xa)u=u.L;else{if(!((r=o-Fa(u,s))>Xa)){i>-Xa?(n=u.P,e=u):r>-Xa?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){Ha[t.index]={site:t,halfedges:[]}}(t);var a=La(t);if(ja.insert(n,a),n||e){if(n===e)return Ea(n),e=La(n.site),ja.insert(a,e),a.edge=e.edge=ga(n.site,a.site),Aa(n),void Aa(e);if(e){Ea(n),Ea(e);var h=n.site,c=h[0],l=h[1],f=t[0]-c,_=t[1]-l,p=e.site,v=p[0]-c,y=p[1]-l,d=2*(f*y-_*v),g=f*f+_*_,x=v*v+y*y,m=[(y*g-_*x)/d+c,(f*x-v*g)/d+l];ma(e.edge,h,p,m),a.edge=ga(h,t,null,m),e.edge=ga(t,p,null,m),Aa(n),Aa(e)}else a.edge=ga(n.site,a.site)}}function Ya(t,n){var e=t.site,i=e[0],r=e[1],o=r-n;if(!o)return i;var s=t.P;if(!s)return-1/0;var u=(e=s.site)[0],a=e[1],h=a-n;if(!h)return u;var c=u-i,l=1/o-1/h,f=c/h;return l?(-f+Math.sqrt(f*f-2*l*(c*c/(-2*h)-a+h/2+r-o/2)))/l+i:(i+u)/2}function Fa(t,n){var e=t.N;if(e)return Ya(e,n);var i=t.site;return i[1]===n?i[0]:1/0}var ja,Ha,za,Oa,Xa=1e-6,$a=1e-12;function Ia(t,n){return n[1]-t[1]||n[0]-t[0]}function Ba(t,n){var e,i,r,o=t.sort(Ia).pop();for(Oa=[],Ha=new Array(t.length),ja=new da,za=new da;;)if(r=Ca,o&&(!r||o[1]<r.y||o[1]===r.y&&o[0]<r.x))o[0]===e&&o[1]===i||(qa(o),e=o[0],i=o[1]),o=t.pop();else{if(!r)break;Ra(r.arc)}if(function(){for(var t,n,e,i,r=0,o=Ha.length;r<o;++r)if((t=Ha[r])&&(i=(n=t.halfedges).length)){var s=new Array(i),u=new Array(i);for(e=0;e<i;++e)s[e]=e,u[e]=ba(t,Oa[n[e]]);for(s.sort((function(t,n){return u[n]-u[t]})),e=0;e<i;++e)u[e]=n[s[e]];for(e=0;e<i;++e)n[e]=u[e]}}(),n){var s=+n[0][0],u=+n[0][1],a=+n[1][0],h=+n[1][1];!function(t,n,e,i){for(var r,o=Oa.length;o--;)Ma(r=Oa[o],t,n,e,i)&&wa(r,t,n,e,i)&&(Math.abs(r[0][0]-r[1][0])>Xa||Math.abs(r[0][1]-r[1][1])>Xa)||delete Oa[o]}(s,u,a,h),function(t,n,e,i){var r,o,s,u,a,h,c,l,f,_,p,v,y=Ha.length,d=!0;for(r=0;r<y;++r)if(o=Ha[r]){for(s=o.site,u=(a=o.halfedges).length;u--;)Oa[a[u]]||a.splice(u,1);for(u=0,h=a.length;u<h;)p=(_=Ta(o,Oa[a[u]]))[0],v=_[1],l=(c=Na(o,Oa[a[++u%h]]))[0],f=c[1],(Math.abs(p-l)>Xa||Math.abs(v-f)>Xa)&&(a.splice(u,0,Oa.push(xa(s,_,Math.abs(p-t)<Xa&&i-v>Xa?[t,Math.abs(l-t)<Xa?f:i]:Math.abs(v-i)<Xa&&e-p>Xa?[Math.abs(f-i)<Xa?l:e,i]:Math.abs(p-e)<Xa&&v-n>Xa?[e,Math.abs(l-e)<Xa?f:n]:Math.abs(v-n)<Xa&&p-t>Xa?[Math.abs(f-n)<Xa?l:t,n]:null))-1),++h);h&&(d=!1)}if(d){var g,x,m,w=1/0;for(r=0,d=null;r<y;++r)(o=Ha[r])&&(m=(g=(s=o.site)[0]-t)*g+(x=s[1]-n)*x)<w&&(w=m,d=o);if(d){var M=[t,n],b=[t,i],N=[e,i],T=[e,n];d.halfedges.push(Oa.push(xa(s=d.site,M,b))-1,Oa.push(xa(s,b,N))-1,Oa.push(xa(s,N,T))-1,Oa.push(xa(s,T,M))-1)}}for(r=0;r<y;++r)(o=Ha[r])&&(o.halfedges.length||delete Ha[r])}(s,u,a,h)}this.edges=Oa,this.cells=Ha,ja=za=Oa=Ha=null}Ba.prototype={constructor:Ba,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Na(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,i){if(o=(r=e.halfedges).length)for(var r,o,s,u,a,h,c=e.site,l=-1,f=n[r[o-1]],_=f.left===c?f.right:f.left;++l<o;)s=_,_=(f=n[r[l]]).left===c?f.right:f.left,s&&_&&i<s.index&&i<_.index&&(a=s,h=_,((u=c)[0]-h[0])*(a[1]-u[1])-(u[0]-a[0])*(h[1]-u[1])<0)&&t.push([c.data,s.data,_.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var i,r,o=this,s=o._found||0,u=o.cells.length;!(r=o.cells[s]);)if(++s>=u)return null;var a=t-r.site[0],h=n-r.site[1],c=a*a+h*h;do{r=o.cells[i=s],s=null,r.halfedges.forEach((function(e){var i=o.edges[e],u=i.left;if(u!==r.site&&u||(u=i.right)){var a=t-u[0],h=n-u[1],l=a*a+h*h;l<c&&(c=l,s=u.index)}}))}while(null!==s);return o._found=i,null==e||c<=e*e?r.site:null}};function Za(t,n,e){this.k=t,this.x=n,this.y=e}Za.prototype={constructor:Za,scale:function(t){return 1===t?this:new Za(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Za(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Za(1,0,0);Za.prototype;var Va=function(t){this.adapter=t};new function(t,n){var e=this;this.adapter=n,Xi(t).then((function(t){e.data=t.slice(0),e.filteredData=e.data,n.update()}))}("boc.csv",{update:function(){}}),new Va({})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzL2Rpc3QvcGFja2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9sb2NhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oc2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaGNsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcXVhbnRpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9wb2x5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2JhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2VsYXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9jaG9yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9kZW5zaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy9jc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3htbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZHRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvc2ltdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hZGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jYXJ0ZXNpYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3JvdGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2ludEVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVqb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvbHlnb25Db250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvYW50aW1lcmlkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvbWVhc3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9yZXNhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1YWxBcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9tZXJjYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWlyZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9uYXR1cmFsRWFydGgxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vb3J0aG9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vc3RlcmVvZ3JhcGhpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL3RyYW5zdmVyc2VNZXJjYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3N1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvYW5jZXN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGVhdmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3JvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvZGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3Jlc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2h1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvdW5pZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9pcndpbkhhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2JhdGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2V4cG9uZW50aWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2RpYW1vbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3RyaWFuZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3d5ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc09wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxPcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21DbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhckNsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL21vbm90b25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbmF0dXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3N0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL1JlZEJsYWNrVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9CZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRGlhZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy96b29tLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L3ZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9tb2RlbC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImEiLCJiIiwiTmFOIiwiZiIsImNvbXBhcmUiLCJsZW5ndGgiLCJ4IiwiYXNjZW5kaW5nIiwibGVmdCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImFzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdG9yIiwiQXJyYXkiLCJzbGljZSIsIm1hcCIsIk1hdGgiLCJzcXJ0IiwibWVyZ2VkIiwiYXJyYXkiLCJhcnJheXMiLCJqIiwibm9vcCIsImRpc3BhdGNoIiwiYXJndW1lbnRzIiwiXyIsIkVycm9yIiwiRGlzcGF0Y2giLCJ0aGlzIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsImluZGV4T2YiLCJ0eXBlIiwic2V0IiwiY2FsbGJhY2siLCJjb25jYXQiLCJwdXNoIiwiY29uc3RydWN0b3IiLCJvbiIsInR5cGVuYW1lIiwiVCIsImNvcHkiLCJ0aGF0IiwiYXJncyIsImFwcGx5IiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwicHJlZml4IiwibmFtZXNwYWNlcyIsInNwYWNlIiwibG9jYWwiLCJjcmVhdG9ySW5oZXJpdCIsImRvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsInVwZGF0ZSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXR0ckZ1bmN0aW9uTlMiLCJkZWZhdWx0VmlldyIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwiam9pbiIsInNwbGljZSIsImNvbnRhaW5zIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJpbmRleCIsImNvbnRleHRMaXN0ZW5lciIsImV2ZW50IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwiX19vbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJzZWxlY3RvckFsbCIsImZpbHRlciIsIm1hdGNoIiwibWF0Y2hlciIsInNpemUiLCJlYWNoIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwicHJldmlvdXMiLCJpMCIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwiYXBwZW5kIiwib251cGRhdGUiLCJvbmV4aXQiLCJtZXJnZSIsIm9yZGVyIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJzZWxlY3Rpb24iLCJtMCIsIm0xIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwic29ydCIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsIm5vZGVzIiwiZW1wdHkiLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJjbGFzc2VkIiwidGV4dCIsImh0bWwiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiY2xvbmUiLCJkZWVwIiwibmV4dElkIiwiTG9jYWwiLCJ0b1N0cmluZyIsImlkIiwiRHJhZ0V2ZW50IiwidGFyZ2V0Iiwic3ViamVjdCIsImFjdGl2ZSIsInkiLCJkeCIsImR5IiwiaWRlbnRpZmllciIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJmb3JtYXQiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsImciLCJyZ2JDb252ZXJ0Iiwib3BhY2l0eSIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwiaXNOYU4iLCJtYXgiLCJyb3VuZCIsImgiLCJIc2wiLCJoc2xDb252ZXJ0IiwiaHNsIiwiaHNsMnJnYiIsIm0yIiwiYmFzaXMiLCJ0MSIsInYwIiwidjEiLCJ2MiIsInYzIiwidDIiLCJ0MyIsImRlZmluZSIsImNoYW5uZWxzIiwiYXNzaWduIiwiZGlzcGxheWFibGUiLCJmb3JtYXRIc2wiLCJicmlnaHRlciIsImsiLCJwb3ciLCJkYXJrZXIiLCJsaW5lYXIiLCJnYW1tYSIsIm5vZ2FtbWEiLCJleHBvbmVudGlhbCIsImNvbG9yIiwic3RhcnQiLCJlbmQiLCJyZ2JHYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInZhbHVlcyIsImZsb29yIiwicmVBIiwicmVCIiwic291cmNlIiwiY3NzTm9kZSIsImNzc1Jvb3QiLCJjc3NWaWV3Iiwic3ZnTm9kZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsImRlZ3JlZXMiLCJQSSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJlIiwiYXRhbjIiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsInNjYWxlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJ0cmFuc2Zvcm0iLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsIlNRUlQyIiwiaHVlIiwiZGVnMnJhZCIsInJhZDJkZWciLCJYbiIsIlluIiwiWm4iLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiaGNsMmxhYiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiaGNsIiwiY29zIiwic2luIiwiQyIsIkVEIiwiRUIiLCJCQ19EQSIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImN1YmVoZWxpeEdhbW1hIiwiY3ViZWhlbGl4IiwiY29zaCIsInNpbmgiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwidGltZW91dCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsIkRhdGUiLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwidDAiLCJJbmZpbml0eSIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIlR5cGVFcnJvciIsInN0b3AiLCJlbGFwc2VkIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJDUkVBVEVEIiwiU0NIRURVTEVEIiwiU1RBUlRJTkciLCJTVEFSVEVEIiwiUlVOTklORyIsIkVORElORyIsIkVOREVEIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJ0aWNrIiwiZHVyYXRpb24iLCJlYXNlIiwidGltaW5nIiwic2NoZWR1bGUiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwidHJhbnNpdGlvbiIsIl9pZCIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0clR3ZWVuTlMiLCJhdHRySW50ZXJwb2xhdGVOUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImF0dHJJbnRlcnBvbGF0ZSIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZVR3ZWVuIiwic3R5bGVJbnRlcnBvbGF0ZSIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImNoaWxkcmVuIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInVuZGVmaW5lZCIsInN0eWxlTWF5YmVSZW1vdmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsImN1c3RvbSIsInBvbHlJbiIsImV4cG9uZW50IiwicG9seU91dCIsInBvbHlJbk91dCIsImJhY2tJbiIsIm92ZXJzaG9vdCIsImJhY2tPdXQiLCJiYWNrSW5PdXQiLCJ0YXUiLCJkZWZhdWx0VGltaW5nIiwiYXNpbiIsImVsYXN0aWNJbiIsImFtcGxpdHVkZSIsInBlcmlvZCIsImVsYXN0aWNPdXQiLCJlbGFzdGljSW5PdXQiLCJudW1iZXIxIiwibnVtYmVyMiIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwiYWJzIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiY3ciLCJkYSIsInJlY3QiLCJ3IiwiTWFwIiwiaXNBcnJheSIsImhhcyIsImNsZWFyIiwia2V5cyIsImVudHJpZXMiLCJTZXQiLCJwcm90byIsIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiZm9yRWFjaCIsInJvdyIsImNvbHVtbiIsInBhZCIsIndpZHRoIiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJ5ZWFyIiwiaG91cnMiLCJnZXRVVENIb3VycyIsIm1pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwic2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsInJlRm9ybWF0IiwiZGVsaW1pdGVyIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsIk4iLCJJIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJyZXBsYWNlIiwicHJlZm9ybWF0Qm9keSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0Um93IiwidGVzdCIsImNvbnZlcnQiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImNzdiIsImRzdiIsImNzdlBhcnNlIiwidHN2IiwidHN2UGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImZldGNoIiwiaW5wdXQiLCJpbml0IiwidGhlbiIsImRzdlBhcnNlIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwidHJlZSIsInhtIiwieW0iLCJ4cCIsInlwIiwiYm90dG9tIiwiX3Jvb3QiLCJsZWFmIiwiX3giLCJfeSIsInF1YWR0cmVlIiwiUXVhZHRyZWUiLCJhZGRBbGwiLCJsZWFmX2NvcHkiLCJ0cmVlUHJvdG8iLCJjb3ZlciIsInh6IiwieXoiLCJ2aXNpdCIsImV4dGVudCIsImZpbmQiLCJ4MyIsInkzIiwicXVhZHMiLCJyYWRpdXMiLCJkMiIsInJldGFpbmVyIiwicmVtb3ZlQWxsIiwicm9vdCIsInZpc2l0QWZ0ZXIiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJmb3JtYXREZWNpbWFsIiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiemVybyIsImNvbW1hIiwicHJlY2lzaW9uIiwicHJlZml4RXhwb25lbnQiLCJvdXQiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJwcmVmaXhlcyIsImxvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmV2ZXJzZSIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwiU3RyaW5nIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFRyaW0iLCJwYWRkaW5nIiwiZm9ybWF0UHJlZml4IiwiQWRkZXIiLCJyZXNldCIsInRlbXAiLCJ2YWx1ZU9mIiwiYWRkZXIiLCJidiIsImF2IiwicXVhcnRlclBpIiwicmFkaWFucyIsImV4cCIsImNlaWwiLCJsb2ciLCJzcGhlcmljYWwiLCJsYW1iZGEiLCJwaGkiLCJjb3NQaGkiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UiLCJyb3RhdGlvbklkZW50aXR5IiwiaW52ZXJ0IiwibGluZSIsImxpbmVzIiwicG9pbnQiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwicmVqb2luIiwic2hpZnQiLCJyZXN1bHQiLCJJbnRlcnNlY3Rpb24iLCJwb2ludHMiLCJvdGhlciIsImVudHJ5IiwiY2xpcCIsInNlZ21lbnRzIiwic2VnbWVudCIsInAwIiwicDEiLCJwb2ludEVxdWFsIiwic3RyZWFtIiwiY29tcGFyZUludGVyc2VjdGlvbiIsInN0YXJ0SW5zaWRlIiwiY3VycmVudCIsImlzU3ViamVjdCIsImxvbmdpdHVkZSIsInNpblBoaSIsIm5vcm1hbCIsImFuZ2xlIiwid2luZGluZyIsInBvbHlnb24iLCJyaW5nIiwicG9pbnQwIiwibGFtYmRhMCIsInBoaTAiLCJzaW5QaGkwIiwiY29zUGhpMCIsImxhbWJkYTEiLCJzaW5QaGkxIiwiY29zUGhpMSIsInBvaW50MSIsInBoaTEiLCJkZWx0YSIsImFic0RlbHRhIiwiYW50aW1lcmlkaWFuIiwiaW50ZXJzZWN0aW9uIiwicGhpQXJjIiwic2luayIsImNsaXBMaW5lIiwicmluZ0J1ZmZlciIsInJpbmdTaW5rIiwicG9seWdvblN0YXJ0ZWQiLCJwb2x5Z29uU3RhcnQiLCJwb2ludFJpbmciLCJyaW5nU3RhcnQiLCJyaW5nRW5kIiwicG9seWdvbkVuZCIsInBvbHlnb25Db250YWlucyIsInNwaGVyZSIsInBvaW50VmlzaWJsZSIsInBvaW50TGluZSIsImNsZWFuIiwicmluZ1NlZ21lbnRzIiwidmFsaWRTZWdtZW50Iiwic2lnbjAiLCJzaWduMSIsInNpbkxhbWJkYTBMYW1iZGExIiwiY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsImZyb20iLCJ0byIsImRpcmVjdGlvbiIsIlBhdGhDb250ZXh0IiwiY29udGV4dCIsIl9jb250ZXh0IiwiX3JhZGl1cyIsInBvaW50UmFkaXVzIiwiX2xpbmUiLCJfcG9pbnQiLCJQYXRoU3RyaW5nIiwiX3N0cmluZyIsIl9jaXJjbGUiLCJ0cmFuc2Zvcm1lciIsIm1ldGhvZHMiLCJUcmFuc2Zvcm1TdHJlYW0iLCJhemltdXRoYWxSYXciLCJjeCIsImN5IiwiYXppbXV0aGFsSW52ZXJ0Iiwic2MiLCJjYyIsImF6aW11dGhhbEVxdWFsQXJlYVJhdyIsImN4Y3kiLCJhemltdXRoYWxFcXVpZGlzdGFudFJhdyIsIm1lcmNhdG9yUmF3IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiQTEiLCJBMiIsIkEzIiwiQTQiLCJNIiwiZXF1YWxFYXJ0aFJhdyIsImwyIiwibDYiLCJnbm9tb25pY1JhdyIsIm5hdHVyYWxFYXJ0aDFSYXciLCJwaGkyIiwicGhpNCIsIm9ydGhvZ3JhcGhpY1JhdyIsInN0ZXJlb2dyYXBoaWNSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJzdW0iLCJoaWVyYXJjaHkiLCJjaGlsZHMiLCJOb2RlIiwidmFsdWVkIiwiZGVmYXVsdENoaWxkcmVuIiwiZGVwdGgiLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiaGVpZ2h0IiwiY291bnQiLCJlYWNoQWZ0ZXIiLCJwYXRoIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwiZGVzY2VuZGFudHMiLCJsZWF2ZXMiLCJsaW5rcyIsIlRyZWVOb2RlIiwiQSIsInNxdWFyaWZ5UmF0aW8iLCJyYXRpbyIsIm5vZGVWYWx1ZSIsInN1bVZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsIm5ld1JhdGlvIiwibWluUmF0aW8iLCJhbHBoYSIsImJldGEiLCJkaWNlIiwic3F1YXJpZnkiLCJyZXNxdWFyaWZ5IiwiX3NxdWFyaWZ5IiwicmFuZG9tIiwicmFuZG9tVW5pZm9ybSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Ob3JtYWwiLCJtdSIsInNpZ21hIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTG9nTm9ybWFsIiwic291cmNlUmFuZG9tTG9nTm9ybWFsIiwicmFuZG9tSXJ3aW5IYWxsIiwic291cmNlUmFuZG9tSXJ3aW5IYWxsIiwicmFuZG9tQmF0ZXMiLCJpcndpbkhhbGwiLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUV4cG9uZW50aWFsIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJuZXdJbnRlcnZhbCIsImZsb29yaSIsIm9mZnNldGkiLCJmaWVsZCIsImludGVydmFsIiwiZDAiLCJkMSIsIm9mZnNldCIsInN0ZXAiLCJyYW5nZSIsInNldFRpbWUiLCJpc0Zpbml0ZSIsInNldE1vbnRoIiwic2V0SG91cnMiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwic2V0RGF0ZSIsImdldE1vbnRoIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJ3ZWVrZGF5IiwiZ2V0RGF0ZSIsImdldERheSIsImdldFRpbWV6b25lT2Zmc2V0Iiwic3VuZGF5IiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldEhvdXJzIiwidXRjV2Vla2RheSIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJzZXRVVENIb3VycyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjRGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwic2V0VVRDRnVsbFllYXIiLCJsb2NhbERhdGUiLCJIIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3RGF0ZSIsInBhZHMiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInUiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJVIiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsImNoYXJBdCIsIm5ld1BhcnNlIiwid2VlayIsIlgiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsImZvcm1hdExvY2FsZSIsInV0Y01vbnRoIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwiTGluZWFyIiwiYXJlYVN0YXJ0IiwiYXJlYUVuZCIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwiY3VydmUiLCJfY3VydmUiLCJyYWRpYWwiLCJrciIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJCYXNpc09wZW4iLCJCdW5kbGUiLCJfYmFzaXMiLCJfYmV0YSIsImJ1bmRsZSIsIl9rIiwiQ2FyZGluYWwiLCJ0ZW5zaW9uIiwiY2FyZGluYWwiLCJDYXJkaW5hbENsb3NlZCIsIl94NSIsIl95NSIsIkNhcmRpbmFsT3BlbiIsIl9sMDFfYSIsIl9sMDFfMmEiLCJfbDEyX2EiLCJfbDEyXzJhIiwiX2wyM19hIiwiX2wyM18yYSIsIkNhdG11bGxSb20iLCJfYWxwaGEiLCJ4MjMiLCJ5MjMiLCJjYXRtdWxsUm9tIiwiQ2F0bXVsbFJvbUNsb3NlZCIsIkNhdG11bGxSb21PcGVuIiwiTGluZWFyQ2xvc2VkIiwic2xvcGUzIiwiaDAiLCJoMSIsInMwIiwiczEiLCJzbG9wZTIiLCJNb25vdG9uZVgiLCJNb25vdG9uZVkiLCJSZWZsZWN0Q29udGV4dCIsIk5hdHVyYWwiLCJjb250cm9sUG9pbnRzIiwiX3QwIiwicHgiLCJweSIsIlN0ZXAiLCJfdCIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlIiLCJQIiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsIlJlZEJsYWNrRmlyc3QiLCJhZnRlciIsImdyYW5kcGEiLCJ1bmNsZSIsInNpYmxpbmciLCJjcmVhdGVFZGdlIiwiZWRnZSIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImF4IiwiYXkiLCJjb25uZWN0RWRnZSIsImZtIiwiZmIiLCJseCIsImx5IiwicngiLCJyeSIsImZ4IiwiZnkiLCJjZWxsSGFsZmVkZ2VBbmdsZSIsImNlbGwiLCJzaXRlIiwidmEiLCJ2YiIsImNlbGxIYWxmZWRnZVN0YXJ0IiwiY2VsbEhhbGZlZGdlRW5kIiwiZmlyc3RDaXJjbGUiLCJjaXJjbGVQb29sIiwiQ2lyY2xlIiwiYXR0YWNoQ2lyY2xlIiwibEFyYyIsInJBcmMiLCJsU2l0ZSIsImNTaXRlIiwiclNpdGUiLCJieCIsImJ5IiwiaGEiLCJoYyIsImNpcmNsZSIsImRldGFjaENpcmNsZSIsImJlYWNoUG9vbCIsIkJlYWNoIiwiY3JlYXRlQmVhY2giLCJiZWFjaCIsImRldGFjaEJlYWNoIiwiYmVhY2hlcyIsInJlbW92ZUJlYWNoIiwiZGlzYXBwZWFyaW5nIiwidW5zaGlmdCIsImlBcmMiLCJuQXJjcyIsImFkZEJlYWNoIiwiZHhsIiwiZHhyIiwiZGlyZWN0cml4IiwibGVmdEJyZWFrUG9pbnQiLCJyaWdodEJyZWFrUG9pbnQiLCJjcmVhdGVDZWxsIiwibmV3QXJjIiwiaGIiLCJyZm9jeCIsInJmb2N5IiwicGJ5MiIsImxmb2N4IiwibGZvY3kiLCJwbGJ5MiIsImhsIiwiYWJ5MiIsImxleGljb2dyYXBoaWMiLCJEaWFncmFtIiwic2l0ZXMiLCJzb3J0Q2VsbEhhbGZlZGdlcyIsImNsaXBFZGdlcyIsImlDZWxsIiwiaUhhbGZlZGdlIiwibkhhbGZlZGdlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwibkNlbGxzIiwiZGMiLCJ2MDAiLCJ2MDEiLCJ2MTEiLCJ2MTAiLCJjbGlwQ2VsbHMiLCJlZGdlcyIsInBvbHlnb25zIiwidHJpYW5nbGVzIiwiZTEiLCJfZm91bmQiLCJ2eCIsInZ5IiwiVHJhbnNmb3JtIiwiYXBwbHlYIiwiYXBwbHlZIiwibG9jYXRpb24iLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwiZG9tYWluIiwicmVzY2FsZVkiLCJhZGFwdGVyIiwiZmlsZW5hbWUiLCJyYXdEYXRhIiwiZmlsdGVyZWREYXRhIiwiVmlldyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElB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QixJQ2pEZixHQUVJLFNBQVk0M0MsR0FDUjExQyxLQUFLMDFDLFFBQVVBLEdDRlQsSUNLVixTQUFZQyxFQUFrQkQsR0FBOUIsV0FDSTExQyxLQUFLMDFDLFFBQVVBLEVBRWYsR0FBT0MsR0FBVWptQixNQUFLLFNBQUNrbUIsR0FDbkIsRUFBSy94QyxLQUFPK3hDLEVBQVExMkMsTUFBTSxHQUMxQixFQUFLMjJDLGFBQWUsRUFBS2h5QyxLQUV6QjZ4QyxFQUFRN3lDLFlEWk4sQ0FBVSxVQUFXLENBQy9CQSxPQUFRLGVBRUMsSUFBSWl6QyxHQUFLIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG4iLCJleHBvcnQgdmFyIG5hbWUgPSBcImQzXCI7XG5leHBvcnQgdmFyIHZlcnNpb24gPSBcIjUuMTIuMFwiO1xuZXhwb3J0IHZhciBkZXNjcmlwdGlvbiA9IFwiRGF0YS1Ecml2ZW4gRG9jdW1lbnRzXCI7XG5leHBvcnQgdmFyIGtleXdvcmRzID0gW1wiZG9tXCIsXCJ2aXN1YWxpemF0aW9uXCIsXCJzdmdcIixcImFuaW1hdGlvblwiLFwiY2FudmFzXCJdO1xuZXhwb3J0IHZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9kM2pzLm9yZ1wiO1xuZXhwb3J0IHZhciBsaWNlbnNlID0gXCJCU0QtMy1DbGF1c2VcIjtcbmV4cG9ydCB2YXIgYXV0aG9yID0ge1wibmFtZVwiOlwiTWlrZSBCb3N0b2NrXCIsXCJ1cmxcIjpcImh0dHBzOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9O1xuZXhwb3J0IHZhciBtYWluID0gXCJkaXN0L2QzLm5vZGUuanNcIjtcbmV4cG9ydCB2YXIgdW5wa2cgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIGpzZGVsaXZyID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBtb2R1bGUgPSBcImluZGV4LmpzXCI7XG5leHBvcnQgdmFyIHJlcG9zaXRvcnkgPSB7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLmdpdFwifTtcbmV4cG9ydCB2YXIgZmlsZXMgPSBbXCJkaXN0LyoqLyouanNcIixcImluZGV4LmpzXCJdO1xuZXhwb3J0IHZhciBzY3JpcHRzID0ge1wicHJldGVzdFwiOlwicmltcmFmIGRpc3QgJiYgbWtkaXIgZGlzdCAmJiBqc29uMm1vZHVsZSBwYWNrYWdlLmpzb24gPiBkaXN0L3BhY2thZ2UuanMgJiYgcm9sbHVwIC1jXCIsXCJ0ZXN0XCI6XCJ0YXBlICd0ZXN0LyoqLyotdGVzdC5qcydcIixcInByZXB1Ymxpc2hPbmx5XCI6XCJ5YXJuIHRlc3RcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInJpbXJhZlwiOlwiMlwiLFwicm9sbHVwXCI6XCIxXCIsXCJyb2xsdXAtcGx1Z2luLWFzY2lpXCI6XCIwLjBcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCIzXCIsXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiOlwiNVwiLFwidGFwZVwiOlwiNFwifTtcbmV4cG9ydCB2YXIgZGVwZW5kZW5jaWVzID0ge1wiZDMtYXJyYXlcIjpcIjFcIixcImQzLWF4aXNcIjpcIjFcIixcImQzLWJydXNoXCI6XCIxXCIsXCJkMy1jaG9yZFwiOlwiMVwiLFwiZDMtY29sbGVjdGlvblwiOlwiMVwiLFwiZDMtY29sb3JcIjpcIjFcIixcImQzLWNvbnRvdXJcIjpcIjFcIixcImQzLWRpc3BhdGNoXCI6XCIxXCIsXCJkMy1kcmFnXCI6XCIxXCIsXCJkMy1kc3ZcIjpcIjFcIixcImQzLWVhc2VcIjpcIjFcIixcImQzLWZldGNoXCI6XCIxXCIsXCJkMy1mb3JjZVwiOlwiMVwiLFwiZDMtZm9ybWF0XCI6XCIxXCIsXCJkMy1nZW9cIjpcIjFcIixcImQzLWhpZXJhcmNoeVwiOlwiMVwiLFwiZDMtaW50ZXJwb2xhdGVcIjpcIjFcIixcImQzLXBhdGhcIjpcIjFcIixcImQzLXBvbHlnb25cIjpcIjFcIixcImQzLXF1YWR0cmVlXCI6XCIxXCIsXCJkMy1yYW5kb21cIjpcIjFcIixcImQzLXNjYWxlXCI6XCIyXCIsXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjpcIjFcIixcImQzLXNlbGVjdGlvblwiOlwiMVwiLFwiZDMtc2hhcGVcIjpcIjFcIixcImQzLXRpbWVcIjpcIjFcIixcImQzLXRpbWUtZm9ybWF0XCI6XCIyXCIsXCJkMy10aW1lclwiOlwiMVwiLFwiZDMtdHJhbnNpdGlvblwiOlwiMVwiLFwiZDMtdm9yb25vaVwiOlwiMVwiLFwiZDMtem9vbVwiOlwiMVwifTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQge3BhaXJ9IGZyb20gXCIuL3BhaXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nKHZhbHVlcy5sZW5ndGgpIC8gTWF0aC5MTjIpICsgMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZShmYWxzZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJ2YXIgbmV4dElkID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWwoKSB7XG4gIHJldHVybiBuZXcgTG9jYWw7XG59XG5cbmZ1bmN0aW9uIExvY2FsKCkge1xuICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xufVxuXG5Mb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJhZ0V2ZW50KHRhcmdldCwgdHlwZSwgc3ViamVjdCwgaWQsIGFjdGl2ZSwgeCwgeSwgZHgsIGR5LCBkaXNwYXRjaCkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLmR4ID0gZHg7XG4gIHRoaXMuZHkgPSBkeTtcbiAgdGhpcy5fID0gZGlzcGF0Y2g7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2RyYWcsIHt5ZXNkcmFnfSBmcm9tIFwiLi9ub2RyYWcuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgRHJhZ0V2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBldmVudC54LCB5OiBldmVudC55fSA6IGQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgbm9kcmFnKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgbm9ldmVudCgpO1xuICAgIGlmICghbW91c2Vtb3ZpbmcpIHtcbiAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICB5ZXNkcmFnKGV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoKTtcbiAgICAgICAgZ2VzdHVyZShcImRyYWdcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgcywgZHgsIGR5LFxuICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSByZXR1cm47XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZF0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogZmlsdGVyO1xuICB9O1xuXG4gIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyBuZXcgUmdiKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gbmV3IFJnYigobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQge2hjbCBhcyBjb2xvckhjbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhjbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhjbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhjbChlbmQpKS5oKSxcbiAgICAgICAgYyA9IGNvbG9yKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaGNsKGh1ZSk7XG5leHBvcnQgdmFyIGhjbExvbmcgPSBoY2woY29sb3IpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGguanNcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeCBhcyBjb2xvckN1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChodWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4KHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9yQ3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9yQ3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjdWJlaGVsaXguZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgIHJldHVybiBjdWJlaGVsaXg7XG4gIH0pKDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjdWJlaGVsaXgoaHVlKTtcbmV4cG9ydCB2YXIgY3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeChjb2xvcik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnRlcnBvbGF0b3IsIG4pIHtcbiAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgcmV0dXJuIHNhbXBsZXM7XG59XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIHQsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0ID0gKGkwID0gaSkgJiYgc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmRcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmRcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJ2YXIgZXhwb25lbnQgPSAzO1xuXG5leHBvcnQgdmFyIHBvbHlJbiA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgZSk7XG4gIH1cblxuICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbjtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5T3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcbiAgfVxuXG4gIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlPdXQ7XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seUluT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KHQsIGUpIDogMiAtIE1hdGgucG93KDIgLSB0LCBlKSkgLyAyO1xuICB9XG5cbiAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW5PdXQ7XG59KShleHBvbmVudCk7XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIGhhbGZQaSA9IHBpIC8gMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbk91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluT3V0KHQpIHtcbiAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xufVxuIiwidmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbmV4cG9ydCB2YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfVxuXG4gIGJhY2tPdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrT3V0O1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuIiwidmFyIHRhdSA9IDIgKiBNYXRoLlBJLFxuICAgIGFtcGxpdHVkZSA9IDEsXG4gICAgcGVyaW9kID0gMC4zO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbiA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW4odCkge1xuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgMTAgKiAtLXQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY0luLmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luLnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luO1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY091dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgPSB0ICogMiAtIDEpIDwgMFxuICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXG4gICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICB9XG5cbiAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgdG91Y2gsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbmZ1bmN0aW9uIHRvdWNoZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRvdWNoKHRhcmdldCwgZXZlbnQudG91Y2hlcywgaWRlbnRpZmllcik7XG4gIH07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgYnJ1c2gubW92ZShncm91cCwgbnVsbCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fYnJ1c2guZW1pdHRlcikgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nICYmICFldmVudC50b3VjaGVzKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoa2V5cyAmJiBldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoa2V5cyAmJiBldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4ID0gMCxcbiAgICAgICAgZHkgPSAwLFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYga2V5cyAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludGVyID0gZXZlbnQudG91Y2hlcyA/IHRvdWNoZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcikgOiBtb3VzZSxcbiAgICAgICAgcG9pbnQwID0gcG9pbnRlcih0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IHBvaW50ZXIodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5tb3ZlZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IG51bWJlcjIoZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChudW1iZXIyKF8pKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bWF4LCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gY29tcGFyZVZhbHVlKGNvbXBhcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZShcbiAgICAgIGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUsXG4gICAgICBiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBwYWRBbmdsZSA9IDAsXG4gICAgICBzb3J0R3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRTdWJncm91cHMgPSBudWxsLFxuICAgICAgc29ydENob3JkcyA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XG4gICAgdmFyIG4gPSBtYXRyaXgubGVuZ3RoLFxuICAgICAgICBncm91cFN1bXMgPSBbXSxcbiAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxuICAgICAgICBzdWJncm91cEluZGV4ID0gW10sXG4gICAgICAgIGNob3JkcyA9IFtdLFxuICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBzdWJncm91cHMgPSBuZXcgQXJyYXkobiAqIG4pLFxuICAgICAgICBrLFxuICAgICAgICB4LFxuICAgICAgICB4MCxcbiAgICAgICAgZHgsXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzdW0uXG4gICAgayA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHggPSAwLCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHggKz0gbWF0cml4W2ldW2pdO1xuICAgICAgfVxuICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICBzdWJncm91cEluZGV4LnB1c2gocmFuZ2UobikpO1xuICAgICAgayArPSB4O1xuICAgIH1cblxuICAgIC8vIFNvcnQgZ3JvdXBz4oCmXG4gICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gc29ydEdyb3Vwcyhncm91cFN1bXNbYV0sIGdyb3VwU3Vtc1tiXSk7XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxuICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgIC8vIFRPRE8gQWxsb3cgc3RhcnQgYW5kIGVuZCBhbmdsZSB0byBiZSBzcGVjaWZpZWQ/XG4gICAgLy8gVE9ETyBBbGxvdyBwYWRkaW5nIHRvIGJlIHNwZWNpZmllZCBhcyBwZXJjZW50YWdlP1xuICAgIGsgPSBtYXgoMCwgdGF1IC0gcGFkQW5nbGUgKiBuKSAvIGs7XG4gICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUgLyBuO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBmb3IgZWFjaCBncm91cCBhbmQgc3ViZ3JvdXAuXG4gICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICB4ID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeDAgPSB4LCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBkaSA9IGdyb3VwSW5kZXhbaV0sXG4gICAgICAgICAgICBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLFxuICAgICAgICAgICAgdiA9IG1hdHJpeFtkaV1bZGpdLFxuICAgICAgICAgICAgYTAgPSB4LFxuICAgICAgICAgICAgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICBzdWJncm91cHNbZGogKiBuICsgZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBncm91cHNbZGldID0ge1xuICAgICAgICBpbmRleDogZGksXG4gICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgIH07XG4gICAgICB4ICs9IGR4O1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxuICAgIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGogPSBpIC0gMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxuICAgICAgICAgICAgdGFyZ2V0ID0gc3ViZ3JvdXBzW2kgKiBuICsgal07XG4gICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgID8ge3NvdXJjZTogdGFyZ2V0LCB0YXJnZXQ6IHNvdXJjZX1cbiAgICAgICAgICAgICAgOiB7c291cmNlOiBzb3VyY2UsIHRhcmdldDogdGFyZ2V0fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICB9XG5cbiAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXgsIHJhbmdlLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtibHVyWCwgYmx1cll9IGZyb20gXCIuL2JsdXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGNvbnRvdXJzIGZyb20gXCIuL2NvbnRvdXJzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXZWlnaHQoKSB7XG4gIHJldHVybiAxO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBkZWZhdWx0WCxcbiAgICAgIHkgPSBkZWZhdWx0WSxcbiAgICAgIHdlaWdodCA9IGRlZmF1bHRXZWlnaHQsXG4gICAgICBkeCA9IDk2MCxcbiAgICAgIGR5ID0gNTAwLFxuICAgICAgciA9IDIwLCAvLyBibHVyIHJhZGl1c1xuICAgICAgayA9IDIsIC8vIGxvZzIoZ3JpZCBjZWxsIHNpemUpXG4gICAgICBvID0gciAqIDMsIC8vIGdyaWQgb2Zmc2V0LCB0byBwYWQgZm9yIGJsdXJcbiAgICAgIG4gPSAoZHggKyBvICogMikgPj4gaywgLy8gZ3JpZCB3aWR0aFxuICAgICAgbSA9IChkeSArIG8gKiAyKSA+PiBrLCAvLyBncmlkIGhlaWdodFxuICAgICAgdGhyZXNob2xkID0gY29uc3RhbnQoMjApO1xuXG4gIGZ1bmN0aW9uIGRlbnNpdHkoZGF0YSkge1xuICAgIHZhciB2YWx1ZXMwID0gbmV3IEZsb2F0MzJBcnJheShuICogbSksXG4gICAgICAgIHZhbHVlczEgPSBuZXcgRmxvYXQzMkFycmF5KG4gKiBtKTtcblxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkLCBpLCBkYXRhKSB7XG4gICAgICB2YXIgeGkgPSAoK3goZCwgaSwgZGF0YSkgKyBvKSA+PiBrLFxuICAgICAgICAgIHlpID0gKCt5KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB3aSA9ICt3ZWlnaHQoZCwgaSwgZGF0YSk7XG4gICAgICBpZiAoeGkgPj0gMCAmJiB4aSA8IG4gJiYgeWkgPj0gMCAmJiB5aSA8IG0pIHtcbiAgICAgICAgdmFsdWVzMFt4aSArIHlpICogbl0gKz0gd2k7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPIE9wdGltaXplLlxuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuXG4gICAgdmFyIHR6ID0gdGhyZXNob2xkKHZhbHVlczApO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB2YXIgc3RvcCA9IG1heCh2YWx1ZXMwKTtcbiAgICAgIHR6ID0gdGlja1N0ZXAoMCwgc3RvcCwgdHopO1xuICAgICAgdHogPSByYW5nZSgwLCBNYXRoLmZsb29yKHN0b3AgLyB0eikgKiB0eiwgdHopO1xuICAgICAgdHouc2hpZnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udG91cnMoKVxuICAgICAgICAudGhyZXNob2xkcyh0eilcbiAgICAgICAgLnNpemUoW24sIG1dKVxuICAgICAgKHZhbHVlczApXG4gICAgICAgIC5tYXAodHJhbnNmb3JtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybShnZW9tZXRyeSkge1xuICAgIGdlb21ldHJ5LnZhbHVlICo9IE1hdGgucG93KDIsIC0yICogayk7IC8vIERlbnNpdHkgaW4gcG9pbnRzIHBlciBzcXVhcmUgcGl4ZWwuXG4gICAgZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2x5Z29uKTtcbiAgICByZXR1cm4gZ2VvbWV0cnk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2x5Z29uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1SaW5nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVJpbmcoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvaW50KTtcbiAgfVxuXG4gIC8vIFRPRE8gT3B0aW1pemUuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBjb29yZGluYXRlc1swXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgICBjb29yZGluYXRlc1sxXSA9IGNvb3JkaW5hdGVzWzFdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgIG8gPSByICogMztcbiAgICBuID0gKGR4ICsgbyAqIDIpID4+IGs7XG4gICAgbSA9IChkeSArIG8gKiAyKSA+PiBrO1xuICAgIHJldHVybiBkZW5zaXR5O1xuICB9XG5cbiAgZGVuc2l0eS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB4O1xuICB9O1xuXG4gIGRlbnNpdHkueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeTtcbiAgfTtcblxuICBkZW5zaXR5LndlaWdodCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3ZWlnaHQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB3ZWlnaHQ7XG4gIH07XG5cbiAgZGVuc2l0eS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguY2VpbChfWzBdKSwgXzEgPSBNYXRoLmNlaWwoX1sxXSk7XG4gICAgaWYgKCEoXzAgPj0gMCkgJiYgIShfMCA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzaXplXCIpO1xuICAgIHJldHVybiBkeCA9IF8wLCBkeSA9IF8xLCByZXNpemUoKTtcbiAgfTtcblxuICBkZW5zaXR5LmNlbGxTaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIDEgPDwgaztcbiAgICBpZiAoISgoXyA9ICtfKSA+PSAxKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjZWxsIHNpemVcIik7XG4gICAgcmV0dXJuIGsgPSBNYXRoLmZsb29yKE1hdGgubG9nKF8pIC8gTWF0aC5MTjIpLCByZXNpemUoKTtcbiAgfTtcblxuICBkZW5zaXR5LnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgZGVuc2l0eSkgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgZGVuc2l0eS5iYW5kd2lkdGggPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KHIgKiAociArIDEpKTtcbiAgICBpZiAoISgoXyA9ICtfKSA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBiYW5kd2lkdGhcIik7XG4gICAgcmV0dXJuIHIgPSBNYXRoLnJvdW5kKChNYXRoLnNxcnQoNCAqIF8gKiBfICsgMSkgLSAxKSAvIDIpLCByZXNpemUoKTtcbiAgfTtcblxuICByZXR1cm4gZGVuc2l0eTtcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBwYWQodmFsdWUsIHdpZHRoKSB7XG4gIHZhciBzID0gdmFsdWUgKyBcIlwiLCBsZW5ndGggPSBzLmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbigwKSArIHMgOiBzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgPCAwID8gXCItXCIgKyBwYWQoLXllYXIsIDYpXG4gICAgOiB5ZWFyID4gOTk5OSA/IFwiK1wiICsgcGFkKHllYXIsIDYpXG4gICAgOiBwYWQoeWVhciwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBcIkludmFsaWQgRGF0ZVwiXG4gICAgICA6IGZvcm1hdFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCksIDIpXG4gICAgICArIChtaWxsaXNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCIuXCIgKyBwYWQobWlsbGlzZWNvbmRzLCAzKSArIFwiWlwiXG4gICAgICA6IHNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCJaXCJcbiAgICAgIDogbWludXRlcyB8fCBob3VycyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCJaXCJcbiAgICAgIDogXCJcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IGZvcm1hdERhdGUodmFsdWUpXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh2YWx1ZSArPSBcIlwiKSA/IFwiXFxcIlwiICsgdmFsdWUucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRCb2R5OiBmb3JtYXRCb2R5LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdEJvZHkgPSB0c3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBwYXJzZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQpICB7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIChuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgdHlwZSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlcihcImFwcGxpY2F0aW9uL3htbFwiKTtcblxuZXhwb3J0IHZhciBodG1sID0gcGFyc2VyKFwidGV4dC9odG1sXCIpO1xuXG5leHBvcnQgdmFyIHN2ZyA9IHBhcnNlcihcImltYWdlL3N2Zyt4bWxcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHZhciB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xufVxuXG5mdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgeDAgPSB0cmVlLl94MCxcbiAgICAgIHkwID0gdHJlZS5feTAsXG4gICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgeTEgPSB0cmVlLl95MSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICB4cCxcbiAgICAgIHlwLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKHBhcmVudCA9IG5vZGUsICEobm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgeHAgPSArdHJlZS5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBzcGxpdCB0aGUgbGVhZiBub2RlIHVudGlsIHRoZSBvbGQgYW5kIG5ldyBwb2ludCBhcmUgc2VwYXJhdGVkLlxuICBkbyB7XG4gICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gIHJldHVybiBwYXJlbnRbal0gPSBub2RlLCBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgeHpbaV0gPSB4O1xuICAgIHl6W2ldID0geTtcbiAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBhYm9ydC5cbiAgaWYgKHgwID4geDEgfHwgeTAgPiB5MSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRXhwYW5kIHRoZSB0cmVlIHRvIGNvdmVyIHRoZSBuZXcgcG9pbnRzLlxuICB0aGlzLmNvdmVyKHgwLCB5MCkuY292ZXIoeDEsIHkxKTtcblxuICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBhZGQodGhpcywgeHpbaV0sIHl6W2ldLCBkYXRhW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTE7XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAvLyB0aGUgZXhpc3RpbmcgcXVhZHJhbnQgYm91bmRhcmllcyBkb27igJl0IGNoYW5nZSBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgZXJyb3IhXG4gIGlmIChpc05hTih4MCkpIHtcbiAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICB5MSA9ICh5MCA9IE1hdGguZmxvb3IoeSkpICsgMTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gIGVsc2Uge1xuICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlICh4MCA+IHggfHwgeCA+PSB4MSB8fCB5MCA+IHkgfHwgeSA+PSB5MSkge1xuICAgICAgaSA9ICh5IDwgeTApIDw8IDEgfCAoeCA8IHgwKTtcbiAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudCwgeiAqPSAyO1xuICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgIGNhc2UgMDogeDEgPSB4MCArIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB4MCA9IHgxIC0geiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHgxID0geDAgKyB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogeDAgPSB4MSAtIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwiaW1wb3J0IHRyZWVfYWRkLCB7YWRkQWxsIGFzIHRyZWVfYWRkQWxsfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB0cmVlX2NvdmVyIGZyb20gXCIuL2NvdmVyXCI7XG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCB0cmVlX2V4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCB0cmVlX2ZpbmQgZnJvbSBcIi4vZmluZFwiO1xuaW1wb3J0IHRyZWVfcmVtb3ZlLCB7cmVtb3ZlQWxsIGFzIHRyZWVfcmVtb3ZlQWxsfSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCB0cmVlX3Jvb3QgZnJvbSBcIi4vcm9vdFwiO1xuaW1wb3J0IHRyZWVfc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgdHJlZV92aXNpdCBmcm9tIFwiLi92aXNpdFwiO1xuaW1wb3J0IHRyZWVfdmlzaXRBZnRlciBmcm9tIFwiLi92aXNpdEFmdGVyXCI7XG5pbXBvcnQgdHJlZV94LCB7ZGVmYXVsdFh9IGZyb20gXCIuL3hcIjtcbmltcG9ydCB0cmVlX3ksIHtkZWZhdWx0WX0gZnJvbSBcIi4veVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xufVxuXG5mdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLl94ID0geDtcbiAgdGhpcy5feSA9IHk7XG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICByZXR1cm4gY29weTtcbn1cblxudmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxudHJlZVByb3RvLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBub2RlcyxcbiAgICAgIGNoaWxkO1xuXG4gIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICBlbHNlIG5vZGUudGFyZ2V0W2ldID0gbGVhZl9jb3B5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbnRyZWVQcm90by5hZGQgPSB0cmVlX2FkZDtcbnRyZWVQcm90by5hZGRBbGwgPSB0cmVlX2FkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHRyZWVfcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICByZXRhaW5lcixcbiAgICAgIHByZXZpb3VzLFxuICAgICAgbmV4dCxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKCEocGFyZW50ID0gbm9kZSwgbm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcblxuICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pXG4gICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBxLCBub2RlID0gdGhpcy5fcm9vdCwgY2hpbGQsIHgwLCB5MCwgeDEsIHkxO1xuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgaWYgKCFjYWxsYmFjayhub2RlID0gcS5ub2RlLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEpICYmIG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3JjZShhbHBoYSk7XG4gICAgICB9KTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS54ID0gbm9kZS5meCwgbm9kZS52eCA9IDA7XG4gICAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXVsYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICBpZiAobm9kZS5meCAhPSBudWxsKSBub2RlLnggPSBub2RlLmZ4O1xuICAgICAgaWYgKG5vZGUuZnkgIT0gbnVsbCkgbm9kZS55ID0gbm9kZS5meTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcblxuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCIvLyBBZGRzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgd2l0aCB0d2ljZSB0aGUgbm9ybWFsIHByZWNpc2lvbi5cbi8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuLy8gMzA14oCTMzYzICgxOTk3KS5cbi8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4vLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFkZGVyO1xufVxuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XG4gIH0sXG4gIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnM7XG4gIH1cbn07XG5cbnZhciB0ZW1wID0gbmV3IEFkZGVyO1xuXG5mdW5jdGlvbiBhZGQoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXRhbjIsIGNvcywgcXVhcnRlclBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxuZXhwb3J0IHZhciBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBsYW1iZGEwMCxcbiAgICBwaGkwMCxcbiAgICBsYW1iZGEwLFxuICAgIGNvc1BoaTAsXG4gICAgc2luUGhpMDtcblxuZXhwb3J0IHZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYVJpbmcgPSArYXJlYVJpbmdTdW07XG4gICAgYXJlYVN1bS5hZGQoYXJlYVJpbmcgPCAwID8gdGF1ICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmxpbmVFbmQgPSB0aGlzLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3VtLmFkZCh0YXUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MocGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaSksIHNpblBoaTAgPSBzaW4ocGhpKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAvLyBTcGhlcmljYWwgZXhjZXNzIEUgZm9yIGEgc3BoZXJpY2FsIHRyaWFuZ2xlIHdpdGggdmVydGljZXM6IHNvdXRoIHBvbGUsXG4gIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgdmFyIGRMYW1iZGEgPSBsYW1iZGEgLSBsYW1iZGEwLFxuICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBrID0gc2luUGhpMCAqIHNpblBoaSxcbiAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyhhZExhbWJkYSksXG4gICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luKGFkTGFtYmRhKTtcbiAgYXJlYVJpbmdTdW0uYWRkKGF0YW4yKHYsIHUpKTtcblxuICAvLyBBZHZhbmNlIHRoZSBwcmV2aW91cyBwb2ludHMuXG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBhcmVhU3VtLnJlc2V0KCk7XG4gIHN0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICByZXR1cm4gYXJlYVN1bSAqIDI7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuICByZXR1cm4gW2F0YW4yKGNhcnRlc2lhblsxXSwgY2FydGVzaWFuWzBdKSwgYXNpbihjYXJ0ZXNpYW5bMl0pXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MocGhpKTtcbiAgcmV0dXJuIFtjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbi8vIFRPRE8gcmV0dXJuIGFcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICByZXR1cm4gW3ZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGtdO1xufVxuXG4vLyBUT0RPIHJldHVybiBkXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2FyZWFTdHJlYW0sIGFyZWFSaW5nU3VtfSBmcm9tIFwiLi9hcmVhXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFuc30gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxudmFyIGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEsIC8vIGJvdW5kc1xuICAgIGxhbWJkYTIsIC8vIHByZXZpb3VzIGxhbWJkYS1jb29yZGluYXRlXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHAwLCAvLyBwcmV2aW91cyAzRCBwb2ludFxuICAgIGRlbHRhU3VtID0gYWRkZXIoKSxcbiAgICByYW5nZXMsXG4gICAgcmFuZ2U7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBib3VuZHNMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGJvdW5kc0xpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUmluZ1BvaW50O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lU3RhcnQgPSBib3VuZHNSaW5nU3RhcnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNSaW5nRW5kO1xuICAgIGRlbHRhU3VtLnJlc2V0KCk7XG4gICAgYXJlYVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc0xpbmVTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc0xpbmVFbmQ7XG4gICAgaWYgKGFyZWFSaW5nU3VtIDwgMCkgbGFtYmRhMCA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPiBlcHNpbG9uKSBwaGkxID0gOTA7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPCAtZXBzaWxvbikgcGhpMCA9IC05MDtcbiAgICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG59XG5cbmZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICB2YXIgcCA9IGNhcnRlc2lhbihbbGFtYmRhICogcmFkaWFucywgcGhpICogcmFkaWFuc10pO1xuICBpZiAocDApIHtcbiAgICB2YXIgbm9ybWFsID0gY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICBlcXVhdG9yaWFsID0gW25vcm1hbFsxXSwgLW5vcm1hbFswXSwgMF0sXG4gICAgICAgIGluZmxlY3Rpb24gPSBjYXJ0ZXNpYW5Dcm9zcyhlcXVhdG9yaWFsLCBub3JtYWwpO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW5mbGVjdGlvbik7XG4gICAgaW5mbGVjdGlvbiA9IHNwaGVyaWNhbChpbmZsZWN0aW9uKTtcbiAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyLFxuICAgICAgICBzaWduID0gZGVsdGEgPiAwID8gMSA6IC0xLFxuICAgICAgICBsYW1iZGFpID0gaW5mbGVjdGlvblswXSAqIGRlZ3JlZXMgKiBzaWduLFxuICAgICAgICBwaGlpLFxuICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnMoZGVsdGEpID4gMTgwO1xuICAgIGlmIChhbnRpbWVyaWRpYW4gXiAoc2lnbiAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduICogbGFtYmRhKSkge1xuICAgICAgcGhpaSA9IGluZmxlY3Rpb25bMV0gKiBkZWdyZWVzO1xuICAgICAgaWYgKHBoaWkgPiBwaGkxKSBwaGkxID0gcGhpaTtcbiAgICB9IGVsc2UgaWYgKGxhbWJkYWkgPSAobGFtYmRhaSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gLWluZmxlY3Rpb25bMV0gKiBkZWdyZWVzO1xuICAgICAgaWYgKHBoaWkgPCBwaGkwKSBwaGkwID0gcGhpaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgICB9XG4gICAgaWYgKGFudGltZXJpZGlhbikge1xuICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTIpIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsYW1iZGExID49IGxhbWJkYTApIHtcbiAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTApIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGExKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTIpIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICB9XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lU3RhcnQoKSB7XG4gIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbn1cblxuZnVuY3Rpb24gYm91bmRzTGluZUVuZCgpIHtcbiAgcmFuZ2VbMF0gPSBsYW1iZGEwLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICBwMCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICBpZiAocDApIHtcbiAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyO1xuICAgIGRlbHRhU3VtLmFkZChhYnMoZGVsdGEpID4gMTgwID8gZGVsdGEgKyAoZGVsdGEgPiAwID8gMzYwIDogLTM2MCkgOiBkZWx0YSk7XG4gIH0gZWxzZSB7XG4gICAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICB9XG4gIGFyZWFTdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICBsaW5lUG9pbnQobGFtYmRhLCBwaGkpO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdFbmQoKSB7XG4gIGJvdW5kc1JpbmdQb2ludChsYW1iZGEwMCwgcGhpMDApO1xuICBhcmVhU3RyZWFtLmxpbmVFbmQoKTtcbiAgaWYgKGFicyhkZWx0YVN1bSkgPiBlcHNpbG9uKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKTtcbiAgcmFuZ2VbMF0gPSBsYW1iZGEwLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIHAwID0gbnVsbDtcbn1cblxuLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cbi8vIFRoaXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIChsYW1iZGExIC0gbGFtYmRhMCArIDM2MMKwKSAlIDM2MMKwLCBleGNlcHQgdGhhdCB3ZSB3YW50XG4vLyB0aGUgZGlzdGFuY2UgYmV0d2VlbiDCsTE4MMKwIHRvIGJlIDM2MMKwLlxuZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xuICByZXR1cm4gKGxhbWJkYTEgLT0gbGFtYmRhMCkgPCAwID8gbGFtYmRhMSArIDM2MCA6IGxhbWJkYTE7XG59XG5cbmZ1bmN0aW9uIHJhbmdlQ29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgeCkge1xuICByZXR1cm4gcmFuZ2VbMF0gPD0gcmFuZ2VbMV0gPyByYW5nZVswXSA8PSB4ICYmIHggPD0gcmFuZ2VbMV0gOiB4IDwgcmFuZ2VbMF0gfHwgcmFuZ2VbMV0gPCB4O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHZhciBpLCBuLCBhLCBiLCBtZXJnZWQsIGRlbHRhTWF4LCBkZWx0YTtcblxuICBwaGkxID0gbGFtYmRhMSA9IC0obGFtYmRhMCA9IHBoaTAgPSBJbmZpbml0eSk7XG4gIHJhbmdlcyA9IFtdO1xuICBzdHJlYW0oZmVhdHVyZSwgYm91bmRzU3RyZWFtKTtcblxuICAvLyBGaXJzdCwgc29ydCByYW5nZXMgYnkgdGhlaXIgbWluaW11bSBsb25naXR1ZGVzLlxuICBpZiAobiA9IHJhbmdlcy5sZW5ndGgpIHtcbiAgICByYW5nZXMuc29ydChyYW5nZUNvbXBhcmUpO1xuXG4gICAgLy8gVGhlbiwgbWVyZ2UgYW55IHJhbmdlcyB0aGF0IG92ZXJsYXAuXG4gICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XG4gICAgICBiID0gcmFuZ2VzW2ldO1xuICAgICAgaWYgKHJhbmdlQ29udGFpbnMoYSwgYlswXSkgfHwgcmFuZ2VDb250YWlucyhhLCBiWzFdKSkge1xuICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBmaW5kIHRoZSBsYXJnZXN0IGdhcCBiZXR3ZWVuIHRoZSBtZXJnZWQgcmFuZ2VzLlxuICAgIC8vIFRoZSBmaW5hbCBib3VuZGluZyBib3ggd2lsbCBiZSB0aGUgaW52ZXJzZSBvZiB0aGlzIGdhcC5cbiAgICBmb3IgKGRlbHRhTWF4ID0gLUluZmluaXR5LCBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICBpZiAoKGRlbHRhID0gYW5nbGUoYVsxXSwgYlswXSkpID4gZGVsdGFNYXgpIGRlbHRhTWF4ID0gZGVsdGEsIGxhbWJkYTAgPSBiWzBdLCBsYW1iZGExID0gYVsxXTtcbiAgICB9XG4gIH1cblxuICByYW5nZXMgPSByYW5nZSA9IG51bGw7XG5cbiAgcmV0dXJuIGxhbWJkYTAgPT09IEluZmluaXR5IHx8IHBoaTAgPT09IEluZmluaXR5XG4gICAgICA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXVxuICAgICAgOiBbW2xhbWJkYTAsIHBoaTBdLCBbbGFtYmRhMSwgcGhpMV1dO1xufVxuIiwiaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4vY29tcG9zZVwiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIHBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG5mdW5jdGlvbiByb3RhdGlvbklkZW50aXR5KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbYWJzKGxhbWJkYSkgPiBwaSA/IGxhbWJkYSArIE1hdGgucm91bmQoLWxhbWJkYSAvIHRhdSkgKiB0YXUgOiBsYW1iZGEsIHBoaV07XG59XG5cbnJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1KSA/IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gY29tcG9zZShyb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSksIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpKVxuICAgIDogcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpKVxuICAgIDogKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKVxuICAgIDogcm90YXRpb25JZGVudGl0eSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICByZXR1cm4gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gbGFtYmRhICs9IGRlbHRhTGFtYmRhLCBbbGFtYmRhID4gcGkgPyBsYW1iZGEgLSB0YXUgOiBsYW1iZGEgPCAtcGkgPyBsYW1iZGEgKyB0YXUgOiBsYW1iZGEsIHBoaV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gIHJvdGF0aW9uLmludmVydCA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYSgtZGVsdGFMYW1iZGEpO1xuICByZXR1cm4gcm90YXRpb247XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgdmFyIGNvc0RlbHRhUGhpID0gY29zKGRlbHRhUGhpKSxcbiAgICAgIHNpbkRlbHRhUGhpID0gc2luKGRlbHRhUGhpKSxcbiAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MoZGVsdGFHYW1tYSksXG4gICAgICBzaW5EZWx0YUdhbW1hID0gc2luKGRlbHRhR2FtbWEpO1xuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhUGhpICsgeCAqIHNpbkRlbHRhUGhpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSAtIGsgKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgLSB6ICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFHYW1tYSArIHkgKiBzaW5EZWx0YUdhbW1hKVxuICAgIF07XG4gIH1cblxuICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hICsgeiAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSArIGsgKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YVBoaSAtIHggKiBzaW5EZWx0YVBoaSlcbiAgICBdO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocm90YXRlKSB7XG4gIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHthY29zLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuL3JvdGF0aW9uXCI7XG5cbi8vIEdlbmVyYXRlcyBhIGNpcmNsZSBjZW50ZXJlZCBhdCBbMMKwLCAwwrBdLCB3aXRoIGEgZ2l2ZW4gcmFkaXVzIGFuZCBwcmVjaXNpb24uXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgaWYgKCFkZWx0YSkgcmV0dXJuO1xuICB2YXIgY29zUmFkaXVzID0gY29zKHJhZGl1cyksXG4gICAgICBzaW5SYWRpdXMgPSBzaW4ocmFkaXVzKSxcbiAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgaWYgKHQwID09IG51bGwpIHtcbiAgICB0MCA9IHJhZGl1cyArIGRpcmVjdGlvbiAqIHRhdTtcbiAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xuICB9IGVsc2Uge1xuICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xuICAgIGlmIChkaXJlY3Rpb24gPiAwID8gdDAgPCB0MSA6IHQwID4gdDEpIHQwICs9IGRpcmVjdGlvbiAqIHRhdTtcbiAgfVxuICBmb3IgKHZhciBwb2ludCwgdCA9IHQwOyBkaXJlY3Rpb24gPiAwID8gdCA+IHQxIDogdCA8IHQxOyB0IC09IHN0ZXApIHtcbiAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zKHQpLCAtc2luUmFkaXVzICogc2luKHQpXSk7XG4gICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gIH1cbn1cblxuLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuZnVuY3Rpb24gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgcG9pbnQpIHtcbiAgcG9pbnQgPSBjYXJ0ZXNpYW4ocG9pbnQpLCBwb2ludFswXSAtPSBjb3NSYWRpdXM7XG4gIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICB2YXIgcmFkaXVzID0gYWNvcygtcG9pbnRbMV0pO1xuICByZXR1cm4gKCgtcG9pbnRbMl0gPCAwID8gLXJhZGl1cyA6IHJhZGl1cykgKyB0YXUgLSBlcHNpbG9uKSAlIHRhdTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjZW50ZXIgPSBjb25zdGFudChbMCwgMF0pLFxuICAgICAgcmFkaXVzID0gY29uc3RhbnQoOTApLFxuICAgICAgcHJlY2lzaW9uID0gY29uc3RhbnQoNiksXG4gICAgICByaW5nLFxuICAgICAgcm90YXRlLFxuICAgICAgc3RyZWFtID0ge3BvaW50OiBwb2ludH07XG5cbiAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcbiAgICB4WzBdICo9IGRlZ3JlZXMsIHhbMV0gKj0gZGVncmVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICBwID0gcHJlY2lzaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zO1xuICAgIHJpbmcgPSBbXTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgciwgcCwgMSk7XG4gICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgcmluZyA9IHJvdGF0ZSA9IG51bGw7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoWytfWzBdLCArX1sxXV0pLCBjaXJjbGUpIDogY2VudGVyO1xuICB9O1xuXG4gIGNpcmNsZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjaXNpb24gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHByZWNpc2lvbjtcbiAgfTtcblxuICByZXR1cm4gY2lyY2xlO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsaW5lcyA9IFtdLFxuICAgICAgbGluZTtcbiAgcmV0dXJuIHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgbGluZS5wdXNoKFt4LCB5XSk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgIH0sXG4gICAgbGluZUVuZDogbm9vcCxcbiAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgbGluZSA9IG51bGw7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCBlcHNpbG9uICYmIGFicyhhWzFdIC0gYlsxXSkgPCBlcHNpbG9uO1xufVxuIiwiaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWxcIjtcblxuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICB0aGlzLnggPSBwb2ludDtcbiAgdGhpcy56ID0gcG9pbnRzO1xuICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbn1cblxuLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4vLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4vLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIG9mIGEgc2VnbWVudCBhcmUgY29pbmNpZGVudCwgdGhlbiB0cmVhdCBhcyBhXG4gICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmsoc3ViamVjdCk7XG4gIGxpbmsoY2xpcCk7XG5cbiAgZm9yIChpID0gMCwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY2xpcFtpXS5lID0gc3RhcnRJbnNpZGUgPSAhc3RhcnRJbnNpZGU7XG4gIH1cblxuICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgcG9pbnRzLFxuICAgICAgcG9pbnQ7XG5cbiAgd2hpbGUgKDEpIHtcbiAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXG4gICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xuICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgZG8ge1xuICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgaWYgKGN1cnJlbnQuZSkge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50Lm4ueCwgMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgIGZvciAoaSA9IHBvaW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XG4gICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rKGFycmF5KSB7XG4gIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBhID0gYXJyYXlbMF0sXG4gICAgICBiO1xuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEubiA9IGIgPSBhcnJheVtpXTtcbiAgICBiLnAgPSBhO1xuICAgIGEgPSBiO1xuICB9XG4gIGEubiA9IGIgPSBhcnJheVswXTtcbiAgYi5wID0gYTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpZ24sIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5mdW5jdGlvbiBsb25naXR1ZGUocG9pbnQpIHtcbiAgaWYgKGFicyhwb2ludFswXSkgPD0gcGkpXG4gICAgcmV0dXJuIHBvaW50WzBdO1xuICBlbHNlXG4gICAgcmV0dXJuIHNpZ24ocG9pbnRbMF0pICogKChhYnMocG9pbnRbMF0pICsgcGkpICUgdGF1IC0gcGkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gbG9uZ2l0dWRlKHBvaW50KSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0ucmVzZXQoKTtcblxuICBpZiAoc2luUGhpID09PSAxKSBwaGkgPSBoYWxmUGkgKyBlcHNpbG9uO1xuICBlbHNlIGlmIChzaW5QaGkgPT09IC0xKSBwaGkgPSAtaGFsZlBpIC0gZXBzaWxvbjtcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEobSA9IChyaW5nID0gcG9seWdvbltpXSkubGVuZ3RoKSkgY29udGludWU7XG4gICAgdmFyIHJpbmcsXG4gICAgICAgIG0sXG4gICAgICAgIHBvaW50MCA9IHJpbmdbbSAtIDFdLFxuICAgICAgICBsYW1iZGEwID0gbG9uZ2l0dWRlKHBvaW50MCksXG4gICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICBzaW5QaGkwID0gc2luKHBoaTApLFxuICAgICAgICBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2osIGxhbWJkYTAgPSBsYW1iZGExLCBzaW5QaGkwID0gc2luUGhpMSwgY29zUGhpMCA9IGNvc1BoaTEsIHBvaW50MCA9IHBvaW50MSkge1xuICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgbGFtYmRhMSA9IGxvbmdpdHVkZShwb2ludDEpLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luXCI7XG5pbXBvcnQge2Vwc2lsb24sIGhhbGZQaX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBwb2x5Z29uQ29udGFpbnMgZnJvbSBcIi4uL3BvbHlnb25Db250YWluc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGJbMV0pO1xufVxuIiwiaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7YWJzLCBhdGFuLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgcGksIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xpcChcbiAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICBbLXBpLCAtaGFsZlBpXVxuKTtcblxuLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgcGhpMCA9IE5hTixcbiAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICByZXR1cm4ge1xuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBjbGVhbiA9IDE7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSA6IC1waSxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbikgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpIDogLWhhbGZQaSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24pIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uOyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24pIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uXG4gICAgICA/IGF0YW4oKHNpbihwaGkwKSAqIChjb3NQaGkxID0gY29zKHBoaTEpKSAqIHNpbihsYW1iZGExKVxuICAgICAgICAgIC0gc2luKHBoaTEpICogKGNvc1BoaTAgPSBjb3MocGhpMCkpICogc2luKGxhbWJkYTApKVxuICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICB2YXIgcGhpO1xuICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24pIHtcbiAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkgOiAtcGk7XG4gICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICB9XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAsXG4gICAgc2luUGhpMCxcbiAgICBjb3NQaGkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wXG59O1xuXG5mdW5jdGlvbiBsZW5ndGhMaW5lU3RhcnQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpbihwaGkpLCBjb3NQaGkwID0gY29zKHBoaSk7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgZGVsdGEgPSBhYnMobGFtYmRhIC0gbGFtYmRhMCksXG4gICAgICBjb3NEZWx0YSA9IGNvcyhkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbihkZWx0YSksXG4gICAgICB4ID0gY29zUGhpICogc2luRGVsdGEsXG4gICAgICB5ID0gY29zUGhpMCAqIHNpblBoaSAtIHNpblBoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwICogc2luUGhpICsgY29zUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhO1xuICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQoeCAqIHggKyB5ICogeSksIHopKTtcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpblBoaSwgY29zUGhpMCA9IGNvc1BoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGxlbmd0aFN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xuICByZXR1cm4gK2xlbmd0aFN1bTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGFyZWFSaW5nU3VtID0gYWRkZXIoKSxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVN0cmVhbS5wb2ludCA9IG5vb3A7XG4gICAgYXJlYVN1bS5hZGQoYWJzKGFyZWFSaW5nU3VtKSk7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYSA9IGFyZWFTdW0gLyAyO1xuICAgIGFyZWFTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQoeCwgeSkge1xuICBhcmVhUmluZ1N1bS5hZGQoeTAgKiB4IC0geDAgKiB5KTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQoeDAwLCB5MDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcmVhU3RyZWFtO1xuIiwiaW1wb3J0IHt0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBub29wXG59O1xuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuLi9hZGRlclwiO1xuaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxudmFyIGxlbmd0aFN1bSA9IGFkZGVyKCksXG4gICAgbGVuZ3RoUmluZyxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQoeDAwLCB5MDApO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IHRydWU7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSArbGVuZ3RoU3VtO1xuICAgIGxlbmd0aFN1bS5yZXNldCgpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QoeCwgeSkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KHgsIHkpIHtcbiAgeDAgLT0geCwgeTAgLT0geTtcbiAgbGVuZ3RoU3VtLmFkZChzcXJ0KHgwICogeDAgKyB5MCAqIHkwKSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsZW5ndGhTdHJlYW07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlKDQuNSksXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgaWYgKChfID0gK18pICE9PSB0aGlzLl9yYWRpdXMpIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXMuX2NpcmNsZSA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fc3RyaW5nLnB1c2goXCJaXCIpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTFwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fY2lyY2xlID09IG51bGwpIHRoaXMuX2NpcmNsZSA9IGNpcmNsZSh0aGlzLl9yYWRpdXMpO1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHRoaXMuX2NpcmNsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3N0cmluZy5qb2luKFwiXCIpO1xuICAgICAgdGhpcy5fc3RyaW5nID0gW107XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNpcmNsZShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtZXRob2RzKSB7XG4gIHJldHVybiB7XG4gICAgc3RyZWFtOiB0cmFuc2Zvcm1lcihtZXRob2RzKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIobWV0aG9kcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSBzW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cblRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm1TdHJlYW0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG59O1xuIiwiaW1wb3J0IHtjYXJ0ZXNpYW59IGZyb20gXCIuLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybVwiO1xuXG52YXIgbWF4RGVwdGggPSAxNiwgLy8gbWF4aW11bSBkZXB0aCBvZiBzdWJkaXZpc2lvblxuICAgIGNvc01pbkRpc3RhbmNlID0gY29zKDMwICogcmFkaWFucyk7IC8vIGNvcyhtaW5pbXVtIGFuZ3VsYXIgZGlzdGFuY2UpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2plY3QsIGRlbHRhMikge1xuICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikgOiByZXNhbXBsZU5vbmUocHJvamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlTm9uZShwcm9qZWN0KSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSB7XG5cbiAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcbiAgICB2YXIgZHggPSB4MSAtIHgwLFxuICAgICAgICBkeSA9IHkxIC0geTAsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGQyID4gNCAqIGRlbHRhMiAmJiBkZXB0aC0tKSB7XG4gICAgICB2YXIgYSA9IGEwICsgYTEsXG4gICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgYyA9IGMwICsgYzEsXG4gICAgICAgICAgbSA9IHNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSxcbiAgICAgICAgICBwaGkyID0gYXNpbihjIC89IG0pLFxuICAgICAgICAgIGxhbWJkYTIgPSBhYnMoYWJzKGMpIC0gMSkgPCBlcHNpbG9uIHx8IGFicyhsYW1iZGEwIC0gbGFtYmRhMSkgPCBlcHNpbG9uID8gKGxhbWJkYTAgKyBsYW1iZGExKSAvIDIgOiBhdGFuMihiLCBhKSxcbiAgICAgICAgICBwID0gcHJvamVjdChsYW1iZGEyLCBwaGkyKSxcbiAgICAgICAgICB4MiA9IHBbMF0sXG4gICAgICAgICAgeTIgPSBwWzFdLFxuICAgICAgICAgIGR4MiA9IHgyIC0geDAsXG4gICAgICAgICAgZHkyID0geTIgLSB5MCxcbiAgICAgICAgICBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICBpZiAoZHogKiBkeiAvIGQyID4gZGVsdGEyIC8vIHBlcnBlbmRpY3VsYXIgcHJvamVjdGVkIGRpc3RhbmNlXG4gICAgICAgICAgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gMC41KSA+IDAuMyAvLyBtaWRwb2ludCBjbG9zZSB0byBhbiBlbmRcbiAgICAgICAgICB8fCBhMCAqIGExICsgYjAgKiBiMSArIGMwICogYzEgPCBjb3NNaW5EaXN0YW5jZSkgeyAvLyBhbmd1bGFyIGRpc3RhbmNlXG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDIsIHkyLCBsYW1iZGEyLCBhIC89IG0sIGIgLz0gbSwgYywgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4MiwgeTIpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIGxhbWJkYTIsIGEsIGIsIGMsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgbGFtYmRhMDAsIHgwMCwgeTAwLCBhMDAsIGIwMCwgYzAwLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICBsYW1iZGEwLCB4MCwgeTAsIGEwLCBiMCwgYzA7IC8vIHByZXZpb3VzIHBvaW50XG5cbiAgICB2YXIgcmVzYW1wbGVTdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvblN0YXJ0KCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IHJpbmdTdGFydDsgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvbkVuZCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7IH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgeDAgPSBOYU47XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBjID0gY2FydGVzaWFuKFtsYW1iZGEsIHBoaV0pLCBwID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCBsYW1iZGEwID0gbGFtYmRhLCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHN0cmVhbS5wb2ludCh4MCwgeTApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICBsaW5lU3RhcnQoKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcmluZ1BvaW50O1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICBsaW5lUG9pbnQobGFtYmRhMDAgPSBsYW1iZGEsIHBoaSksIHgwMCA9IHgwLCB5MDAgPSB5MCwgYTAwID0gYTAsIGIwMCA9IGIwLCBjMDAgPSBjMDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCBsYW1iZGEwMCwgYTAwLCBiMDAsIGMwMCwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgIGxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzYW1wbGVTdHJlYW07XG4gIH07XG59XG4iLCJpbXBvcnQgY2xpcEFudGltZXJpZGlhbiBmcm9tIFwiLi4vY2xpcC9hbnRpbWVyaWRpYW5cIjtcbmltcG9ydCBjbGlwQ2lyY2xlIGZyb20gXCIuLi9jbGlwL2NpcmNsZVwiO1xuaW1wb3J0IGNsaXBSZWN0YW5nbGUgZnJvbSBcIi4uL2NsaXAvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgY29tcG9zZSBmcm9tIFwiLi4vY29tcG9zZVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuLi9pZGVudGl0eVwiO1xuaW1wb3J0IHtjb3MsIGRlZ3JlZXMsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4uL3JvdGF0aW9uXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0XCI7XG5pbXBvcnQgcmVzYW1wbGUgZnJvbSBcIi4vcmVzYW1wbGVcIjtcblxudmFyIHRyYW5zZm9ybVJhZGlhbnMgPSB0cmFuc2Zvcm1lcih7XG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5zdHJlYW0ucG9pbnQoeCAqIHJhZGlhbnMsIHkgKiByYWRpYW5zKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHIgPSByb3RhdGUoeCwgeSk7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucG9pbnQoclswXSwgclsxXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGUoaywgZHgsIGR5KSB7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh4LCB5KSB7XG4gICAgcmV0dXJuIFtkeCArIGsgKiB4LCBkeSAtIGsgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbKHggLSBkeCkgLyBrLCAoZHkgLSB5KSAvIGtdO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCBkeCwgZHksIGFscGhhKSB7XG4gIHZhciBjb3NBbHBoYSA9IGNvcyhhbHBoYSksXG4gICAgICBzaW5BbHBoYSA9IHNpbihhbHBoYSksXG4gICAgICBhID0gY29zQWxwaGEgKiBrLFxuICAgICAgYiA9IHNpbkFscGhhICogayxcbiAgICAgIGFpID0gY29zQWxwaGEgLyBrLFxuICAgICAgYmkgPSBzaW5BbHBoYSAvIGssXG4gICAgICBjaSA9IChzaW5BbHBoYSAqIGR5IC0gY29zQWxwaGEgKiBkeCkgLyBrLFxuICAgICAgZmkgPSAoc2luQWxwaGEgKiBkeCArIGNvc0FscGhhICogZHkpIC8gaztcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICByZXR1cm4gW2EgKiB4IC0gYiAqIHkgKyBkeCwgZHkgLSBiICogeCAtIGEgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbYWkgKiB4IC0gYmkgKiB5ICsgY2ksIGZpIC0gYmkgKiB4IC0gYWkgKiB5XTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHJldHVybiBwcm9qZWN0aW9uTXV0YXRvcihmdW5jdGlvbigpIHsgcmV0dXJuIHByb2plY3Q7IH0pKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgdmFyIHByb2plY3QsXG4gICAgICBrID0gMTUwLCAvLyBzY2FsZVxuICAgICAgeCA9IDQ4MCwgeSA9IDI1MCwgLy8gdHJhbnNsYXRlXG4gICAgICBsYW1iZGEgPSAwLCBwaGkgPSAwLCAvLyBjZW50ZXJcbiAgICAgIGRlbHRhTGFtYmRhID0gMCwgZGVsdGFQaGkgPSAwLCBkZWx0YUdhbW1hID0gMCwgcm90YXRlLCAvLyBwcmUtcm90YXRlXG4gICAgICBhbHBoYSA9IDAsIC8vIHBvc3Qtcm90YXRlXG4gICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBwcmUtY2xpcCBhbmdsZVxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxLCBwb3N0Y2xpcCA9IGlkZW50aXR5LCAvLyBwb3N0LWNsaXAgZXh0ZW50XG4gICAgICBkZWx0YTIgPSAwLjUsIC8vIHByZWNpc2lvblxuICAgICAgcHJvamVjdFJlc2FtcGxlLFxuICAgICAgcHJvamVjdFRyYW5zZm9ybSxcbiAgICAgIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0sXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybShwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFucyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZlcnQocG9pbnQpIHtcbiAgICBwb2ludCA9IHByb2plY3RSb3RhdGVUcmFuc2Zvcm0uaW52ZXJ0KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgcmV0dXJuIHBvaW50ICYmIFtwb2ludFswXSAqIGRlZ3JlZXMsIHBvaW50WzFdICogZGVncmVlc107XG4gIH1cblxuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnModHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkocHJlY2xpcChwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKSkpKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9IF8sIHRoZXRhID0gdW5kZWZpbmVkLCByZXNldCgpKSA6IHByZWNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wb3N0Y2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMpIDogKHRoZXRhID0gbnVsbCwgY2xpcEFudGltZXJpZGlhbiksIHJlc2V0KCkpIDogdGhldGEgKiBkZWdyZWVzO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8gPT0gbnVsbCA/ICh4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIGlkZW50aXR5KSA6IGNsaXBSZWN0YW5nbGUoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVjZW50ZXIoKSkgOiBrO1xuICB9O1xuXG4gIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArX1swXSwgeSA9ICtfWzFdLCByZWNlbnRlcigpKSA6IFt4LCB5XTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgcGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogW2xhbWJkYSAqIGRlZ3JlZXMsIHBoaSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlbHRhTGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhUGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhR2FtbWEgPSBfLmxlbmd0aCA+IDIgPyBfWzJdICUgMzYwICogcmFkaWFucyA6IDAsIHJlY2VudGVyKCkpIDogW2RlbHRhTGFtYmRhICogZGVncmVlcywgZGVsdGFQaGkgKiBkZWdyZWVzLCBkZWx0YUdhbW1hICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5hbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9IF8gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IGFscGhhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIgPSBfICogXyksIHJlc2V0KCkpIDogc3FydChkZWx0YTIpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNlbnRlcigpIHtcbiAgICB2YXIgY2VudGVyID0gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgMCwgMCwgYWxwaGEpLmFwcGx5KG51bGwsIHByb2plY3QobGFtYmRhLCBwaGkpKSxcbiAgICAgICAgdHJhbnNmb3JtID0gKGFscGhhID8gc2NhbGVUcmFuc2xhdGVSb3RhdGUgOiBzY2FsZVRyYW5zbGF0ZSkoaywgeCAtIGNlbnRlclswXSwgeSAtIGNlbnRlclsxXSwgYWxwaGEpO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKTtcbiAgICBwcm9qZWN0VHJhbnNmb3JtID0gY29tcG9zZShwcm9qZWN0LCB0cmFuc2Zvcm0pO1xuICAgIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0gPSBjb21wb3NlKHJvdGF0ZSwgcHJvamVjdFRyYW5zZm9ybSk7XG4gICAgcHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyKTtcbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICByZXR1cm4gcmVjZW50ZXIoKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGN4ID0gY29zKHgpLFxuICAgICAgICBjeSA9IGNvcyh5KSxcbiAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgIHJldHVybiBbXG4gICAgICBrICogY3kgKiBzaW4oeCksXG4gICAgICBrICogc2luKHkpXG4gICAgXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHogPSBzcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgIHNjID0gc2luKGMpLFxuICAgICAgICBjYyA9IGNvcyhjKTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeCAqIHNjLCB6ICogY2MpLFxuICAgICAgYXNpbih6ICYmIHkgKiBzYyAvIHopXG4gICAgXTtcbiAgfVxufVxuIiwiaW1wb3J0IHthc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gIHJldHVybiBzcXJ0KDIgLyAoMSArIGN4Y3kpKTtcbn0pO1xuXG5hemltdXRoYWxFcXVhbEFyZWFSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhc2luKHogLyAyKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1YWxBcmVhUmF3KVxuICAgICAgLnNjYWxlKDEyNC43NSlcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG4iLCJpbXBvcnQge2Fjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gIHJldHVybiAoYyA9IGFjb3MoYykpICYmIGMgLyBzaW4oYyk7XG59KTtcblxuYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIHo7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHthdGFuLCBleHAsIGhhbGZQaSwgbG9nLCBwaSwgdGFuLCB0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgcm90YXRpb24gZnJvbSBcIi4uL3JvdGF0aW9uXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIGxvZyh0YW4oKGhhbGZQaSArIHBoaSkgLyAyKSldO1xufVxuXG5tZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbeCwgMiAqIGF0YW4oZXhwKHkpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcbiAgICAgIC5zY2FsZSg5NjEgLyB0YXUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyY2F0b3JQcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgdmFyIG0gPSBwcm9qZWN0aW9uKHByb2plY3QpLFxuICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICBzY2FsZSA9IG0uc2NhbGUsXG4gICAgICB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSxcbiAgICAgIGNsaXBFeHRlbnQgPSBtLmNsaXBFeHRlbnQsXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTE7IC8vIGNsaXAgZXh0ZW50XG5cbiAgbS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZShfKSwgcmVjbGlwKCkpIDogc2NhbGUoKTtcbiAgfTtcblxuICBtLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGUoXyksIHJlY2xpcCgpKSA6IHRyYW5zbGF0ZSgpO1xuICB9O1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlcihfKSwgcmVjbGlwKCkpIDogY2VudGVyKCk7XG4gIH07XG5cbiAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChfID09IG51bGwgPyB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwgOiAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSkpLCByZWNsaXAoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2xpcCgpIHtcbiAgICB2YXIgayA9IHBpICogc2NhbGUoKSxcbiAgICAgICAgdCA9IG0ocm90YXRpb24obS5yb3RhdGUoKSkuaW52ZXJ0KFswLCAwXSkpO1xuICAgIHJldHVybiBjbGlwRXh0ZW50KHgwID09IG51bGxcbiAgICAgICAgPyBbW3RbMF0gLSBrLCB0WzFdIC0ga10sIFt0WzBdICsgaywgdFsxXSArIGtdXSA6IHByb2plY3QgPT09IG1lcmNhdG9yUmF3XG4gICAgICAgID8gW1tNYXRoLm1heCh0WzBdIC0gaywgeDApLCB5MF0sIFtNYXRoLm1pbih0WzBdICsgaywgeDEpLCB5MV1dXG4gICAgICAgIDogW1t4MCwgTWF0aC5tYXgodFsxXSAtIGssIHkwKV0sIFt4MSwgTWF0aC5taW4odFsxXSArIGssIHkxKV1dKTtcbiAgfVxuXG4gIHJldHVybiByZWNsaXAoKTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXJSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG59XG5cbmVxdWlyZWN0YW5ndWxhclJhdy5pbnZlcnQgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cbiIsImltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7ZXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9lcXVpcmVjdGFuZ3VsYXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiAoY3kwIC0gY29zKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LCBueCA9IG4gKiB4O1xuICAgIHJldHVybiBbZ3kgKiBzaW4obngpLCBnIC0gZ3kgKiBjb3MobngpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKGd5KSkgLyBuICogc2lnbihneSksIGcgLSBzaWduKG4pICogc3FydCh4ICogeCArIGd5ICogZ3kpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgLmNlbnRlcihbMCwgMTMuOTM4OV0pO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBjb3MsIGVwc2lsb24yLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbnZhciBBMSA9IDEuMzQwMjY0LFxuICAgIEEyID0gLTAuMDgxMTA2LFxuICAgIEEzID0gMC4wMDA4OTMsXG4gICAgQTQgPSAwLjAwMzc5NixcbiAgICBNID0gc3FydCgzKSAvIDIsXG4gICAgaXRlcmF0aW9ucyA9IDEyO1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxFYXJ0aFJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgbCA9IGFzaW4oTSAqIHNpbihwaGkpKSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogY29zKGwpIC8gKE0gKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkpLFxuICAgIGwgKiAoQTEgKyBBMiAqIGwyICsgbDYgKiAoQTMgKyBBNCAqIGwyKSlcbiAgXTtcbn1cblxuZXF1YWxFYXJ0aFJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBsID0geSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIGZvciAodmFyIGkgPSAwLCBkZWx0YSwgZnksIGZweTsgaSA8IGl0ZXJhdGlvbnM7ICsraSkge1xuICAgIGZ5ID0gbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKSAtIHk7XG4gICAgZnB5ID0gQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKTtcbiAgICBsIC09IGRlbHRhID0gZnkgLyBmcHksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICAgIGlmIChhYnMoZGVsdGEpIDwgZXBzaWxvbjIpIGJyZWFrO1xuICB9XG4gIHJldHVybiBbXG4gICAgTSAqIHggKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkgLyBjb3MobCksXG4gICAgYXNpbihzaW4obCkgLyBNKVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWFsRWFydGhSYXcpXG4gICAgICAuc2NhbGUoMTc3LjE1OCk7XG59XG4iLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAuc2NhbGUoMTQ0LjA0OSlcbiAgICAgIC5jbGlwQW5nbGUoNjApO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF0dXJhbEVhcnRoMVJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICByZXR1cm4gW1xuICAgIGxhbWJkYSAqICgwLjg3MDcgLSAwLjEzMTk3OSAqIHBoaTIgKyBwaGk0ICogKC0wLjAxMzc5MSArIHBoaTQgKiAoMC4wMDM5NzEgKiBwaGkyIC0gMC4wMDE1MjkgKiBwaGk0KSkpLFxuICAgIHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKVxuICBdO1xufVxuXG5uYXR1cmFsRWFydGgxUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIHBoaSA9IHksIGkgPSAyNSwgZGVsdGE7XG4gIGRvIHtcbiAgICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICAgIHBoaSAtPSBkZWx0YSA9IChwaGkgKiAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICsgcGhpNCAqICgtMC4wNDQ0NzUgKyAwLjAyODg3NCAqIHBoaTIgLSAwLjAwNTkxNiAqIHBoaTQpKSkgLSB5KSAvXG4gICAgICAgICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKiAzICsgcGhpNCAqICgtMC4wNDQ0NzUgKiA3ICsgMC4wMjg4NzQgKiA5ICogcGhpMiAtIDAuMDA1OTE2ICogMTEgKiBwaGk0KSkpO1xuICB9IHdoaWxlIChhYnMoZGVsdGEpID4gZXBzaWxvbiAmJiAtLWkgPiAwKTtcbiAgcmV0dXJuIFtcbiAgICB4IC8gKDAuODcwNyArIChwaGkyID0gcGhpICogcGhpKSAqICgtMC4xMzE5NzkgKyBwaGkyICogKC0wLjAxMzc5MSArIHBoaTIgKiBwaGkyICogcGhpMiAqICgwLjAwMzk3MSAtIDAuMDAxNTI5ICogcGhpMikpKSksXG4gICAgcGhpXG4gIF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24obmF0dXJhbEVhcnRoMVJhdylcbiAgICAgIC5zY2FsZSgxNzUuMjk1KTtcbn1cbiIsImltcG9ydCB7YXNpbiwgY29zLCBlcHNpbG9uLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gb3J0aG9ncmFwaGljUmF3KHgsIHkpIHtcbiAgcmV0dXJuIFtjb3MoeSkgKiBzaW4oeCksIHNpbih5KV07XG59XG5cbm9ydGhvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXNpbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihvcnRob2dyYXBoaWNSYXcpXG4gICAgICAuc2NhbGUoMjQ5LjUpXG4gICAgICAuY2xpcEFuZ2xlKDkwICsgZXBzaWxvbik7XG59XG4iLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSAxICsgY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuc3RlcmVvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gMiAqIGF0YW4oeik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKHN0ZXJlb2dyYXBoaWNSYXcpXG4gICAgICAuc2NhbGUoMjUwKVxuICAgICAgLmNsaXBBbmdsZSgxNDIpO1xufVxuIiwiaW1wb3J0IHthdGFuLCBleHAsIGhhbGZQaSwgbG9nLCB0YW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge21lcmNhdG9yUHJvamVjdGlvbn0gZnJvbSBcIi4vbWVyY2F0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zdmVyc2VNZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xvZyh0YW4oKGhhbGZQaSArIHBoaSkgLyAyKSksIC1sYW1iZGFdO1xufVxuXG50cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gWy15LCAyICogYXRhbihleHAoeCkpIC0gaGFsZlBpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbSA9IG1lcmNhdG9yUHJvamVjdGlvbih0cmFuc3ZlcnNlTWVyY2F0b3JSYXcpLFxuICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICByb3RhdGUgPSBtLnJvdGF0ZTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGNlbnRlcihbLV9bMV0sIF9bMF1dKSA6IChfID0gY2VudGVyKCksIFtfWzFdLCAtX1swXV0pO1xuICB9O1xuXG4gIG0ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcm90YXRlKFtfWzBdLCBfWzFdLCBfLmxlbmd0aCA+IDIgPyBfWzJdICsgOTAgOiA5MF0pIDogKF8gPSByb3RhdGUoKSwgW19bMF0sIF9bMV0sIF9bMl0gLSA5MF0pO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGUoWzAsIDAsIDkwXSlcbiAgICAgIC5zY2FsZSgxNTkuMTU1KTtcbn1cbiIsImZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgdmFyIHN1bSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAoIWkpIHN1bSA9IDE7XG4gIGVsc2Ugd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gIG5vZGUudmFsdWUgPSBzdW07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoY291bnQpO1xufVxuIiwiaW1wb3J0IG5vZGVfY291bnQgZnJvbSBcIi4vY291bnRcIjtcbmltcG9ydCBub2RlX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IG5vZGVfZWFjaEJlZm9yZSBmcm9tIFwiLi9lYWNoQmVmb3JlXCI7XG5pbXBvcnQgbm9kZV9lYWNoQWZ0ZXIgZnJvbSBcIi4vZWFjaEFmdGVyXCI7XG5pbXBvcnQgbm9kZV9zdW0gZnJvbSBcIi4vc3VtXCI7XG5pbXBvcnQgbm9kZV9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBub2RlX3BhdGggZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IG5vZGVfYW5jZXN0b3JzIGZyb20gXCIuL2FuY2VzdG9yc1wiO1xuaW1wb3J0IG5vZGVfZGVzY2VuZGFudHMgZnJvbSBcIi4vZGVzY2VuZGFudHNcIjtcbmltcG9ydCBub2RlX2xlYXZlcyBmcm9tIFwiLi9sZWF2ZXNcIjtcbmltcG9ydCBub2RlX2xpbmtzIGZyb20gXCIuL2xpbmtzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZXJhcmNoeShkYXRhLCBjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIGNoaWxkcmVuID0gZGVmYXVsdENoaWxkcmVuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gIHJldHVybiBkLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIHN1bTogbm9kZV9zdW0sXG4gIHNvcnQ6IG5vZGVfc29ydCxcbiAgcGF0aDogbm9kZV9wYXRoLFxuICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgbGlua3M6IG5vZGVfbGlua3MsXG4gIGNvcHk6IG5vZGVfY29weVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XG4gIGRvIHtcbiAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgbmV4dC5wdXNoKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbi5zb3J0KGNvbXBhcmUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXTtcbiAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudCkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IFtdO1xuICB0aGlzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XG4gIHZhciBtID0gYXJyYXkubGVuZ3RoLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W21dO1xuICAgIGFycmF5W21dID0gYXJyYXlbaV07XG4gICAgYXJyYXlbaV0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gIG5vZGUueDEgPSBNYXRoLnJvdW5kKG5vZGUueDEpO1xuICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cbiIsImltcG9ydCB7Tm9kZX0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4XCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGxheW91dCB1c2luZyBCdWNoaGVpbSBldCBhbC7igJlzIGFsZ29yaXRobS5cbiAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXG4gICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGVmdC1tb3N0LCByaWdodC1tb3N0LCBhbmQgZGVwdGgtbW9zdCBub2RlcyBmb3IgZXh0ZW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICByaWdodCA9IHJvb3QsXG4gICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXG4gIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxuICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBleGVjdXRlU2hpZnRzKHYpO1xuICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgIH1cbiAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgfVxuXG4gIC8vIFRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uIEhlcmUsIGEgbmV3IHN1YnRyZWUgaXMgY29tYmluZWQgd2l0aCB0aGVcbiAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAvLyB2ZXJ0aWNlcyB1c2VkIGZvciB0aGUgdHJhdmVyc2FscyBhcmUgdmkrLCB2aS0sIHZvLSwgYW5kIHZvKywgd2hlcmUgdGhlXG4gIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgLy8gY29udG91ciwgd2UgdXNlIHJlc3BlY3RpdmUgdmFyaWFibGVzIHNpKywgc2ktLCBzby0sIGFuZCBzbysuIFdoZW5ldmVyIHR3b1xuICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gIC8vIFNVQlRSRUUgdG8gc2hpZnQgdGhlIHN1YnRyZWUgYW5kIHByZXBhcmUgdGhlIHNoaWZ0cyBvZiBzbWFsbGVyIHN1YnRyZWVzLlxuICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICBpZiAodykge1xuICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICB2aW0gPSB3LFxuICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgc29wID0gdm9wLm0sXG4gICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgc2hpZnQ7XG4gICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgdm9wID0gbmV4dFJpZ2h0KHZvcCk7XG4gICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgfVxuICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICB9XG4gICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuICAgICAgfVxuICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICBub2RlLnggKj0gZHg7XG4gICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICB9XG5cbiAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCB0cmVlKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiB0cmVlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHkxIC0geTApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcblxuZXhwb3J0IHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcm93cyA9IFtdLFxuICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICByb3csXG4gICAgICBub2RlVmFsdWUsXG4gICAgICBpMCA9IDAsXG4gICAgICBpMSA9IDAsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgZHgsIGR5LFxuICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICBzdW1WYWx1ZSxcbiAgICAgIG1pblZhbHVlLFxuICAgICAgbWF4VmFsdWUsXG4gICAgICBuZXdSYXRpbyxcbiAgICAgIG1pblJhdGlvLFxuICAgICAgYWxwaGEsXG4gICAgICBiZXRhO1xuXG4gIHdoaWxlIChpMCA8IG4pIHtcbiAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcblxuICAgIC8vIEZpbmQgdGhlIG5leHQgbm9uLWVtcHR5IG5vZGUuXG4gICAgZG8gc3VtVmFsdWUgPSBub2Rlc1tpMSsrXS52YWx1ZTsgd2hpbGUgKCFzdW1WYWx1ZSAmJiBpMSA8IG4pO1xuICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZTtcbiAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICBmb3IgKDsgaTEgPCBuOyArK2kxKSB7XG4gICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XG4gICAgfVxuXG4gICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgIHJvd3MucHVzaChyb3cgPSB7dmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKX0pO1xuICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgIHZhbHVlIC09IHN1bVZhbHVlLCBpMCA9IGkxO1xuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcbmltcG9ydCB7cGhpLCBzcXVhcmlmeVJhdGlvfSBmcm9tIFwiLi9zcXVhcmlmeVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gcmVzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlO1xuXG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gcm93LnZhbHVlID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkgcm93LnZhbHVlICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgeDAgKz0gKHgxIC0geDApICogcm93LnZhbHVlIC8gdmFsdWUsIHkxKTtcbiAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiaW1wb3J0IGNyb3NzIGZyb20gXCIuL2Nyb3NzXCI7XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWNPcmRlcihhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIHVwcGVyIGNvbnZleCBodWxsIHBlciB0aGUgbW9ub3RvbmUgY2hhaW4gYWxnb3JpdGhtLlxuLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuZnVuY3Rpb24gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMocG9pbnRzKSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICBzaXplID0gMjtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcbiAgICBpbmRleGVzW3NpemUrK10gPSBpO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4ZXMuc2xpY2UoMCwgc2l6ZSk7IC8vIHJlbW92ZSBwb3BwZWQgcG9pbnRzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50cykge1xuICBpZiAoKG4gPSBwb2ludHMubGVuZ3RoKSA8IDMpIHJldHVybiBudWxsO1xuXG4gIHZhciBpLFxuICAgICAgbixcbiAgICAgIHNvcnRlZFBvaW50cyA9IG5ldyBBcnJheShuKSxcbiAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICBzb3J0ZWRQb2ludHMuc29ydChsZXhpY29ncmFwaGljT3JkZXIpO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBmbGlwcGVkUG9pbnRzW2ldID0gW3NvcnRlZFBvaW50c1tpXVswXSwgLXNvcnRlZFBvaW50c1tpXVsxXV07XG5cbiAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICBsb3dlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhmbGlwcGVkUG9pbnRzKTtcblxuICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cbiAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICBza2lwUmlnaHQgPSBsb3dlckluZGV4ZXNbbG93ZXJJbmRleGVzLmxlbmd0aCAtIDFdID09PSB1cHBlckluZGV4ZXNbdXBwZXJJbmRleGVzLmxlbmd0aCAtIDFdLFxuICAgICAgaHVsbCA9IFtdO1xuXG4gIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gIC8vIFRoZW4gYWRkIGxvd2VyIGh1bGwgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbiAgZm9yIChpID0gdXBwZXJJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1t1cHBlckluZGV4ZXNbaV1dWzJdXSk7XG4gIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gIHJldHVybiBodWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Vbmlmb3JtKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Vbmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcbiAgICBtYXggPSBtYXggPT0gbnVsbCA/IDEgOiArbWF4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7XG4gICAgZWxzZSBtYXggLT0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzb3VyY2UoKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tVW5pZm9ybS5zb3VyY2UgPSBzb3VyY2VSYW5kb21Vbmlmb3JtO1xuXG4gIHJldHVybiByYW5kb21Vbmlmb3JtO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21JcndpbkhhbGwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUlyd2luSGFsbChuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgc3VtID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHN1bSArPSBzb3VyY2UoKTtcbiAgICAgIHJldHVybiBzdW07XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUlyd2luSGFsbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21JcndpbkhhbGw7XG5cbiAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IG5vcm1hbCBmcm9tIFwiLi9ub3JtYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwID8gbmV3IERhdGUgOiBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdEYXRlKHksIG0sIGQpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiBtLCBkOiBkLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFVUQ1F1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0TW9udGgoKSAvIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldFVUQ01vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgZmFsc2UpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCB0cnVlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVhcnRlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnEgPSBuWzBdICogMyAtIDMsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5zID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICsgcGFkKHogJSA2MCwgXCIwXCIsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHtiaXNlY3RvciwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHt0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZH0gZnJvbSBcImQzLXRpbWVcIjtcbmltcG9ydCB7dGltZUZvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQge21hcH0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlXCI7XG5cbnZhciBkdXJhdGlvblNlY29uZCA9IDEwMDAsXG4gICAgZHVyYXRpb25NaW51dGUgPSBkdXJhdGlvblNlY29uZCAqIDYwLFxuICAgIGR1cmF0aW9uSG91ciA9IGR1cmF0aW9uTWludXRlICogNjAsXG4gICAgZHVyYXRpb25EYXkgPSBkdXJhdGlvbkhvdXIgKiAyNCxcbiAgICBkdXJhdGlvbldlZWsgPSBkdXJhdGlvbkRheSAqIDcsXG4gICAgZHVyYXRpb25Nb250aCA9IGR1cmF0aW9uRGF5ICogMzAsXG4gICAgZHVyYXRpb25ZZWFyID0gZHVyYXRpb25EYXkgKiAzNjU7XG5cbmZ1bmN0aW9uIGRhdGUodCkge1xuICByZXR1cm4gbmV3IERhdGUodCk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcih0KSB7XG4gIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoaWRlbnRpdHksIGlkZW50aXR5KSxcbiAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICBmb3JtYXRTZWNvbmQgPSBmb3JtYXQoXCI6JVNcIiksXG4gICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgIGZvcm1hdERheSA9IGZvcm1hdChcIiVhICVkXCIpLFxuICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgIGZvcm1hdFllYXIgPSBmb3JtYXQoXCIlWVwiKTtcblxuICB2YXIgdGlja0ludGVydmFscyA9IFtcbiAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGVdLFxuICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkgICBdLFxuICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayAgXSxcbiAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyBtb250aCwgIDMsICAzICogZHVyYXRpb25Nb250aCBdLFxuICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICBdO1xuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXG4gICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcbiAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcblxuICAgIC8vIElmIGEgZGVzaXJlZCB0aWNrIGNvdW50IGlzIHNwZWNpZmllZCwgcGljayBhIHJlYXNvbmFibGUgdGljayBpbnRlcnZhbFxuICAgIC8vIGJhc2VkIG9uIHRoZSBleHRlbnQgb2YgdGhlIGRvbWFpbiBhbmQgYSByb3VnaCBlc3RpbWF0ZSBvZiB0aWNrIHNpemUuXG4gICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICBpZiAodHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIGludGVydmFsLFxuICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbihpKSB7IHJldHVybiBpWzJdOyB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgaW50ZXJ2YWwpO1xuICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgaSA9IHRpY2tJbnRlcnZhbHNbdGFyZ2V0IC8gdGlja0ludGVydmFsc1tpIC0gMV1bMl0gPCB0aWNrSW50ZXJ2YWxzW2ldWzJdIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpLCAxKTtcbiAgICAgICAgaW50ZXJ2YWwgPSBtaWxsaXNlY29uZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RlcCA9PSBudWxsID8gaW50ZXJ2YWwgOiBpbnRlcnZhbC5ldmVyeShzdGVwKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4obWFwLmNhbGwoXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHIgPSB0MSA8IHQwLFxuICAgICAgICB0O1xuICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICB0ID0gdGlja0ludGVydmFsKGludGVydmFsLCB0MCwgdDEsIHN0ZXApO1xuICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIChpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBzdGVwKSlcbiAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIodGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lTWlsbGlzZWNvbmQsIHRpbWVGb3JtYXQpLmRvbWFpbihbbmV3IERhdGUoMjAwMCwgMCwgMSksIG5ldyBEYXRlKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJpbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vbGluZWFyXCI7XG5cbmV4cG9ydCB2YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbmZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xufVxuXG5SYWRpYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKGEsIHIpIHtcbiAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSYWRpYWwoY3VydmUoY29udGV4dCkpO1xuICB9XG5cbiAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gIHJldHVybiByYWRpYWw7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwidmFyIHRhbjMwID0gTWF0aC5zcXJ0KDEgLyAzKSxcbiAgICB0YW4zMF8yID0gdGFuMzAgKiAyO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IE1hdGguc3FydChzaXplIC8gdGFuMzBfMiksXG4gICAgICAgIHggPSB5ICogdGFuMzA7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIDApO1xuICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgIGNvbnRleHQubGluZVRvKC14LCAwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BpLCB0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5cbnZhciBrYSA9IDAuODkwODEzMDkxNTI5Mjg1MjI4MTAsXG4gICAga3IgPSBNYXRoLnNpbihwaSAvIDEwKSAvIE1hdGguc2luKDcgKiBwaSAvIDEwKSxcbiAgICBreCA9IE1hdGguc2luKHRhdSAvIDEwKSAqIGtyLFxuICAgIGt5ID0gLU1hdGguY29zKHRhdSAvIDEwKSAqIGtyO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplICoga2EpLFxuICAgICAgICB4ID0ga3ggKiByLFxuICAgICAgICB5ID0ga3kgKiByO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDU7ICsraSkge1xuICAgICAgdmFyIGEgPSB0YXUgKiBpIC8gNSxcbiAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXG4gICAgICAgICAgcyA9IE1hdGguc2luKGEpO1xuICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge31cbiIsInZhciBzcXJ0MyA9IE1hdGguc3FydCgzKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSAtTWF0aC5zcXJ0KHNpemUgLyAoc3FydDMgKiAzKSk7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xuICAgIGNvbnRleHQubGluZVRvKC1zcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyhzcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwidmFyIGMgPSAtMC41LFxuICAgIHMgPSBNYXRoLnNxcnQoMykgLyAyLFxuICAgIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKSxcbiAgICBhID0gKGsgLyAyICsgMSkgKiAzO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gYSksXG4gICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgIHkwID0gciAqIGssXG4gICAgICAgIHgxID0geDAsXG4gICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICB4MiA9IC14MSxcbiAgICAgICAgeTIgPSB5MTtcbiAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgIGNvbnRleHQubGluZVRvKHgxLCB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxIC0gcyAqIHkxLCBzICogeDEgKyBjICogeTEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxICsgcyAqIHkxLCBjICogeTEgLSBzICogeDEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICgyICogdGhhdC5feDAgKyB0aGF0Ll94MSkgLyAzLFxuICAgICgyICogdGhhdC5feTAgKyB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDIgKiB0aGF0Ll94MSkgLyAzLFxuICAgICh0aGF0Ll95MCArIDIgKiB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDQgKiB0aGF0Ll94MSArIHgpIC8gNixcbiAgICAodGhhdC5feTAgKyA0ICogdGhhdC5feTEgKyB5KSAvIDZcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJhc2lzKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyAvLyBwcm9jZWVkXG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fY29udGV4dC5saW5lVG8oKDUgKiB0aGlzLl94MCArIHRoaXMuX3gxKSAvIDYsICg1ICogdGhpcy5feTAgKyB0aGlzLl95MSkgLyA2KTsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXMoY29udGV4dCk7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQmFzaXNDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbygodGhpcy5feDMgKyAyICogdGhpcy5feDIpIC8gMywgKHRoaXMuX3kzICsgMiAqIHRoaXMuX3kyKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gyID0geCwgdGhpcy5feTIgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc0Nsb3NlZChjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmZ1bmN0aW9uIEJhc2lzT3Blbihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc09wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzT3Blbihjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7QmFzaXN9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmZ1bmN0aW9uIEJ1bmRsZShjb250ZXh0LCBiZXRhKSB7XG4gIHRoaXMuX2Jhc2lzID0gbmV3IEJhc2lzKGNvbnRleHQpO1xuICB0aGlzLl9iZXRhID0gYmV0YTtcbn1cblxuQnVuZGxlLnByb3RvdHlwZSA9IHtcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBqID0geC5sZW5ndGggLSAxO1xuXG4gICAgaWYgKGogPiAwKSB7XG4gICAgICB2YXIgeDAgPSB4WzBdLFxuICAgICAgICAgIHkwID0geVswXSxcbiAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICBkeSA9IHlbal0gLSB5MCxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgdDtcblxuICAgICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICAgIHQgPSBpIC8gajtcbiAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQoXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHhbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHgwICsgdCAqIGR4KSxcbiAgICAgICAgICB0aGlzLl9iZXRhICogeVtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeTAgKyB0ICogZHkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYmV0YSkge1xuXG4gIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGJldGEgPT09IDEgPyBuZXcgQmFzaXMoY29udGV4dCkgOiBuZXcgQnVuZGxlKGNvbnRleHQsIGJldGEpO1xuICB9XG5cbiAgYnVuZGxlLmJldGEgPSBmdW5jdGlvbihiZXRhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gIH07XG5cbiAgcmV0dXJuIGJ1bmRsZTtcbn0pKDAuODUpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICB0aGF0Ll95MSArIHRoYXQuX2sgKiAodGhhdC5feTIgLSB0aGF0Ll95MCksXG4gICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXG4gICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgdGhhdC5feDIsXG4gICAgdGhhdC5feTJcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbE9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQge2Vwc2lsb259IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge0NhcmRpbmFsfSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB2YXIgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICB4MiA9IHRoYXQuX3gyLFxuICAgICAgeTIgPSB0aGF0Ll95MjtcblxuICBpZiAodGhhdC5fbDAxX2EgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGEgPSAyICogdGhhdC5fbDAxXzJhICsgMyAqIHRoYXQuX2wwMV9hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDEgPSAoeDEgKiBhIC0gdGhhdC5feDAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll94MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICAgIHkxID0gKHkxICogYSAtIHRoYXQuX3kwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feTIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgfVxuXG4gIGlmICh0aGF0Ll9sMjNfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbSA9IDMgKiB0aGF0Ll9sMjNfYSAqICh0aGF0Ll9sMjNfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MiA9ICh4MiAqIGIgKyB0aGF0Ll94MSAqIHRoYXQuX2wyM18yYSAtIHggKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgfVxuXG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MSwgeTEsIHgyLCB5MiwgdGhhdC5feDIsIHRoYXQuX3kyKTtcbn1cblxuZnVuY3Rpb24gQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbS5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCB7Q2FyZGluYWxDbG9zZWR9IGZyb20gXCIuL2NhcmRpbmFsQ2xvc2VkXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbVwiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCB7Q2FyZGluYWxPcGVufSBmcm9tIFwiLi9jYXJkaW5hbE9wZW5cIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhdG11bGxSb21cIjtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21PcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxuZnVuY3Rpb24gTGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhckNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhckNsb3NlZChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbn1cblxuLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgdmFyIGggPSB0aGF0Ll94MSAtIHRoYXQuX3gwO1xuICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG59XG5cbi8vIEFjY29yZGluZyB0byBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19IZXJtaXRlX3NwbGluZSNSZXByZXNlbnRhdGlvbnNcbi8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuZnVuY3Rpb24gcG9pbnQodGhhdCwgdDAsIHQxKSB7XG4gIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgeTAgPSB0aGF0Ll95MCxcbiAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgZHggPSAoeDEgLSB4MCkgLyAzO1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5Nb25vdG9uZVgucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxuICAgIHRoaXMuX3QwID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgdDEgPSBOYU47XG5cbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQodGhpcywgc2xvcGUyKHRoaXMsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKSwgdDEpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgdGhpcy5fdDAgPSB0MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xufVxuXG4oTW9ub3RvbmVZLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9ub3RvbmVYLnByb3RvdHlwZSkpLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG59O1xuXG5mdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5SZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIE5hdHVyYWwoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTmF0dXJhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgaWYgKG4pIHtcbiAgICAgIHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzBdLCB5WzBdKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHhbMF0sIHlbMF0pO1xuICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeFsxXSwgeVsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgcHkgPSBjb250cm9sUG9pbnRzKHkpO1xuICAgICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMTsgaTEgPCBuOyArK2kwLCArK2kxKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIG4gPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTIvYmV6aWVyLXNwbGluZXMvIGZvciBkZXJpdmF0aW9uLlxuZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XG4gIHZhciBpLFxuICAgICAgbiA9IHgubGVuZ3RoIC0gMSxcbiAgICAgIG0sXG4gICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkobik7XG4gIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyArK2kpIGFbaV0gPSAxLCBiW2ldID0gNCwgcltpXSA9IDQgKiB4W2ldICsgMiAqIHhbaSArIDFdO1xuICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICBhW24gLSAxXSA9IHJbbiAtIDFdIC8gYltuIC0gMV07XG4gIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcbiAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgKytpKSBiW2ldID0gMiAqIHhbaSArIDFdIC0gYVtpICsgMV07XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl90ID0gdDtcbn1cblxuU3RlcC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoMCA8IHRoaXMuX3QgJiYgdGhpcy5fdCA8IDEgJiYgdGhpcy5fcG9pbnQgPT09IDIpIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5feCA9IHgsIHRoaXMuX3kgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBBZnRlcihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAxKTtcbn1cbiIsImZ1bmN0aW9uIFJlZEJsYWNrVHJlZSgpIHtcbiAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRCbGFja1RyZWU7XG4iLCJpbXBvcnQge2NlbGxzLCBlZGdlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW251bGwsIG51bGxdLFxuICAgICAgaW5kZXggPSBlZGdlcy5wdXNoKGVkZ2UpIC0gMTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICBpZiAodjApIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHYwKTtcbiAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gIGNlbGxzW2xlZnQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgY2VsbHNbcmlnaHQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFt2MCwgdjFdO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgaSA9IGVkZ2VzLmxlbmd0aCxcbiAgICAgIGVkZ2U7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICghY29ubmVjdEVkZ2UoZWRnZSA9IGVkZ2VzW2ldLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhKE1hdGguYWJzKGVkZ2VbMF1bMF0gLSBlZGdlWzFdWzBdKSA+IGVwc2lsb25cbiAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24pKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge2NyZWF0ZUJvcmRlckVkZ2V9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDZWxsKHNpdGUpIHtcbiAgcmV0dXJuIGNlbGxzW3NpdGUuaW5kZXhdID0ge1xuICAgIHNpdGU6IHNpdGUsXG4gICAgaGFsZmVkZ2VzOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XG4gIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICB2YiA9IGVkZ2UucmlnaHQ7XG4gIGlmIChzaXRlID09PSB2YikgdmIgPSB2YSwgdmEgPSBzaXRlO1xuICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xuICBlbHNlIHZhID0gZWRnZVswXSwgdmIgPSBlZGdlWzFdO1xuICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydENlbGxIYWxmZWRnZXMoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcbiAgICAgIHZhciBpbmRleCA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gYXJyYXlbal0gLSBhcnJheVtpXTsgfSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgaUNlbGwsXG4gICAgICBjZWxsLFxuICAgICAgc2l0ZSxcbiAgICAgIGlIYWxmZWRnZSxcbiAgICAgIGhhbGZlZGdlcyxcbiAgICAgIG5IYWxmZWRnZXMsXG4gICAgICBzdGFydCxcbiAgICAgIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIGVuZCxcbiAgICAgIGVuZFgsXG4gICAgICBlbmRZLFxuICAgICAgY292ZXIgPSB0cnVlO1xuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGRhbmdsaW5nIGNsaXBwZWQgZWRnZXMuXG4gICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSW5zZXJ0IGFueSBib3JkZXIgZWRnZXMgYXMgbmVjZXNzYXJ5LlxuICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICBlbmQgPSBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSwgZW5kWCA9IGVuZFswXSwgZW5kWSA9IGVuZFsxXTtcbiAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24gfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsXG4gICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uICYmIHkxIC0gZW5kWSA+IGVwc2lsb24gPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24gPyBzdGFydFkgOiB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiAmJiB4MSAtIGVuZFggPiBlcHNpbG9uID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24gPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24gJiYgZW5kWSAtIHkwID4gZXBzaWxvbiA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkwXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uICYmIGVuZFggLSB4MCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgwLCB5MF1cbiAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICArK25IYWxmZWRnZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5IYWxmZWRnZXMpIGNvdmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXG4gIC8vIEl0IGRvZXNu4oCZdCBtYXR0ZXIgd2hpY2ggY29ybmVyIG9mIHRoZSBleHRlbnQgd2UgbWVhc3VyZSFcbiAgaWYgKGNvdmVyKSB7XG4gICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XG5cbiAgICBmb3IgKGlDZWxsID0gMCwgY292ZXIgPSBudWxsOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgZHggPSBzaXRlWzBdIC0geDA7XG4gICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCBkYykgZGMgPSBkMiwgY292ZXIgPSBjZWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3Zlcikge1xuICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgY292ZXIuaGFsZmVkZ2VzLnB1c2goXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlID0gY292ZXIuc2l0ZSwgdjAwLCB2MDEpKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMSwgdjEwKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjEwLCB2MDApKSAtIDFcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y2lyY2xlcywgZXBzaWxvbjJ9IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuZXhwb3J0IHZhciBmaXJzdENpcmNsZTtcblxuZnVuY3Rpb24gQ2lyY2xlKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMueCA9XG4gIHRoaXMueSA9XG4gIHRoaXMuYXJjID1cbiAgdGhpcy5zaXRlID1cbiAgdGhpcy5jeSA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yKSByZXR1cm47XG5cbiAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkO1xuXG4gIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gIGNpcmNsZS5hcmMgPSBhcmM7XG4gIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gIGNpcmNsZS54ID0geCArIGJ4O1xuICBjaXJjbGUueSA9IChjaXJjbGUuY3kgPSB5ICsgYnkpICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpOyAvLyB5IGJvdHRvbVxuXG4gIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cbiAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICBub2RlID0gY2lyY2xlcy5fO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZS5QOyBicmVhazsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGU7IGJyZWFrOyB9XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlcy5pbnNlcnQoYmVmb3JlLCBjaXJjbGUpO1xuICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICBpZiAoY2lyY2xlKSB7XG4gICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgIGNpcmNsZVBvb2wucHVzaChjaXJjbGUpO1xuICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQge1JlZEJsYWNrTm9kZX0gZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5pbXBvcnQge2NyZWF0ZUNlbGx9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7YXR0YWNoQ2lyY2xlLCBkZXRhY2hDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjcmVhdGVFZGdlLCBzZXRFZGdlRW5kfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQge2JlYWNoZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGJlYWNoUG9vbCA9IFtdO1xuXG5mdW5jdGlvbiBCZWFjaCgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLmVkZ2UgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmNpcmNsZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaDtcbiAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gIHJldHVybiBiZWFjaDtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgYmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gIFJlZEJsYWNrTm9kZShiZWFjaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLFxuICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgIHZlcnRleCA9IFt4LCB5XSxcbiAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgZGlzYXBwZWFyaW5nID0gW2JlYWNoXTtcblxuICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgd2hpbGUgKGxBcmMuY2lyY2xlXG4gICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uXG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbikge1xuICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgIGxBcmMgPSBwcmV2aW91cztcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgdmFyIHJBcmMgPSBuZXh0O1xuICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCZWFjaChzaXRlKSB7XG4gIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICBsQXJjLFxuICAgICAgckFyYyxcbiAgICAgIGR4bCxcbiAgICAgIGR4cixcbiAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBkeGwgPSBsZWZ0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpIC0geDtcbiAgICBpZiAoZHhsID4gZXBzaWxvbikgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICBkeHIgPSB4IC0gcmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICBpZiAoZHhyID4gZXBzaWxvbikge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgIHJBcmMgPSBub2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2VsbChzaXRlKTtcbiAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICBiZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXG4gIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuXG4gIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIHJBcmMgPSBjcmVhdGVCZWFjaChsQXJjLnNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gIGRldGFjaENpcmNsZShsQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgIGF4ID0gbFNpdGVbMF0sXG4gICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICBieSA9IHNpdGVbMV0gLSBheSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgY3kgPSByU2l0ZVsxXSAtIGF5LFxuICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBieTIgPSByZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICB2YXIgbEFyYyA9IGFyYy5QO1xuICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XG5cbiAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgIGxmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsXG4gICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG5cbiAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgckFyYyA9IGFyYy5OO1xuICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG59XG4iLCJpbXBvcnQge2FkZEJlYWNoLCByZW1vdmVCZWFjaH0gZnJvbSBcIi4vQmVhY2hcIjtcbmltcG9ydCB7c29ydENlbGxIYWxmZWRnZXMsIGNlbGxIYWxmZWRnZVN0YXJ0LCBjbGlwQ2VsbHN9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7Zmlyc3RDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjbGlwRWRnZXN9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCBSZWRCbGFja1RyZWUgZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIGJlYWNoZXM7XG5leHBvcnQgdmFyIGNlbGxzO1xuZXhwb3J0IHZhciBjaXJjbGVzO1xuZXhwb3J0IHZhciBlZGdlcztcblxuZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGFbMV0pIC0gKGFbMF0gLSBiWzBdKSAqIChjWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICByZXR1cm4gYlsxXSAtIGFbMV1cbiAgICAgIHx8IGJbMF0gLSBhWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFncmFtKHNpdGVzLCBleHRlbnQpIHtcbiAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBjaXJjbGU7XG5cbiAgZWRnZXMgPSBbXTtcbiAgY2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gIGNpcmNsZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZVsxXSA8IGNpcmNsZS55IHx8IChzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSkge1xuICAgICAgaWYgKHNpdGVbMF0gIT09IHggfHwgc2l0ZVsxXSAhPT0geSkge1xuICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgeCA9IHNpdGVbMF0sIHkgPSBzaXRlWzFdO1xuICAgICAgfVxuICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICByZW1vdmVCZWFjaChjaXJjbGUuYXJjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc29ydENlbGxIYWxmZWRnZXMoKTtcblxuICBpZiAoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgeTAgPSArZXh0ZW50WzBdWzFdLFxuICAgICAgICB4MSA9ICtleHRlbnRbMV1bMF0sXG4gICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIHRoaXMuY2VsbHMgPSBjZWxscztcblxuICBiZWFjaGVzID1cbiAgY2lyY2xlcyA9XG4gIGVkZ2VzID1cbiAgY2VsbHMgPSBudWxsO1xufVxuXG5EaWFncmFtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgcG9seWdvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcbiAgICAgIHBvbHlnb24uZGF0YSA9IGNlbGwuc2l0ZS5kYXRhO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpYW5nbGVzID0gW10sXG4gICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICBpZiAoIShtID0gKGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzKS5sZW5ndGgpKSByZXR1cm47XG4gICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgczAsXG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcbiAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuICAgICAgICBpZiAoczAgJiYgczEgJiYgaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG4gIH0sXG5cbiAgbGlua3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLCBpMCwgaTEgPSB0aGF0Ll9mb3VuZCB8fCAwLCBuID0gdGhhdC5jZWxscy5sZW5ndGgsIGNlbGw7XG5cbiAgICAvLyBVc2UgdGhlIHByZXZpb3VzbHktZm91bmQgY2VsbCwgb3Igc3RhcnQgd2l0aCBhbiBhcmJpdHJhcnkgb25lLlxuICAgIHdoaWxlICghKGNlbGwgPSB0aGF0LmNlbGxzW2kxXSkpIGlmICgrK2kxID49IG4pIHJldHVybiBudWxsO1xuICAgIHZhciBkeCA9IHggLSBjZWxsLnNpdGVbMF0sIGR5ID0geSAtIGNlbGwuc2l0ZVsxXSwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIC8vIFRyYXZlcnNlIHRoZSBoYWxmLWVkZ2VzIHRvIGZpbmQgYSBjbG9zZXIgY2VsbCwgaWYgYW55LlxuICAgIGRvIHtcbiAgICAgIGNlbGwgPSB0aGF0LmNlbGxzW2kwID0gaTFdLCBpMSA9IG51bGw7XG4gICAgICBjZWxsLmhhbGZlZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGF0LmVkZ2VzW2VdLCB2ID0gZWRnZS5sZWZ0O1xuICAgICAgICBpZiAoKHYgPT09IGNlbGwuc2l0ZSB8fCAhdikgJiYgISh2ID0gZWRnZS5yaWdodCkpIHJldHVybjtcbiAgICAgICAgdmFyIHZ4ID0geCAtIHZbMF0sIHZ5ID0geSAtIHZbMV0sIHYyID0gdnggKiB2eCArIHZ5ICogdnk7XG4gICAgICAgIGlmICh2MiA8IGQyKSBkMiA9IHYyLCBpMSA9IHYuaW5kZXg7XG4gICAgICB9KTtcbiAgICB9IHdoaWxlIChpMSAhPT0gbnVsbCk7XG5cbiAgICB0aGF0Ll9mb3VuZCA9IGkwO1xuXG4gICAgcmV0dXJuIHJhZGl1cyA9PSBudWxsIHx8IGQyIDw9IHJhZGl1cyAqIHJhZGl1cyA/IGNlbGwuc2l0ZSA6IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fem9vbSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybiBpZGVudGl0eTtcbiAgcmV0dXJuIG5vZGUuX196b29tO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZVpvb219IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtldmVudCwgY3VzdG9tRXZlbnQsIHNlbGVjdCwgbW91c2UsIHRvdWNofSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IFpvb21FdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHtUcmFuc2Zvcm0sIGlkZW50aXR5fSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgZSA9IHRoaXM7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIGlmIChlLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICAgIGUgPSBlLnZpZXdCb3guYmFzZVZhbDtcbiAgICAgIHJldHVybiBbW2UueCwgZS55XSwgW2UueCArIGUud2lkdGgsIGUueSArIGUuaGVpZ2h0XV07XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbZS53aWR0aC5iYXNlVmFsLnZhbHVlLCBlLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtlLmNsaWVudFdpZHRoLCBlLmNsaWVudEhlaWdodF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXaGVlbERlbHRhKCkge1xuICByZXR1cm4gLWV2ZW50LmRlbHRhWSAqIChldmVudC5kZWx0YU1vZGUgPT09IDEgPyAwLjA1IDogZXZlbnQuZGVsdGFNb2RlID8gMSA6IDAuMDAyKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSB7XG4gIHZhciBkeDAgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMF1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzBdLFxuICAgICAgZHgxID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzFdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVswXSxcbiAgICAgIGR5MCA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFswXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMV0sXG4gICAgICBkeTEgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzFdO1xuICByZXR1cm4gdHJhbnNmb3JtLnRyYW5zbGF0ZShcbiAgICBkeDEgPiBkeDAgPyAoZHgwICsgZHgxKSAvIDIgOiBNYXRoLm1pbigwLCBkeDApIHx8IE1hdGgubWF4KDAsIGR4MSksXG4gICAgZHkxID4gZHkwID8gKGR5MCArIGR5MSkgLyAyIDogTWF0aC5taW4oMCwgZHkwKSB8fCBNYXRoLm1heCgwLCBkeTEpXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBjb25zdHJhaW4gPSBkZWZhdWx0Q29uc3RyYWluLFxuICAgICAgd2hlZWxEZWx0YSA9IGRlZmF1bHRXaGVlbERlbHRhLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIHNjYWxlRXh0ZW50ID0gWzAsIEluZmluaXR5XSxcbiAgICAgIHRyYW5zbGF0ZUV4dGVudCA9IFtbLUluZmluaXR5LCAtSW5maW5pdHldLCBbSW5maW5pdHksIEluZmluaXR5XV0sXG4gICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVab29tLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICB0b3VjaHN0YXJ0aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgd2hlZWxEZWxheSA9IDE1MCxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSlcbiAgICAgICAgLm9uKFwid2hlZWwuem9vbVwiLCB3aGVlbGVkKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcbiAgICBzZWxlY3Rpb24ucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHApIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwLFxuICAgICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHksIHApIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbihpZGVudGl0eS50cmFuc2xhdGUocDBbMF0sIHAwWzFdKS5zY2FsZSh0LmspLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IC14LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IC15LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteVxuICAgICAgKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzY2FsZSh0cmFuc2Zvcm0sIGspIHtcbiAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBrKSk7XG4gICAgcmV0dXJuIGsgPT09IHRyYW5zZm9ybS5rID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybShrLCB0cmFuc2Zvcm0ueCwgdHJhbnNmb3JtLnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XG4gICAgcmV0dXJuIHggPT09IHRyYW5zZm9ybS54ICYmIHkgPT09IHRyYW5zZm9ybS55ID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0uaywgeCwgeSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChleHRlbnQpIHtcbiAgICByZXR1cm4gWygrZXh0ZW50WzBdWzBdICsgK2V4dGVudFsxXVswXSkgLyAyLCAoK2V4dGVudFswXVsxXSArICtleHRlbnRbMV1bMV0pIC8gMl07XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZSh0cmFuc2l0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KSB7XG4gICAgdHJhbnNpdGlvblxuICAgICAgICAub24oXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuc3RhcnQoKTsgfSlcbiAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBlID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBwID0gcG9pbnQgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHBvaW50ID09PSBcImZ1bmN0aW9uXCIgPyBwb2ludC5hcHBseSh0aGF0LCBhcmdzKSA6IHBvaW50LFxuICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcbiAgICAgICAgICAgICAgYSA9IHRoYXQuX196b29tLFxuICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gMSkgdCA9IGI7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yIG9uIGVuZC5cbiAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICBnLnpvb20obnVsbCwgdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXN0dXJlKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgcmV0dXJuICghY2xlYW4gJiYgdGhhdC5fX3pvb21pbmcpIHx8IG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB0aGlzLnRhcHMgPSAwO1xuICB9XG5cbiAgR2VzdHVyZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHtcbiAgICAgICAgdGhpcy50aGF0Ll9fem9vbWluZyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICBkZWxldGUgdGhpcy50aGF0Ll9fem9vbWluZztcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgWm9vbUV2ZW50KHpvb20sIHR5cGUsIHRoaXMudGhhdC5fX3pvb20pLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHQuayAqIE1hdGgucG93KDIsIHdoZWVsRGVsdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpO1xuXG4gICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgIGlmIChnLndoZWVsKSB7XG4gICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXG4gICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgZWxzZSB7XG4gICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBub2V2ZW50KCk7XG4gICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0LCBrKSwgZy5tb3VzZVswXSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMsIHRydWUpLFxuICAgICAgICB2ID0gc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLnpvb21cIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLnpvb21cIiwgbW91c2V1cHBlZCwgdHJ1ZSksXG4gICAgICAgIHAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgeDAgPSBldmVudC5jbGllbnRYLFxuICAgICAgICB5MCA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgZy5tb3VzZSA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCldO1xuICAgIGludGVycnVwdCh0aGlzKTtcbiAgICBnLnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSB4MCwgZHkgPSBldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgIGcubW92ZWQgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgICAgfVxuICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gbW91c2UoZy50aGF0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgZy5tb3ZlZCk7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICBwMCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgIGsxID0gdDAuayAqIChldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxuICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG5cbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKGR1cmF0aW9uID4gMCkgc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbikuY2FsbChzY2hlZHVsZSwgdDEsIHAwKTtcbiAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLFxuICAgICAgICBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMsIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA9PT0gbiksXG4gICAgICAgIHN0YXJ0ZWQsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHAsIHN0YXJ0ZWQgPSB0cnVlLCBnLnRhcHMgPSAxICsgISF0b3VjaHN0YXJ0aW5nO1xuICAgICAgZWxzZSBpZiAoIWcudG91Y2gxICYmIGcudG91Y2gwWzJdICE9PSBwWzJdKSBnLnRvdWNoMSA9IHAsIGcudGFwcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgaWYgKGcudGFwcyA8IDIpIHRvdWNoc3RhcnRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaHN0YXJ0aW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudCgpO1xuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgIGcudGFwcyA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQ7XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XG4gICAgfVxuICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICBpZiAoZy50b3VjaDApIGcudG91Y2gwWzFdID0gdGhpcy5fX3pvb20uaW52ZXJ0KGcudG91Y2gwWzBdKTtcbiAgICBlbHNlIHtcbiAgICAgIGcuZW5kKCk7XG4gICAgICAvLyBJZiB0aGlzIHdhcyBhIGRibHRhcCwgcmVyb3V0ZSB0byB0aGUgKG9wdGlvbmFsKSBkYmxjbGljay56b29tIGhhbmRsZXIuXG4gICAgICBpZiAoZy50YXBzID09PSAyKSB7XG4gICAgICAgIHZhciBwID0gc2VsZWN0KHRoaXMpLm9uKFwiZGJsY2xpY2suem9vbVwiKTtcbiAgICAgICAgaWYgKHApIHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB6b29tKSA6IHdoZWVsRGVsdGE7XG4gIH07XG5cbiAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IGZpbHRlcjtcbiAgfTtcblxuICB6b29tLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcbiAgfTtcblxuICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlRXh0ZW50WzBdID0gK19bMF0sIHNjYWxlRXh0ZW50WzFdID0gK19bMV0sIHpvb20pIDogW3NjYWxlRXh0ZW50WzBdLCBzY2FsZUV4dGVudFsxXV07XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlRXh0ZW50WzBdWzBdID0gK19bMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVswXSA9ICtfWzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV0gPSArX1swXVsxXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdID0gK19bMV1bMV0sIHpvb20pIDogW1t0cmFuc2xhdGVFeHRlbnRbMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXV0sIFt0cmFuc2xhdGVFeHRlbnRbMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXV1dO1xuICB9O1xuXG4gIHpvb20uY29uc3RyYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnN0cmFpbiA9IF8sIHpvb20pIDogY29uc3RyYWluO1xuICB9O1xuXG4gIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgfTtcblxuICB6b29tLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgem9vbSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IHpvb20gOiB2YWx1ZTtcbiAgfTtcblxuICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gem9vbTtcbn1cbiIsImltcG9ydCB7IFZpZXcyTW9kZWxBZGFwdGVyIH0gZnJvbSBcIi4vdmlldzJNb2RlbEFkYXB0ZXJcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXcge1xuICAgIGFkYXB0ZXI6IFZpZXcyTW9kZWxBZGFwdGVyO1xuICAgIGNvbnN0cnVjdG9yKGFkYXB0ZXI6IFZpZXcyTW9kZWxBZGFwdGVyKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlciA9IGFkYXB0ZXI7XG4gICAgfVxufSIsImltcG9ydCB7IE1vZGVsIH0gZnJvbSBcIi4vbW9kZWwvbW9kZWxcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi92aWV3L3ZpZXdcIjtcblxuY29uc3QgbW9kZWwgPSBuZXcgTW9kZWwoJ2JvYy5jc3YnLCB7XG4gICAgdXBkYXRlOiAoKSA9PiB7fVxufSk7XG5jb25zdCB2aWV3ID0gbmV3IFZpZXcoe30pO1xuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgTW9kZWwyVmlld0FkYXB0ZXIgfSBmcm9tICcuL21vZGVsMnZpZXdhZGFwdGVyJztcblxuZXhwb3J0IGNsYXNzIE1vZGVsIHtcbiAgICBhZGFwdGVyOiBNb2RlbDJWaWV3QWRhcHRlcjtcbiAgICBkYXRhOiBbb2JqZWN0XTtcbiAgICBmaWx0ZXJlZERhdGE6IFtvYmplY3RdO1xuXG4gICAgY29uc3RydWN0b3IoZmlsZW5hbWU6IHN0cmluZywgYWRhcHRlcjogTW9kZWwyVmlld0FkYXB0ZXIpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyID0gYWRhcHRlcjtcblxuICAgICAgICBkMy5jc3YoZmlsZW5hbWUpLnRoZW4oKHJhd0RhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gcmF3RGF0YS5zbGljZSgwKTtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gdGhpcy5kYXRhO1xuXG4gICAgICAgICAgICBhZGFwdGVyLnVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==