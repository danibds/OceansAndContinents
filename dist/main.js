!function(t){var n={};function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(n){return t[n]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=6)}([,,,function(t,n,e){var i,r,o;/*! nouislider - 13.1.5 - 4/24/2019 */r=[],void 0===(o="function"==typeof(i=function(){"use strict";var t="13.1.5";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function i(t){t.preventDefault()}function r(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(h(t,n),setTimeout((function(){c(t,n)}),e))}function s(t){return Math.max(Math.min(t,100),0)}function a(t){return Array.isArray(t)?t:[t]}function u(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function h(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function c(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function l(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||"");return{x:n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,y:n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop}}function f(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function _(t,n){for(var e=1;t>=n[e];)e+=1;return e}function d(t,n,e){if(e>=t.slice(-1)[0])return 100;var i=_(e,t),r=t[i-1],o=t[i],s=n[i-1],a=n[i];return s+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([r,o],e)/f(s,a)}function v(t,n,e,i){if(100===i)return i;var r=_(i,t),o=t[r-1],s=t[r];return e?i-o>(s-o)/2?s:o:n[r-1]?t[r-1]+function(t,n){return Math.round(t/n)*n}(i-t[r-1],n[r-1]):i}function g(n,e,i){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!r(o="min"===n?0:"max"===n?100:parseFloat(n))||!r(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");i.xPct.push(o),i.xVal.push(e[0]),o?i.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(i.xSteps[0]=e[1]),i.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/f(e.xPct[t],e.xPct[t+1]);var i=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],r=Math.ceil(Number(i.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*r;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function m(t,n,e){var i;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var r=[];for(i in t)t.hasOwnProperty(i)&&r.push([t[i],i]);for(r.length&&"object"==typeof r[0][0]?r.sort((function(t,n){return t[0][0]-n[0][0]})):r.sort((function(t,n){return t[0]-n[0]})),i=0;i<r.length;i++)g(r[i][1],r[i][0],this);for(this.xNumSteps=this.xSteps.slice(0),i=0;i<this.xNumSteps.length;i++)y(i,this.xNumSteps[i],this)}m.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},m.prototype.toStepping=function(t){return t=d(this.xVal,this.xPct,t)},m.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var i=_(e,n),r=t[i-1],o=t[i],s=n[i-1];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([r,o],(e-s)*f(s,n[i]))}(this.xVal,this.xPct,t)},m.prototype.getStep=function(t){return t=v(this.xPct,this.xSteps,this.snap,t)},m.prototype.getDefaultStep=function(t,n,e){var i=_(t,this.xPct);return(100===t||n&&t===this.xPct[i-1])&&(i=Math.max(i-1,1)),(this.xVal[i]-this.xVal[i-1])/e},m.prototype.getNearbySteps=function(t){var n=_(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},m.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(u);return Math.max.apply(null,t)},m.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function w(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function b(n,e){if(!r(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function M(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new m(e,n.snap,n.singleStep)}function S(n,e){if(e=a(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function N(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function E(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function T(n,e){var i,r=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(i=1;i<n.handles;i++)r.push(e);r.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");r=e}n.connect=r}function k(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function A(n,e){if(!r(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function U(n,e){if(!r(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function P(n,e){if(!r(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!r(e[0])&&!r(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function D(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function L(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var i=e.indexOf("tap")>=0,r=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,s=e.indexOf("snap")>=0,a=e.indexOf("hover")>=0,u=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");A(n,n.start[1]-n.start[0])}if(u&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:i||s,drag:r,fixed:o,snap:s,hover:a,unconstrained:u}}function F(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var i=0;i<n.handles;i++)n.tooltips.push(!0)}else{if(n.tooltips=a(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach((function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")}))}}function R(t,n){t.ariaFormat=n,w(n)}function z(t,n){t.format=n,w(n)}function O(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function j(t,n){t.documentElement=n}function H(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function V(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var i in n.cssClasses={},e)e.hasOwnProperty(i)&&(n.cssClasses[i]=n.cssPrefix+e[i]);else n.cssClasses=e}function q(n){var i={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},r={step:{r:!1,t:b},start:{r:!0,t:S},connect:{r:!0,t:T},direction:{r:!0,t:D},snap:{r:!1,t:N},animate:{r:!1,t:C},animationDuration:{r:!1,t:E},range:{r:!0,t:M},orientation:{r:!1,t:k},margin:{r:!1,t:A},limit:{r:!1,t:U},padding:{r:!1,t:P},behaviour:{r:!0,t:L},ariaFormat:{r:!1,t:R},format:{r:!1,t:z},tooltips:{r:!1,t:F},keyboardSupport:{r:!0,t:O},documentElement:{r:!1,t:j},cssPrefix:{r:!0,t:H},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(r).forEach((function(s){if(!e(n[s])&&void 0===o[s]){if(r[s].r)throw new Error("noUiSlider ("+t+"): '"+s+"' is required.");return!0}r[s].t(i,e(n[s])?n[s]:o[s])})),i.pips=n.pips;var s=document.createElement("div"),a=void 0!==s.style.msTransform,u=void 0!==s.style.transform;return i.transformRule=u?"transform":a?"msTransform":"webkitTransform",i.style=[["left","top"],["right","bottom"]][i.dir][i.ort],i}function Y(e,r,u){var f,p,_,d,v,g,y,m,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},w=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),b=e,M=r.spectrum,S=[],N=[],C=[],E=0,T={},k=e.ownerDocument,A=r.documentElement||k.documentElement,U=k.body,P=-1,D=0,L=1,F=2,R="rtl"===k.dir||1===r.ort?0:100;function z(t,n){var e=k.createElement("div");return n&&h(e,n),t.appendChild(e),e}function O(t,n){var e=z(t,r.cssClasses.origin),i=z(e,r.cssClasses.handle);return z(i,r.cssClasses.touchArea),i.setAttribute("data-handle",n),r.keyboardSupport&&(i.setAttribute("tabindex","0"),i.addEventListener("keydown",(function(t){return function(t,n){if(V()||Y(n))return!1;var e=["Left","Right"],i=["Down","Up"];r.dir&&!r.ort?e.reverse():r.ort&&!r.dir&&i.reverse();var o=t.key.replace("Arrow",""),s=o===i[0]||o===e[0],a=o===i[1]||o===e[1];if(!s&&!a)return!0;t.preventDefault();var u=s?0:1,h=yt(n)[u];return null!==h&&(!1===h&&(h=M.getDefaultStep(N[n],s,10)),h=Math.max(h,1e-7),h*=s?-1:1,vt(n,S[n]+h,!0),!1)}(t,n)}))),i.setAttribute("role","slider"),i.setAttribute("aria-orientation",r.ort?"vertical":"horizontal"),0===n?h(i,r.cssClasses.handleLower):n===r.handles-1&&h(i,r.cssClasses.handleUpper),e}function j(t,n){return!!n&&z(t,r.cssClasses.connect)}function H(t,n){return!!r.tooltips[n]&&z(t.firstChild,r.cssClasses.tooltip)}function V(){return b.hasAttribute("disabled")}function Y(t){return p[t].hasAttribute("disabled")}function B(){v&&(ot("update.tooltips"),v.forEach((function(t){t&&n(t)})),v=null)}function I(){B(),v=p.map(H),rt("update.tooltips",(function(t,n,e){if(v[n]){var i=t[n];!0!==r.tooltips[n]&&(i=r.tooltips[n].to(e[n])),v[n].innerHTML=i}}))}function X(t,n,e){var i=k.createElement("div"),o=[];o[D]=r.cssClasses.valueNormal,o[L]=r.cssClasses.valueLarge,o[F]=r.cssClasses.valueSub;var s=[];s[D]=r.cssClasses.markerNormal,s[L]=r.cssClasses.markerLarge,s[F]=r.cssClasses.markerSub;var a=[r.cssClasses.valueHorizontal,r.cssClasses.valueVertical],u=[r.cssClasses.markerHorizontal,r.cssClasses.markerVertical];function c(t,n){var e=n===r.cssClasses.value,i=e?o:s;return n+" "+(e?a:u)[r.ort]+" "+i[t]}return h(i,r.cssClasses.pips),h(i,0===r.ort?r.cssClasses.pipsHorizontal:r.cssClasses.pipsVertical),Object.keys(t).forEach((function(o){!function(t,o,s){if((s=n?n(o,s):s)!==P){var a=z(i,!1);a.className=c(s,r.cssClasses.marker),a.style[r.style]=t+"%",s>D&&((a=z(i,!1)).className=c(s,r.cssClasses.value),a.setAttribute("data-value",o),a.style[r.style]=t+"%",a.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])})),i}function $(){d&&(n(d),d=null)}function Z(n){$();var e=n.mode,i=n.density||1,r=n.filter||!1,o=function(n,e,i){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var r=e-1,o=100/r;for(e=[];r--;)e[r]=r*o;e.push(100),n="positions"}return"positions"===n?e.map((function(t){return M.fromStepping(i?M.getStep(t):t)})):"values"===n?i?e.map((function(t){return M.fromStepping(M.getStep(M.toStepping(t)))})):e:void 0}(e,n.values||!1,n.stepped||!1),s=function(t,n,e){var i,r={},o=M.xVal[0],s=M.xVal[M.xVal.length-1],a=!1,u=!1,h=0;return i=e.slice().sort((function(t,n){return t-n})),(e=i.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==o&&(e.unshift(o),a=!0),e[e.length-1]!==s&&(e.push(s),u=!0),e.forEach((function(i,o){var s,c,l,f,p,_,d,v,g,y,m=i,x=e[o+1],w="steps"===n;if(w&&(s=M.xNumSteps[o]),s||(s=x-m),!1!==m&&void 0!==x)for(s=Math.max(s,1e-7),c=m;c<=x;c=(c+s).toFixed(7)/1){for(v=(p=(f=M.toStepping(c))-h)/t,y=p/(g=Math.round(v)),l=1;l<=g;l+=1)r[(_=h+l*y).toFixed(5)]=[M.fromStepping(_),0];d=e.indexOf(c)>-1?L:w?F:D,!o&&a&&(d=0),c===x&&u||(r[f.toFixed(5)]=[c,d]),h=f}})),r}(i,e,o),a=n.format||{to:Math.round};return d=b.appendChild(X(s,r,a))}function W(){var t=f.getBoundingClientRect(),n="offset"+["Width","Height"][r.ort];return 0===r.ort?t.width||f[n]:t.height||f[n]}function Q(t,n,e,i){var o=function(o){return!!(o=function(t,n,e){var i,r,o=0===t.type.indexOf("touch"),s=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),o){var u=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var h=Array.prototype.filter.call(t.touches,u);if(h.length>1)return!1;i=h[0].pageX,r=h[0].pageY}else{var c=Array.prototype.find.call(t.changedTouches,u);if(!c)return!1;i=c.pageX,r=c.pageY}}return n=n||l(k),(s||a)&&(i=t.clientX+n.x,r=t.clientY+n.y),t.pageOffset=n,t.points=[i,r],t.cursor=s||a,t}(o,i.pageOffset,i.target||n))&&!(V()&&!i.doNotReject)&&(s=b,a=r.cssClasses.tap,!((s.classList?s.classList.contains(a):new RegExp("\\b"+a+"\\b").test(s.className))&&!i.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!i.hover||!o.buttons)&&(w||o.preventDefault(),o.calcPoint=o.points[r.ort],void e(o,i)));var s,a},s=[];return t.split(" ").forEach((function(t){n.addEventListener(t,o,!!w&&{passive:!0}),s.push([t,o])})),s}function J(t){var n,e,i,o,a,u,h=100*(t-(n=f,e=r.ort,i=n.getBoundingClientRect(),o=n.ownerDocument,a=o.documentElement,u=l(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(u.x=0),e?i.top+u.y-a.clientTop:i.left+u.x-a.clientLeft))/W();return h=s(h),r.dir?100-h:h}function G(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&tt(t,n)}function K(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return tt(t,n);var e=(r.dir?-1:1)*(t.calcPoint-n.startCalcPoint);ht(e>0,100*e/n.baseSize,n.locations,n.handleNumbers)}function tt(t,n){n.handle&&(c(n.handle,r.cssClasses.active),E-=1),n.listeners.forEach((function(t){A.removeEventListener(t[0],t[1])})),0===E&&(c(b,r.cssClasses.drag),lt(),t.cursor&&(U.style.cursor="",U.removeEventListener("selectstart",i))),n.handleNumbers.forEach((function(t){st("change",t),st("set",t),st("end",t)}))}function nt(t,n){if(n.handleNumbers.some(Y))return!1;var e;1===n.handleNumbers.length&&(e=p[n.handleNumbers[0]].children[0],E+=1,h(e,r.cssClasses.active)),t.stopPropagation();var o=[],s=Q(x.move,A,K,{target:t.target,handle:e,listeners:o,startCalcPoint:t.calcPoint,baseSize:W(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:N.slice()}),a=Q(x.end,A,tt,{target:t.target,handle:e,listeners:o,doNotReject:!0,handleNumbers:n.handleNumbers}),u=Q("mouseout",A,G,{target:t.target,handle:e,listeners:o,doNotReject:!0,handleNumbers:n.handleNumbers});o.push.apply(o,s.concat(a,u)),t.cursor&&(U.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&h(b,r.cssClasses.drag),U.addEventListener("selectstart",i,!1)),n.handleNumbers.forEach((function(t){st("start",t)}))}function et(t){t.stopPropagation();var n=J(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach((function(i,r){if(!Y(r)){var o=Math.abs(N[r]-t);(o<n||100===o&&100===n)&&(e=r,n=o)}})),e}(n);if(!1===e)return!1;r.events.snap||o(b,r.cssClasses.tap,r.animationDuration),ft(e,n,!0,!0),lt(),st("slide",e,!0),st("update",e,!0),st("change",e,!0),st("set",e,!0),r.events.snap&&nt(t,{handleNumbers:[e]})}function it(t){var n=J(t.calcPoint),e=M.getStep(n),i=M.fromStepping(e);Object.keys(T).forEach((function(t){"hover"===t.split(".")[0]&&T[t].forEach((function(t){t.call(g,i)}))}))}function rt(t,n){T[t]=T[t]||[],T[t].push(n),"update"===t.split(".")[0]&&p.forEach((function(t,n){st("update",n)}))}function ot(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(T).forEach((function(t){var i=t.split(".")[0],r=t.substring(i.length);n&&n!==i||e&&e!==r||delete T[t]}))}function st(t,n,e){Object.keys(T).forEach((function(i){var o=i.split(".")[0];t===o&&T[i].forEach((function(t){t.call(g,S.map(r.format.to),n,S.slice(),e||!1,N.slice())}))}))}function at(t,n,e,i,o,a){return p.length>1&&!r.events.unconstrained&&(i&&n>0&&(e=Math.max(e,t[n-1]+r.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-r.margin))),p.length>1&&r.limit&&(i&&n>0&&(e=Math.min(e,t[n-1]+r.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-r.limit))),r.padding&&(0===n&&(e=Math.max(e,r.padding[0])),n===p.length-1&&(e=Math.min(e,100-r.padding[1]))),!((e=s(e=M.getStep(e)))===t[n]&&!a)&&e}function ut(t,n){var e=r.ort;return(e?n:t)+", "+(e?t:n)}function ht(t,n,e,i){var r=e.slice(),o=[!t,t],s=[t,!t];i=i.slice(),t&&i.reverse(),i.length>1?i.forEach((function(t,e){var i=at(r,t,r[t]+n,o[e],s[e],!1);!1===i?n=0:(n=i-r[t],r[t]=i)})):o=s=[!0];var a=!1;i.forEach((function(t,i){a=ft(t,e[t]+n,o[i],s[i])||a})),a&&i.forEach((function(t){st("update",t),st("slide",t)}))}function ct(t,n){return r.dir?100-t-n:t}function lt(){C.forEach((function(t){var n=N[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e}))}function ft(t,n,e,i){return!1!==(n=at(N,t,n,e,i,!1))&&(function(t,n){N[t]=n,S[t]=M.fromStepping(n);var e="translate("+ut(ct(n,0)-R+"%","0")+")";p[t].style[r.transformRule]=e,pt(t),pt(t+1)}(t,n),!0)}function pt(t){if(_[t]){var n=0,e=100;0!==t&&(n=N[t-1]),t!==_.length-1&&(e=N[t]);var i=e-n,o="translate("+ut(ct(n,i)+"%","0")+")",s="scale("+ut(i/100,"1")+")";_[t].style[r.transformRule]=o+" "+s}}function _t(t,n){return null===t||!1===t||void 0===t?N[n]:("number"==typeof t&&(t=String(t)),t=r.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?N[n]:t)}function dt(t,n){var e=a(t),i=void 0===N[0];n=void 0===n||!!n,r.animate&&!i&&o(b,r.cssClasses.tap,r.animationDuration),C.forEach((function(t){ft(t,_t(e[t],t),!0,!1)})),C.forEach((function(t){ft(t,N[t],!0,!0)})),lt(),C.forEach((function(t){st("update",t),null!==e[t]&&n&&st("set",t)}))}function vt(n,e,i){if(!((n=Number(n))>=0&&n<C.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);ft(n,_t(e,n),!0,!0),st("update",n),i&&st("set",n)}function gt(){var t=S.map(r.format.to);return 1===t.length?t[0]:t}function yt(t){var n=N[t],e=M.getNearbySteps(n),i=S[t],o=e.thisStep.step,s=null;if(r.snap)return[i-e.stepBefore.startValue||null,e.stepAfter.startValue-i||null];!1!==o&&i+o>e.stepAfter.startValue&&(o=e.stepAfter.startValue-i),s=i>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&i-e.stepBefore.highestStep,100===n?o=null:0===n&&(s=null);var a=M.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(a))),null!==s&&!1!==s&&(s=Number(s.toFixed(a))),[s,o]}return h(y=b,r.cssClasses.target),0===r.dir?h(y,r.cssClasses.ltr):h(y,r.cssClasses.rtl),0===r.ort?h(y,r.cssClasses.horizontal):h(y,r.cssClasses.vertical),f=z(y,r.cssClasses.base),function(t,n){var e=z(n,r.cssClasses.connects);p=[],(_=[]).push(j(e,t[0]));for(var i=0;i<r.handles;i++)p.push(O(n,i)),C[i]=i,_.push(j(e,t[i+1]))}(r.connect,f),(m=r.events).fixed||p.forEach((function(t,n){Q(x.start,t.children[0],nt,{handleNumbers:[n]})})),m.tap&&Q(x.start,f,et,{}),m.hover&&Q(x.move,f,it,{hover:!0}),m.drag&&_.forEach((function(t,n){if(!1!==t&&0!==n&&n!==_.length-1){var e=p[n-1],i=p[n],o=[t];h(t,r.cssClasses.draggable),m.fixed&&(o.push(e.children[0]),o.push(i.children[0])),o.forEach((function(t){Q(x.start,t,nt,{handles:[e,i],handleNumbers:[n-1,n]})}))}})),dt(r.start),r.pips&&Z(r.pips),r.tooltips&&I(),rt("update",(function(t,n,e,i,o){C.forEach((function(t){var n=p[t],i=at(N,t,0,!0,!0,!0),s=at(N,t,100,!0,!0,!0),a=o[t],u=r.ariaFormat.to(e[t]);i=M.fromStepping(i).toFixed(1),s=M.fromStepping(s).toFixed(1),a=M.fromStepping(a).toFixed(1),n.children[0].setAttribute("aria-valuemin",i),n.children[0].setAttribute("aria-valuemax",s),n.children[0].setAttribute("aria-valuenow",a),n.children[0].setAttribute("aria-valuetext",u)}))})),g={destroy:function(){for(var t in r.cssClasses)r.cssClasses.hasOwnProperty(t)&&c(b,r.cssClasses[t]);for(;b.firstChild;)b.removeChild(b.firstChild);delete b.noUiSlider},steps:function(){return C.map(yt)},on:rt,off:ot,get:gt,set:dt,setHandle:vt,reset:function(t){dt(r.start,t)},__moveHandles:function(t,n,e){ht(t,n,N,e)},options:u,updateOptions:function(t,n){var e=gt(),i=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];i.forEach((function(n){void 0!==t[n]&&(u[n]=t[n])}));var o=q(u);i.forEach((function(n){void 0!==t[n]&&(r[n]=o[n])})),M=o.spectrum,r.margin=o.margin,r.limit=o.limit,r.padding=o.padding,r.pips?Z(r.pips):$(),r.tooltips?I():B(),N=[],dt(t.start||e,n)},target:b,removePips:$,removeTooltips:B,pips:Z}}return{__spectrum:m,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var i=Y(n,q(e),e);return n.noUiSlider=i,i}}})?i.apply(n,r):i)||(t.exports=o)},,function(t,n,e){var i,r,o;r=[],void 0===(o="function"==typeof(i=function(){"use strict";var t=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function n(t){return t.split("").reverse().join("")}function e(t,n){return t.substring(0,n.length)===n}function i(t,n,e){if((t[n]||t[e])&&t[n]===t[e])throw new Error(n)}function r(t){return"number"==typeof t&&isFinite(t)}function o(t,e,i,o,s,a,u,h,c,l,f,p){var _,d,v,g,y,m=p,x="",w="";return a&&(p=a(p)),!!r(p)&&(!1!==t&&0===parseFloat(p.toFixed(t))&&(p=0),p<0&&(_=!0,p=Math.abs(p)),!1!==t&&(y=t,g=(g=p).toString().split("e"),p=(+((g=(g=Math.round(+(g[0]+"e"+(g[1]?+g[1]+y:y)))).toString().split("e"))[0]+"e"+(g[1]?+g[1]-y:-y))).toFixed(y)),-1!==(p=p.toString()).indexOf(".")?(v=(d=p.split("."))[0],i&&(x=i+d[1])):v=p,e&&(v=n(v).match(/.{1,3}/g),v=n(v.join(n(e)))),_&&h&&(w+=h),o&&(w+=o),_&&c&&(w+=c),w+=v,w+=x,s&&(w+=s),l&&(w=l(w,m)),w)}function s(t,n,i,o,s,a,u,h,c,l,f,p){var _,d="";return f&&(p=f(p)),!(!p||"string"!=typeof p)&&(h&&e(p,h)&&(p=p.replace(h,""),_=!0),o&&e(p,o)&&(p=p.replace(o,"")),c&&e(p,c)&&(p=p.replace(c,""),_=!0),s&&function(t,n){return t.slice(-1*n.length)===n}(p,s)&&(p=p.slice(0,-1*s.length)),n&&(p=p.split(n).join("")),i&&(p=p.replace(i,".")),_&&(d+="-"),""!==(d=(d+=p).replace(/[^0-9\.\-.]/g,""))&&(d=Number(d),u&&(d=u(d)),!!r(d)&&d))}function a(n,e,i){var r,o=[];for(r=0;r<t.length;r+=1)o.push(n[t[r]]);return o.push(i),e.apply("",o)}return function n(e){if(!(this instanceof n))return new n(e);"object"==typeof e&&(e=function(n){var e,r,o,s={};for(void 0===n.suffix&&(n.suffix=n.postfix),e=0;e<t.length;e+=1)if(void 0===(o=n[r=t[e]]))"negative"!==r||s.negativeBefore?"mark"===r&&"."!==s.thousand?s[r]=".":s[r]=!1:s[r]="-";else if("decimals"===r){if(!(o>=0&&o<8))throw new Error(r);s[r]=o}else if("encoder"===r||"decoder"===r||"edit"===r||"undo"===r){if("function"!=typeof o)throw new Error(r);s[r]=o}else{if("string"!=typeof o)throw new Error(r);s[r]=o}return i(s,"mark","thousand"),i(s,"prefix","negative"),i(s,"prefix","negativeBefore"),s}(e),this.to=function(t){return a(e,o,t)},this.from=function(t){return a(e,s,t)})}})?i.apply(n,r):i)||(t.exports=o)},function(t,n,e){"use strict";e.r(n);var i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},r=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)<0?i=o+1:r=o}return i},right:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)>0?r=o:i=o+1}return i}}};var o=r(i);o.right,o.left;var s=Array.prototype;s.slice,s.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var a=function(t){for(var n,e,i,r=t.length,o=-1,s=0;++o<r;)s+=t[o].length;for(e=new Array(s);--r>=0;)for(n=(i=t[r]).length;--n>=0;)e[--s]=i[n];return e};Array.prototype.slice;var u={value:function(){}};function h(){for(var t,n=0,e=arguments.length,i={};n<e;++n){if(!(t=arguments[n]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new c(i)}function c(t){this._=t}function l(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",i=t.indexOf(".");if(i>=0&&(e=t.slice(i+1),t=t.slice(0,i)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,i=0,r=t.length;i<r;++i)if((e=t[i]).name===n)return e.value}function p(t,n,e){for(var i=0,r=t.length;i<r;++i)if(t[i].name===n){t[i]=u,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}c.prototype=h.prototype={constructor:c,on:function(t,n){var e,i=this._,r=l(t+"",i),o=-1,s=r.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<s;)if(e=(t=r[o]).type)i[e]=p(i[e],t.name,n);else if(null==n)for(e in i)i[e]=p(i[e],t.name,null);return this}for(;++o<s;)if((e=(t=r[o]).type)&&(e=f(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new c(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,i,r=new Array(e),o=0;o<e;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(i=this._[t]).length;o<e;++o)i[o].value.apply(n,r)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(n,e)}};var _=h,d="http://www.w3.org/1999/xhtml",v={svg:"http://www.w3.org/2000/svg",xhtml:d,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},g=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),v.hasOwnProperty(n)?{space:v[n],local:t}:t};function y(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===d&&n.documentElement.namespaceURI===d?n.createElement(t):n.createElementNS(e,t)}}function m(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var x=function(t){var n=g(t);return(n.local?m:y)(n)};function w(){}var b=function(t){return null==t?w:function(){return this.querySelector(t)}};function M(){return[]}var S=function(t){return null==t?M:function(){return this.querySelectorAll(t)}},N=function(t){return function(){return this.matches(t)}},C=function(t){return new Array(t.length)};function E(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}E.prototype={constructor:E,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var T="$";function k(t,n,e,i,r,o){for(var s,a=0,u=n.length,h=o.length;a<h;++a)(s=n[a])?(s.__data__=o[a],i[a]=s):e[a]=new E(t,o[a]);for(;a<u;++a)(s=n[a])&&(r[a]=s)}function A(t,n,e,i,r,o,s){var a,u,h,c={},l=n.length,f=o.length,p=new Array(l);for(a=0;a<l;++a)(u=n[a])&&(p[a]=h=T+s.call(u,u.__data__,a,n),h in c?r[a]=u:c[h]=u);for(a=0;a<f;++a)(u=c[h=T+s.call(t,o[a],a,o)])?(i[a]=u,u.__data__=o[a],c[h]=null):e[a]=new E(t,o[a]);for(a=0;a<l;++a)(u=n[a])&&c[p[a]]===u&&(r[a]=u)}function U(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function P(t){return function(){this.removeAttribute(t)}}function D(t){return function(){this.removeAttributeNS(t.space,t.local)}}function L(t,n){return function(){this.setAttribute(t,n)}}function F(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function R(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var O=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function j(t){return function(){this.style.removeProperty(t)}}function H(t,n,e){return function(){this.style.setProperty(t,n,e)}}function V(t,n,e){return function(){var i=n.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,e)}}function q(t,n){return t.style.getPropertyValue(n)||O(t).getComputedStyle(t,null).getPropertyValue(n)}function Y(t){return function(){delete this[t]}}function B(t,n){return function(){this[t]=n}}function I(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function X(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new Z(t)}function Z(t){this._node=t,this._names=X(t.getAttribute("class")||"")}function W(t,n){for(var e=$(t),i=-1,r=n.length;++i<r;)e.add(n[i])}function Q(t,n){for(var e=$(t),i=-1,r=n.length;++i<r;)e.remove(n[i])}function J(t){return function(){W(this,t)}}function G(t){return function(){Q(this,t)}}function K(t,n){return function(){(n.apply(this,arguments)?W:Q)(this,t)}}Z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function tt(){this.textContent=""}function nt(t){return function(){this.textContent=t}}function et(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function it(){this.innerHTML=""}function rt(t){return function(){this.innerHTML=t}}function ot(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function st(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ut(){return null}function ht(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function lt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ft={},pt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ft={mouseenter:"mouseover",mouseleave:"mouseout"}));function _t(t,n,e){return t=dt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function dt(t,n,e){return function(i){var r=pt;pt=i;try{t.call(this,this.__data__,n,e)}finally{pt=r}}}function vt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function gt(t){return function(){var n=this.__on;if(n){for(var e,i=0,r=-1,o=n.length;i<o;++i)e=n[i],t.type&&e.type!==t.type||e.name!==t.name?n[++r]=e:this.removeEventListener(e.type,e.listener,e.capture);++r?n.length=r:delete this.__on}}}function yt(t,n,e){var i=ft.hasOwnProperty(t.type)?_t:dt;return function(r,o,s){var a,u=this.__on,h=i(n,o,s);if(u)for(var c=0,l=u.length;c<l;++c)if((a=u[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=h,a.capture=e),void(a.value=n);this.addEventListener(t.type,h,e),a={type:t.type,name:t.name,value:n,listener:h,capture:e},u?u.push(a):this.__on=[a]}}function mt(t,n,e){var i=O(t),r=i.CustomEvent;"function"==typeof r?r=new r(n,e):(r=i.document.createEvent("Event"),e?(r.initEvent(n,e.bubbles,e.cancelable),r.detail=e.detail):r.initEvent(n,!1,!1)),t.dispatchEvent(r)}function xt(t,n){return function(){return mt(this,t,n)}}function wt(t,n){return function(){return mt(this,t,n.apply(this,arguments))}}var bt=[null];function Mt(t,n){this._groups=t,this._parents=n}function St(){return new Mt([[document.documentElement]],bt)}Mt.prototype=St.prototype={constructor:Mt,select:function(t){"function"!=typeof t&&(t=b(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s,a=n[r],u=a.length,h=i[r]=new Array(u),c=0;c<u;++c)(o=a[c])&&(s=t.call(o,o.__data__,c,a))&&("__data__"in o&&(s.__data__=o.__data__),h[c]=s);return new Mt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=S(t));for(var n=this._groups,e=n.length,i=[],r=[],o=0;o<e;++o)for(var s,a=n[o],u=a.length,h=0;h<u;++h)(s=a[h])&&(i.push(t.call(s,s.__data__,h,a)),r.push(s));return new Mt(i,r)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s=n[r],a=s.length,u=i[r]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&u.push(o);return new Mt(i,this._parents)},data:function(t,n){if(!t)return _=new Array(this.size()),c=-1,this.each((function(t){_[++c]=t})),_;var e,i=n?A:k,r=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var s=o.length,a=new Array(s),u=new Array(s),h=new Array(s),c=0;c<s;++c){var l=r[c],f=o[c],p=f.length,_=t.call(l,l&&l.__data__,c,r),d=_.length,v=u[c]=new Array(d),g=a[c]=new Array(d);i(l,f,v,g,h[c]=new Array(p),_,n);for(var y,m,x=0,w=0;x<d;++x)if(y=v[x]){for(x>=w&&(w=x+1);!(m=g[w])&&++w<d;);y._next=m||null}}return(a=new Mt(a,r))._enter=u,a._exit=h,a},enter:function(){return new Mt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new Mt(this._exit||this._groups.map(C),this._parents)},join:function(t,n,e){var i=this.enter(),r=this,o=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=n&&(r=n(r)),null==e?o.remove():e(o),i&&r?i.merge(r).order():r},merge:function(t){for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var u,h=n[a],c=e[a],l=h.length,f=s[a]=new Array(l),p=0;p<l;++p)(u=h[p]||c[p])&&(f[p]=u);for(;a<i;++a)s[a]=n[a];return new Mt(s,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var i,r=t[n],o=r.length-1,s=r[o];--o>=0;)(i=r[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=U);for(var e=this._groups,i=e.length,r=new Array(i),o=0;o<i;++o){for(var s,a=e[o],u=a.length,h=r[o]=new Array(u),c=0;c<u;++c)(s=a[c])&&(h[c]=s);h.sort(n)}return new Mt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var i=t[n],r=0,o=i.length;r<o;++r){var s=i[r];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,i=n.length;e<i;++e)for(var r,o=n[e],s=0,a=o.length;s<a;++s)(r=o[s])&&t.call(r,r.__data__,s,o);return this},attr:function(t,n){var e=g(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?D:P:"function"==typeof n?e.local?z:R:e.local?F:L)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?j:"function"==typeof n?V:H)(t,n,null==e?"":e)):q(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Y:"function"==typeof n?I:B)(t,n)):this.node()[t]},classed:function(t,n){var e=X(t+"");if(arguments.length<2){for(var i=$(this.node()),r=-1,o=e.length;++r<o;)if(!i.contains(e[r]))return!1;return!0}return this.each(("function"==typeof n?K:n?J:G)(e,n))},text:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?et:nt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?it:("function"==typeof t?ot:rt)(t)):this.node().innerHTML},raise:function(){return this.each(st)},lower:function(){return this.each(at)},append:function(t){var n="function"==typeof t?t:x(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:x(t),i=null==n?ut:"function"==typeof n?n:b(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(ht)},clone:function(t){return this.select(t?lt:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var i,r,o=vt(t+""),s=o.length;if(!(arguments.length<2)){for(a=n?yt:gt,null==e&&(e=!1),i=0;i<s;++i)this.each(a(o[i],n,e));return this}var a=this.node().__on;if(a)for(var u,h=0,c=a.length;h<c;++h)for(i=0,u=a[h];i<s;++i)if((r=o[i]).type===u.type&&r.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?wt:xt)(t,n))}};var Nt=St,Ct=0;function Et(){this._="@"+(++Ct).toString(36)}Et.prototype=function(){return new Et}.prototype={constructor:Et,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Tt(t,n,e,i,r,o,s,a,u,h){this.target=t,this.type=n,this.subject=e,this.identifier=i,this.active=r,this.x=o,this.y=s,this.dx=a,this.dy=u,this._=h}Tt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var kt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function At(t,n){var e=Object.create(t.prototype);for(var i in n)e[i]=n[i];return e}function Ut(){}var Pt="\\s*([+-]?\\d+)\\s*",Dt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ft=/^#([0-9a-f]{3,8})$/,Rt=new RegExp("^rgb\\("+[Pt,Pt,Pt]+"\\)$"),zt=new RegExp("^rgb\\("+[Lt,Lt,Lt]+"\\)$"),Ot=new RegExp("^rgba\\("+[Pt,Pt,Pt,Dt]+"\\)$"),jt=new RegExp("^rgba\\("+[Lt,Lt,Lt,Dt]+"\\)$"),Ht=new RegExp("^hsl\\("+[Dt,Lt,Lt]+"\\)$"),Vt=new RegExp("^hsla\\("+[Dt,Lt,Lt,Dt]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Yt(){return this.rgb().formatHex()}function Bt(){return this.rgb().formatRgb()}function It(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Ft.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Xt(n):3===e?new Qt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new Qt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new Qt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Rt.exec(t))?new Qt(n[1],n[2],n[3],1):(n=zt.exec(t))?new Qt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ot.exec(t))?$t(n[1],n[2],n[3],n[4]):(n=jt.exec(t))?$t(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Ht.exec(t))?tn(n[1],n[2]/100,n[3]/100,1):(n=Vt.exec(t))?tn(n[1],n[2]/100,n[3]/100,n[4]):qt.hasOwnProperty(t)?Xt(qt[t]):"transparent"===t?new Qt(NaN,NaN,NaN,0):null}function Xt(t){return new Qt(t>>16&255,t>>8&255,255&t,1)}function $t(t,n,e,i){return i<=0&&(t=n=e=NaN),new Qt(t,n,e,i)}function Zt(t){return t instanceof Ut||(t=It(t)),t?new Qt((t=t.rgb()).r,t.g,t.b,t.opacity):new Qt}function Wt(t,n,e,i){return 1===arguments.length?Zt(t):new Qt(t,n,e,null==i?1:i)}function Qt(t,n,e,i){this.r=+t,this.g=+n,this.b=+e,this.opacity=+i}function Jt(){return"#"+Kt(this.r)+Kt(this.g)+Kt(this.b)}function Gt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Kt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function tn(t,n,e,i){return i<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,i)}function nn(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=It(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,i=t.b/255,r=Math.min(n,e,i),o=Math.max(n,e,i),s=NaN,a=o-r,u=(o+r)/2;return a?(s=n===o?(e-i)/a+6*(e<i):e===o?(i-n)/a+2:(n-e)/a+4,a/=u<.5?o+r:2-o-r,s*=60):a=u>0&&u<1?0:s,new rn(s,a,u,t.opacity)}function en(t,n,e,i){return 1===arguments.length?nn(t):new rn(t,n,e,null==i?1:i)}function rn(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function sn(t,n,e,i,r){var o=t*t,s=o*t;return((1-3*t+3*o-s)*n+(4-6*o+3*s)*e+(1+3*t+3*o-3*s)*i+s*r)/6}kt(Ut,It,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Yt,formatHex:Yt,formatHsl:function(){return nn(this).formatHsl()},formatRgb:Bt,toString:Bt}),kt(Qt,Wt,At(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Qt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Qt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jt,formatHex:Jt,formatRgb:Gt,toString:Gt})),kt(rn,en,At(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,i=e+(e<.5?e:1-e)*n,r=2*e-i;return new Qt(on(t>=240?t-240:t+120,r,i),on(t,r,i),on(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var an=function(t){return function(){return t}};function un(t,n){return function(e){return t+e*n}}function hn(t,n){var e=n-t;return e?un(t,e>180||e<-180?e-360*Math.round(e/360):e):an(isNaN(t)?n:t)}function cn(t){return 1==(t=+t)?ln:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(i){return Math.pow(t+i*n,e)}}(n,e,t):an(isNaN(n)?e:n)}}function ln(t,n){var e=n-t;return e?un(t,e):an(isNaN(t)?n:t)}var fn=function t(n){var e=cn(n);function i(t,n){var i=e((t=Wt(t)).r,(n=Wt(n)).r),r=e(t.g,n.g),o=e(t.b,n.b),s=ln(t.opacity,n.opacity);return function(n){return t.r=i(n),t.g=r(n),t.b=o(n),t.opacity=s(n),t+""}}return i.gamma=t,i}(1);function pn(t){return function(n){var e,i,r=n.length,o=new Array(r),s=new Array(r),a=new Array(r);for(e=0;e<r;++e)i=Wt(n[e]),o[e]=i.r||0,s[e]=i.g||0,a[e]=i.b||0;return o=t(o),s=t(s),a=t(a),i.opacity=1,function(t){return i.r=o(t),i.g=s(t),i.b=a(t),i+""}}}pn((function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),r=t[i],o=t[i+1],s=i>0?t[i-1]:2*r-o,a=i<n-1?t[i+2]:2*o-r;return sn((e-i/n)*n,s,r,o,a)}})),pn((function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),r=t[(i+n-1)%n],o=t[i%n],s=t[(i+1)%n],a=t[(i+2)%n];return sn((e-i/n)*n,r,o,s,a)}}));var _n=function(t,n){return n-=t=+t,function(e){return t+n*e}},dn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vn=new RegExp(dn.source,"g");var gn,yn,mn,xn,wn=function(t,n){var e,i,r,o=dn.lastIndex=vn.lastIndex=0,s=-1,a=[],u=[];for(t+="",n+="";(e=dn.exec(t))&&(i=vn.exec(n));)(r=i.index)>o&&(r=n.slice(o,r),a[s]?a[s]+=r:a[++s]=r),(e=e[0])===(i=i[0])?a[s]?a[s]+=i:a[++s]=i:(a[++s]=null,u.push({i:s,x:_n(e,i)})),o=vn.lastIndex;return o<n.length&&(r=n.slice(o),a[s]?a[s]+=r:a[++s]=r),a.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,i=0;i<n;++i)a[(e=u[i]).i]=e.x(t);return a.join("")})},bn=180/Math.PI,Mn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Sn=function(t,n,e,i,r,o){var s,a,u;return(s=Math.sqrt(t*t+n*n))&&(t/=s,n/=s),(u=t*e+n*i)&&(e-=t*u,i-=n*u),(a=Math.sqrt(e*e+i*i))&&(e/=a,i/=a,u/=a),t*i<n*e&&(t=-t,n=-n,u=-u,s=-s),{translateX:r,translateY:o,rotate:Math.atan2(n,t)*bn,skewX:Math.atan(u)*bn,scaleX:s,scaleY:a}};function Nn(t,n,e,i){function r(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],u=[];return o=t(o),s=t(s),function(t,i,r,o,s,a){if(t!==r||i!==o){var u=s.push("translate(",null,n,null,e);a.push({i:u-4,x:_n(t,r)},{i:u-2,x:_n(i,o)})}else(r||o)&&s.push("translate("+r+n+o+e)}(o.translateX,o.translateY,s.translateX,s.translateY,a,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(r(e)+"rotate(",null,i)-2,x:_n(t,n)})):n&&e.push(r(e)+"rotate("+n+i)}(o.rotate,s.rotate,a,u),function(t,n,e,o){t!==n?o.push({i:e.push(r(e)+"skewX(",null,i)-2,x:_n(t,n)}):n&&e.push(r(e)+"skewX("+n+i)}(o.skewX,s.skewX,a,u),function(t,n,e,i,o,s){if(t!==e||n!==i){var a=o.push(r(o)+"scale(",null,",",null,")");s.push({i:a-4,x:_n(t,e)},{i:a-2,x:_n(n,i)})}else 1===e&&1===i||o.push(r(o)+"scale("+e+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,u),o=s=null,function(t){for(var n,e=-1,i=u.length;++e<i;)a[(n=u[e]).i]=n.x(t);return a.join("")}}}var Cn=Nn((function(t){return"none"===t?Mn:(gn||(gn=document.createElement("DIV"),yn=document.documentElement,mn=document.defaultView),gn.style.transform=t,t=mn.getComputedStyle(yn.appendChild(gn),null).getPropertyValue("transform"),yn.removeChild(gn),t=t.slice(7,-1).split(","),Sn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),En=Nn((function(t){return null==t?Mn:(xn||(xn=document.createElementNS("http://www.w3.org/2000/svg","g")),xn.setAttribute("transform",t),(t=xn.transform.baseVal.consolidate())?(t=t.matrix,Sn(t.a,t.b,t.c,t.d,t.e,t.f)):Mn)}),", ",")",")");Math.SQRT2;function Tn(t){return function(n,e){var i=t((n=en(n)).h,(e=en(e)).h),r=ln(n.s,e.s),o=ln(n.l,e.l),s=ln(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=r(t),n.l=o(t),n.opacity=s(t),n+""}}}Tn(hn),Tn(ln);var kn=Math.PI/180,An=180/Math.PI,Un=.96422,Pn=1,Dn=.82521,Ln=4/29,Fn=6/29,Rn=3*Fn*Fn,zn=Fn*Fn*Fn;function On(t){if(t instanceof Hn)return new Hn(t.l,t.a,t.b,t.opacity);if(t instanceof $n)return Zn(t);t instanceof Qt||(t=Zt(t));var n,e,i=Bn(t.r),r=Bn(t.g),o=Bn(t.b),s=Vn((.2225045*i+.7168786*r+.0606169*o)/Pn);return i===r&&r===o?n=e=s:(n=Vn((.4360747*i+.3850649*r+.1430804*o)/Un),e=Vn((.0139322*i+.0971045*r+.7141733*o)/Dn)),new Hn(116*s-16,500*(n-s),200*(s-e),t.opacity)}function jn(t,n,e,i){return 1===arguments.length?On(t):new Hn(t,n,e,null==i?1:i)}function Hn(t,n,e,i){this.l=+t,this.a=+n,this.b=+e,this.opacity=+i}function Vn(t){return t>zn?Math.pow(t,1/3):t/Rn+Ln}function qn(t){return t>Fn?t*t*t:Rn*(t-Ln)}function Yn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Bn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function In(t){if(t instanceof $n)return new $n(t.h,t.c,t.l,t.opacity);if(t instanceof Hn||(t=On(t)),0===t.a&&0===t.b)return new $n(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*An;return new $n(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Xn(t,n,e,i){return 1===arguments.length?In(t):new $n(t,n,e,null==i?1:i)}function $n(t,n,e,i){this.h=+t,this.c=+n,this.l=+e,this.opacity=+i}function Zn(t){if(isNaN(t.h))return new Hn(t.l,0,0,t.opacity);var n=t.h*kn;return new Hn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}function Wn(t){return function(n,e){var i=t((n=Xn(n)).h,(e=Xn(e)).h),r=ln(n.c,e.c),o=ln(n.l,e.l),s=ln(n.opacity,e.opacity);return function(t){return n.h=i(t),n.c=r(t),n.l=o(t),n.opacity=s(t),n+""}}}kt(Hn,jn,At(Ut,{brighter:function(t){return new Hn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Hn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Qt(Yn(3.1338561*(n=Un*qn(n))-1.6168667*(t=Pn*qn(t))-.4906146*(e=Dn*qn(e))),Yn(-.9787684*n+1.9161415*t+.033454*e),Yn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),kt($n,Xn,At(Ut,{brighter:function(t){return new $n(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new $n(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Zn(this).rgb()}}));Wn(hn),Wn(ln);var Qn=-.29227,Jn=-.90649,Gn=1.97294,Kn=Gn*Jn,te=1.78277*Gn,ne=1.78277*Qn- -.14861*Jn;function ee(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof ie)return new ie(t.h,t.s,t.l,t.opacity);t instanceof Qt||(t=Zt(t));var n=t.r/255,e=t.g/255,i=t.b/255,r=(ne*i+Kn*n-te*e)/(ne+Kn-te),o=i-r,s=(Gn*(e-r)-Qn*o)/Jn,a=Math.sqrt(s*s+o*o)/(Gn*r*(1-r)),u=a?Math.atan2(s,o)*An-120:NaN;return new ie(u<0?u+360:u,a,r,t.opacity)}(t):new ie(t,n,e,null==i?1:i)}function ie(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function re(t){return function n(e){function i(n,i){var r=t((n=ee(n)).h,(i=ee(i)).h),o=ln(n.s,i.s),s=ln(n.l,i.l),a=ln(n.opacity,i.opacity);return function(t){return n.h=r(t),n.s=o(t),n.l=s(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,i.gamma=n,i}(1)}kt(ie,ee,At(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*kn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),i=Math.cos(t),r=Math.sin(t);return new Qt(255*(n+e*(-.14861*i+1.78277*r)),255*(n+e*(Qn*i+Jn*r)),255*(n+e*(Gn*i)),this.opacity)}}));re(hn),re(ln);var oe,se,ae=0,ue=0,he=0,ce=1e3,le=0,fe=0,pe=0,_e="object"==typeof performance&&performance.now?performance:Date,de="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ve(){return fe||(de(ge),fe=_e.now()+pe)}function ge(){fe=0}function ye(){this._call=this._time=this._next=null}function me(t,n,e){var i=new ye;return i.restart(t,n,e),i}function xe(){fe=(le=_e.now())+pe,ae=ue=0;try{!function(){ve(),++ae;for(var t,n=oe;n;)(t=fe-n._time)>=0&&n._call.call(null,t),n=n._next;--ae}()}finally{ae=0,function(){var t,n,e=oe,i=1/0;for(;e;)e._call?(i>e._time&&(i=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:oe=n);se=t,be(i)}(),fe=0}}function we(){var t=_e.now(),n=t-le;n>ce&&(pe-=n,le=t)}function be(t){ae||(ue&&(ue=clearTimeout(ue)),t-fe>24?(t<1/0&&(ue=setTimeout(xe,t-_e.now()-pe)),he&&(he=clearInterval(he))):(he||(le=_e.now(),he=setInterval(we,ce)),ae=1,de(xe)))}ye.prototype=me.prototype={constructor:ye,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ve():+e)+(null==n?0:+n),this._next||se===this||(se?se._next=this:oe=this,se=this),this._call=t,this._time=e,be()},stop:function(){this._call&&(this._call=null,this._time=1/0,be())}};var Me=function(t,n,e){var i=new ye;return n=null==n?0:+n,i.restart((function(e){i.stop(),t(e+n)}),n,e),i},Se=_("start","end","cancel","interrupt"),Ne=[],Ce=0,Ee=1,Te=2,ke=3,Ae=4,Ue=5,Pe=6,De=function(t,n,e,i,r,o){var s=t.__transition;if(s){if(e in s)return}else t.__transition={};!function(t,n,e){var i,r=t.__transition;function o(u){var h,c,l,f;if(e.state!==Ee)return a();for(h in r)if((f=r[h]).name===e.name){if(f.state===ke)return Me(o);f.state===Ae?(f.state=Pe,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete r[h]):+h<n&&(f.state=Pe,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete r[h])}if(Me((function(){e.state===ke&&(e.state=Ae,e.timer.restart(s,e.delay,e.time),s(u))})),e.state=Te,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Te){for(e.state=ke,i=new Array(l=e.tween.length),h=0,c=-1;h<l;++h)(f=e.tween[h].value.call(t,t.__data__,e.index,e.group))&&(i[++c]=f);i.length=c+1}}function s(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Ue,1),o=-1,s=i.length;++o<s;)i[o].call(t,r);e.state===Ue&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var i in e.state=Pe,e.timer.stop(),delete r[n],r)return;delete t.__transition}r[n]=e,e.timer=me((function(t){e.state=Ee,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:i,group:r,on:Se,tween:Ne,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ce})};function Le(t,n){var e=Re(t,n);if(e.state>Ce)throw new Error("too late; already scheduled");return e}function Fe(t,n){var e=Re(t,n);if(e.state>ke)throw new Error("too late; already running");return e}function Re(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ze=function(t,n){var e,i,r,o=t.__transition,s=!0;if(o){for(r in n=null==n?null:n+"",o)(e=o[r]).name===n?(i=e.state>Te&&e.state<Ue,e.state=Pe,e.timer.stop(),e.on.call(i?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[r]):s=!1;s&&delete t.__transition}};function Oe(t,n){var e,i;return function(){var r=Fe(this,t),o=r.tween;if(o!==e)for(var s=0,a=(i=e=o).length;s<a;++s)if(i[s].name===n){(i=i.slice()).splice(s,1);break}r.tween=i}}function je(t,n,e){var i,r;if("function"!=typeof e)throw new Error;return function(){var o=Fe(this,t),s=o.tween;if(s!==i){r=(i=s).slice();for(var a={name:n,value:e},u=0,h=r.length;u<h;++u)if(r[u].name===n){r[u]=a;break}u===h&&r.push(a)}o.tween=r}}function He(t,n,e){var i=t._id;return t.each((function(){var t=Fe(this,i);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Re(t,i).value[n]}}var Ve=function(t,n){var e;return("number"==typeof n?_n:n instanceof It?fn:(e=It(n))?(n=e,fn):wn)(t,n)};function qe(t){return function(){this.removeAttribute(t)}}function Ye(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Be(t,n,e){var i,r,o=e+"";return function(){var s=this.getAttribute(t);return s===o?null:s===i?r:r=n(i=s,e)}}function Ie(t,n,e){var i,r,o=e+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===i?r:r=n(i=s,e)}}function Xe(t,n,e){var i,r,o;return function(){var s,a,u=e(this);if(null!=u)return(s=this.getAttribute(t))===(a=u+"")?null:s===i&&a===r?o:(r=a,o=n(i=s,u));this.removeAttribute(t)}}function $e(t,n,e){var i,r,o;return function(){var s,a,u=e(this);if(null!=u)return(s=this.getAttributeNS(t.space,t.local))===(a=u+"")?null:s===i&&a===r?o:(r=a,o=n(i=s,u));this.removeAttributeNS(t.space,t.local)}}function Ze(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,r)),e}return r._value=n,r}function We(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,r)),e}return r._value=n,r}function Qe(t,n){return function(){Le(this,t).delay=+n.apply(this,arguments)}}function Je(t,n){return n=+n,function(){Le(this,t).delay=n}}function Ge(t,n){return function(){Fe(this,t).duration=+n.apply(this,arguments)}}function Ke(t,n){return n=+n,function(){Fe(this,t).duration=n}}function ti(t,n){if("function"!=typeof n)throw new Error;return function(){Fe(this,t).ease=n}}function ni(t,n,e){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Le:Fe;return function(){var s=o(this,t),a=s.on;a!==i&&(r=(i=a).copy()).on(n,e),s.on=r}}var ei=Nt.prototype.constructor;function ii(t){return function(){this.style.removeProperty(t)}}function ri(t,n,e){var i,r;function o(){var o=n.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,n,e){return function(i){this.style.setProperty(t,n(i),e)}}(t,o,e)),i}return o._value=n,o}var oi=0;function si(t,n,e,i){this._groups=t,this._parents=n,this._name=e,this._id=i}function ai(){return++oi}var ui=Nt.prototype;si.prototype=function(t){return Nt().transition(t)}.prototype={constructor:si,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=b(t));for(var i=this._groups,r=i.length,o=new Array(r),s=0;s<r;++s)for(var a,u,h=i[s],c=h.length,l=o[s]=new Array(c),f=0;f<c;++f)(a=h[f])&&(u=t.call(a,a.__data__,f,h))&&("__data__"in a&&(u.__data__=a.__data__),l[f]=u,De(l[f],n,e,f,l,Re(a,e)));return new si(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=S(t));for(var i=this._groups,r=i.length,o=[],s=[],a=0;a<r;++a)for(var u,h=i[a],c=h.length,l=0;l<c;++l)if(u=h[l]){for(var f,p=t.call(u,u.__data__,l,h),_=Re(u,e),d=0,v=p.length;d<v;++d)(f=p[d])&&De(f,n,e,d,p,_);o.push(p),s.push(u)}return new si(o,s,n,e)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,s=n[r],a=s.length,u=i[r]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&u.push(o);return new si(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var u,h=n[a],c=e[a],l=h.length,f=s[a]=new Array(l),p=0;p<l;++p)(u=h[p]||c[p])&&(f[p]=u);for(;a<i;++a)s[a]=n[a];return new si(s,this._parents,this._name,this._id)},selection:function(){return new ei(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ai(),i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],u=a.length,h=0;h<u;++h)if(s=a[h]){var c=Re(s,n);De(s,t,e,h,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new si(i,this._parents,t,e)},call:ui.call,nodes:ui.nodes,node:ui.node,size:ui.size,empty:ui.empty,each:ui.each,on:function(t,n){var e=this._id;return arguments.length<2?Re(this.node(),e).on.on(t):this.each(ni(e,t,n))},attr:function(t,n){var e=g(t),i="transform"===e?En:Ve;return this.attrTween(t,"function"==typeof n?(e.local?$e:Xe)(e,i,He(this,"attr."+t,n)):null==n?(e.local?Ye:qe)(e):(e.local?Ie:Be)(e,i,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=g(t);return this.tween(e,(i.local?Ze:We)(i,n))},style:function(t,n,e){var i="transform"==(t+="")?Cn:Ve;return null==n?this.styleTween(t,function(t,n){var e,i,r;return function(){var o=q(this,t),s=(this.style.removeProperty(t),q(this,t));return o===s?null:o===e&&s===i?r:r=n(e=o,i=s)}}(t,i)).on("end.style."+t,ii(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var i,r,o;return function(){var s=q(this,t),a=e(this),u=a+"";return null==a&&(this.style.removeProperty(t),u=a=q(this,t)),s===u?null:s===i&&u===r?o:(r=u,o=n(i=s,a))}}(t,i,He(this,"style."+t,n))).each(function(t,n){var e,i,r,o,s="style."+n,a="end."+s;return function(){var u=Fe(this,t),h=u.on,c=null==u.value[s]?o||(o=ii(n)):void 0;h===e&&r===c||(i=(e=h).copy()).on(a,r=c),u.on=i}}(this._id,t)):this.styleTween(t,function(t,n,e){var i,r,o=e+"";return function(){var s=q(this,t);return s===o?null:s===i?r:r=n(i=s,e)}}(t,i,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,ri(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(He(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var i,r=Re(this.node(),e).tween,o=0,s=r.length;o<s;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==n?Oe:je)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Qe:Je)(n,t)):Re(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ge:Ke)(n,t)):Re(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ti(n,t)):Re(this.node(),n).ease},end:function(){var t,n,e=this,i=e._id,r=e.size();return new Promise((function(o,s){var a={value:s},u={value:function(){0==--r&&o()}};e.each((function(){var e=Fe(this,i),r=e.on;r!==t&&((n=(t=r).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(u)),e.on=n}))}))}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var hi=2*Math.PI,ci=(function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=hi);function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}return r.amplitude=function(n){return t(n,e*hi)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function li(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ci.time=ve(),ci;return e}Nt.prototype.interrupt=function(t){return this.each((function(){ze(this,t)}))},Nt.prototype.transition=function(t){var n,e;t instanceof si?(n=t._id,t=t._name):(n=ai(),(e=ci).time=ve(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],u=a.length,h=0;h<u;++h)(s=a[h])&&De(s,t,n,h,a,e||li(s,n));return new si(i,this._parents,t,n)};function fi(t){return[+t[0],+t[1]]}function pi(t){return[fi(t[0]),fi(t[1])]}["w","e"].map(_i),["n","s"].map(_i),["n","w","e","s","nw","ne","sw","se"].map(_i);function _i(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var di=Math.PI,vi=2*di,gi=vi-1e-6;function yi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function mi(){return new yi}yi.prototype=mi.prototype={constructor:yi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,i){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+i)},bezierCurveTo:function(t,n,e,i,r,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +i+","+(this._x1=+r)+","+(this._y1=+o)},arcTo:function(t,n,e,i,r){t=+t,n=+n,e=+e,i=+i,r=+r;var o=this._x1,s=this._y1,a=e-t,u=i-n,h=o-t,c=s-n,l=h*h+c*c;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(c*a-u*h)>1e-6&&r){var f=e-o,p=i-s,_=a*a+u*u,d=f*f+p*p,v=Math.sqrt(_),g=Math.sqrt(l),y=r*Math.tan((di-Math.acos((_+l-d)/(2*v*g)))/2),m=y/g,x=y/v;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*h)+","+(n+m*c)),this._+="A"+r+","+r+",0,0,"+ +(c*f>h*p)+","+(this._x1=t+x*a)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,i,r,o){t=+t,n=+n,o=!!o;var s=(e=+e)*Math.cos(i),a=e*Math.sin(i),u=t+s,h=n+a,c=1^o,l=o?i-r:r-i;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+h:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+u+","+h),e&&(l<0&&(l=l%vi+vi),l>gi?this._+="A"+e+","+e+",0,1,"+c+","+(t-s)+","+(n-a)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=h):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=di)+","+c+","+(this._x1=t+e*Math.cos(r))+","+(this._y1=n+e*Math.sin(r))))},rect:function(t,n,e,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +i+"h"+-e+"Z"},toString:function(){return this._}};function xi(){}function wi(t,n){var e=new xi;if(t instanceof xi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var i,r=-1,o=t.length;if(null==n)for(;++r<o;)e.set(r,t[r]);else for(;++r<o;)e.set(n(i=t[r],r,t),i)}else if(t)for(var s in t)e.set(s,t[s]);return e}xi.prototype=wi.prototype={constructor:xi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var bi=wi;function Mi(){}var Si=bi.prototype;function Ni(t,n){var e=new Mi;if(t instanceof Mi)t.each((function(t){e.add(t)}));else if(t){var i=-1,r=t.length;if(null==n)for(;++i<r;)e.add(t[i]);else for(;++i<r;)e.add(n(t[i],i,t))}return e}Mi.prototype=Ni.prototype={constructor:Mi,has:Si.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Si.remove,clear:Si.clear,values:Si.keys,size:Si.size,empty:Si.empty,each:Si.each};Array.prototype.slice;var Ci={},Ei={},Ti=34,ki=10,Ai=13;function Ui(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function Pi(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var i in t)i in n||e.push(n[i]=i)})),e}function Di(t,n){var e=t+"",i=e.length;return i<n?new Array(n-i+1).join(0)+e:e}function Li(t){var n,e=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Di(-n,6):n>9999?"+"+Di(n,6):Di(n,4))+"-"+Di(t.getUTCMonth()+1,2)+"-"+Di(t.getUTCDate(),2)+(o?"T"+Di(e,2)+":"+Di(i,2)+":"+Di(r,2)+"."+Di(o,3)+"Z":r?"T"+Di(e,2)+":"+Di(i,2)+":"+Di(r,2)+"Z":i||e?"T"+Di(e,2)+":"+Di(i,2)+"Z":"")}var Fi=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function i(t,n){var i,r=[],o=t.length,s=0,a=0,u=o<=0,h=!1;function c(){if(u)return Ei;if(h)return h=!1,Ci;var n,i,r=s;if(t.charCodeAt(r)===Ti){for(;s++<o&&t.charCodeAt(s)!==Ti||t.charCodeAt(++s)===Ti;);return(n=s)>=o?u=!0:(i=t.charCodeAt(s++))===ki?h=!0:i===Ai&&(h=!0,t.charCodeAt(s)===ki&&++s),t.slice(r+1,n-1).replace(/""/g,'"')}for(;s<o;){if((i=t.charCodeAt(n=s++))===ki)h=!0;else if(i===Ai)h=!0,t.charCodeAt(s)===ki&&++s;else if(i!==e)continue;return t.slice(r,n)}return u=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===ki&&--o,t.charCodeAt(o-1)===Ai&&--o;(i=c())!==Ei;){for(var l=[];i!==Ci&&i!==Ei;)l.push(i),i=c();n&&null==(l=n(l,a++))||r.push(l)}return r}function r(n,e){return n.map((function(n){return e.map((function(t){return s(n[t])})).join(t)}))}function o(n){return n.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?Li(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,o=i(t,(function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=Ui(t);return function(i,r){return n(e(i),r,t)}}(t,n):Ui(t)}));return o.columns=r||[],o},parseRows:i,format:function(n,e){return null==e&&(e=Pi(n)),[e.map(s).join(t)].concat(r(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Pi(t)),r(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Ri=Fi(","),zi=Ri.parse,Oi=(Ri.parseRows,Ri.format,Ri.formatBody,Ri.formatRows,Fi("\t")),ji=Oi.parse;Oi.parseRows,Oi.format,Oi.formatBody,Oi.formatRows;function Hi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Vi=function(t,n){return fetch(t,n).then(Hi)};function qi(t){return function(n,e,i){return 2===arguments.length&&"function"==typeof e&&(i=e,e=void 0),Vi(n,e).then((function(n){return t(n,i)}))}}var Yi=qi(zi);qi(ji);function Bi(t){return function(n,e){return Vi(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Bi("application/xml"),Bi("text/html"),Bi("image/svg+xml");function Ii(t,n,e,i){if(isNaN(n)||isNaN(e))return t;var r,o,s,a,u,h,c,l,f,p=t._root,_={data:i},d=t._x0,v=t._y0,g=t._x1,y=t._y1;if(!p)return t._root=_,t;for(;p.length;)if((h=n>=(o=(d+g)/2))?d=o:g=o,(c=e>=(s=(v+y)/2))?v=s:y=s,r=p,!(p=p[l=c<<1|h]))return r[l]=_,t;if(a=+t._x.call(null,p.data),u=+t._y.call(null,p.data),n===a&&e===u)return _.next=p,r?r[l]=_:t._root=_,t;do{r=r?r[l]=new Array(4):t._root=new Array(4),(h=n>=(o=(d+g)/2))?d=o:g=o,(c=e>=(s=(v+y)/2))?v=s:y=s}while((l=c<<1|h)==(f=(u>=s)<<1|a>=o));return r[f]=p,r[l]=_,t}var Xi=function(t,n,e,i,r){this.node=t,this.x0=n,this.y0=e,this.x1=i,this.y1=r};function $i(t){return t[0]}function Zi(t){return t[1]}function Wi(t,n,e){var i=new Qi(null==n?$i:n,null==e?Zi:e,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Qi(t,n,e,i,r,o){this._x=t,this._y=n,this._x0=e,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function Ji(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Gi=Wi.prototype=Qi.prototype;Gi.copy=function(){var t,n,e=new Qi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return e;if(!i.length)return e._root=Ji(i),e;for(t=[{source:i,target:e._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(n=i.source[r])&&(n.length?t.push({source:n,target:i.target[r]=new Array(4)}):i.target[r]=Ji(n));return e},Gi.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ii(this.cover(n,e),n,e,t)},Gi.addAll=function(t){var n,e,i,r,o=t.length,s=new Array(o),a=new Array(o),u=1/0,h=1/0,c=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(r=+this._y.call(null,n))||(s[e]=i,a[e]=r,i<u&&(u=i),i>c&&(c=i),r<h&&(h=r),r>l&&(l=r));if(u>c||h>l)return this;for(this.cover(u,h).cover(c,l),e=0;e<o;++e)Ii(this,s[e],a[e],t[e]);return this},Gi.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(e))r=(e=Math.floor(t))+1,o=(i=Math.floor(n))+1;else{for(var s,a,u=r-e,h=this._root;e>t||t>=r||i>n||n>=o;)switch(a=(n<i)<<1|t<e,(s=new Array(4))[a]=h,h=s,u*=2,a){case 0:r=e+u,o=i+u;break;case 1:e=r-u,o=i+u;break;case 2:r=e+u,i=o-u;break;case 3:e=r-u,i=o-u}this._root&&this._root.length&&(this._root=h)}return this._x0=e,this._y0=i,this._x1=r,this._y1=o,this},Gi.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Gi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Gi.find=function(t,n,e){var i,r,o,s,a,u,h,c=this._x0,l=this._y0,f=this._x1,p=this._y1,_=[],d=this._root;for(d&&_.push(new Xi(d,c,l,f,p)),null==e?e=1/0:(c=t-e,l=n-e,f=t+e,p=n+e,e*=e);u=_.pop();)if(!(!(d=u.node)||(r=u.x0)>f||(o=u.y0)>p||(s=u.x1)<c||(a=u.y1)<l))if(d.length){var v=(r+s)/2,g=(o+a)/2;_.push(new Xi(d[3],v,g,s,a),new Xi(d[2],r,g,v,a),new Xi(d[1],v,o,s,g),new Xi(d[0],r,o,v,g)),(h=(n>=g)<<1|t>=v)&&(u=_[_.length-1],_[_.length-1]=_[_.length-1-h],_[_.length-1-h]=u)}else{var y=t-+this._x.call(null,d.data),m=n-+this._y.call(null,d.data),x=y*y+m*m;if(x<e){var w=Math.sqrt(e=x);c=t-w,l=n-w,f=t+w,p=n+w,i=d.data}}return i},Gi.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var n,e,i,r,o,s,a,u,h,c,l,f,p=this._root,_=this._x0,d=this._y0,v=this._x1,g=this._y1;if(!p)return this;if(p.length)for(;;){if((h=o>=(a=(_+v)/2))?_=a:v=a,(c=s>=(u=(d+g)/2))?d=u:g=u,n=p,!(p=p[l=c<<1|h]))return this;if(!p.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,f=l)}for(;p.data!==t;)if(i=p,!(p=p.next))return this;return(r=p.next)&&delete p.next,i?(r?i.next=r:delete i.next,this):n?(r?n[l]=r:delete n[l],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[f]=p:this._root=p),this):(this._root=r,this)},Gi.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Gi.root=function(){return this._root},Gi.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Gi.visit=function(t){var n,e,i,r,o,s,a=[],u=this._root;for(u&&a.push(new Xi(u,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(u=n.node,i=n.x0,r=n.y0,o=n.x1,s=n.y1)&&u.length){var h=(i+o)/2,c=(r+s)/2;(e=u[3])&&a.push(new Xi(e,h,c,o,s)),(e=u[2])&&a.push(new Xi(e,i,c,h,s)),(e=u[1])&&a.push(new Xi(e,h,r,o,c)),(e=u[0])&&a.push(new Xi(e,i,r,h,c))}return this},Gi.visitAfter=function(t){var n,e=[],i=[];for(this._root&&e.push(new Xi(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var r=n.node;if(r.length){var o,s=n.x0,a=n.y0,u=n.x1,h=n.y1,c=(s+u)/2,l=(a+h)/2;(o=r[0])&&e.push(new Xi(o,s,a,c,l)),(o=r[1])&&e.push(new Xi(o,c,a,u,l)),(o=r[2])&&e.push(new Xi(o,s,l,c,h)),(o=r[3])&&e.push(new Xi(o,c,l,u,h))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Gi.x=function(t){return arguments.length?(this._x=t,this):this._x},Gi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ki=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,i=t.slice(0,e);return[i.length>1?i[0]+i.slice(2):i,+t.slice(e+1)]},tr=function(t){return(t=Ki(Math.abs(t)))?t[1]:NaN},nr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function er(t){if(!(n=nr.exec(t)))throw new Error("invalid format: "+t);var n;return new ir({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ir(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}er.prototype=ir.prototype,ir.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var rr,or,sr=function(t){t:for(var n,e=t.length,i=1,r=-1;i<e;++i)switch(t[i]){case".":r=n=i;break;case"0":0===r&&(r=i),n=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(n+1):t},ar=function(t,n){var e=Ki(t,n);if(!e)return t+"";var i=e[0],r=e[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},ur={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ar(100*t,n)},r:ar,s:function(t,n){var e=Ki(t,n);if(!e)return t+"";var i=e[0],r=e[1],o=r-(rr=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return o===s?i:o>s?i+new Array(o-s+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+Ki(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},hr=function(t){return t},cr=Array.prototype.map,lr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];or=function(t){var n,e,i=void 0===t.grouping||void 0===t.thousands?hr:(n=cr.call(t.grouping,Number),e=t.thousands+"",function(t,i){for(var r=t.length,o=[],s=0,a=n[0],u=0;r>0&&a>0&&(u+a+1>i&&(a=Math.max(1,i-u)),o.push(t.substring(r-=a,r+a)),!((u+=a+1)>i));)a=n[s=(s+1)%n.length];return o.reverse().join(e)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?hr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(cr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",h=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=er(t)).fill,e=t.align,l=t.sign,f=t.symbol,p=t.zero,_=t.width,d=t.comma,v=t.precision,g=t.trim,y=t.type;"n"===y?(d=!0,y="g"):ur[y]||(void 0===v&&(v=12),g=!0,y="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var m="$"===f?r:"#"===f&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===f?o:/[%p]/.test(y)?u:"",w=ur[y],b=/[defgprs%]/.test(y);function M(t){var r,o,u,f=m,M=x;if("c"===y)M=w(t)+M,t="";else{var S=(t=+t)<0;if(t=isNaN(t)?c:w(Math.abs(t),v),g&&(t=sr(t)),S&&0==+t&&(S=!1),f=(S?"("===l?l:h:"-"===l||"("===l?"":l)+f,M=("s"===y?lr[8+rr/3]:"")+M+(S&&"("===l?")":""),b)for(r=-1,o=t.length;++r<o;)if(48>(u=t.charCodeAt(r))||u>57){M=(46===u?s+t.slice(r+1):t.slice(r))+M,t=t.slice(0,r);break}}d&&!p&&(t=i(t,1/0));var N=f.length+t.length+M.length,C=N<_?new Array(_-N+1).join(n):"";switch(d&&p&&(t=i(C+t,C.length?_-M.length:1/0),C=""),e){case"<":t=f+t+M+C;break;case"=":t=f+C+t+M;break;case"^":t=C.slice(0,N=C.length>>1)+f+t+M+C.slice(N);break;default:t=C+f+t+M}return a(t)}return v=void 0===v?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=er(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(tr(n)/3))),r=Math.pow(10,-i),o=lr[8+i/3];return function(t){return e(r*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),or.format,or.formatPrefix;var fr=function(){return new pr};function pr(){this.reset()}pr.prototype={constructor:pr,reset:function(){this.s=this.t=0},add:function(t){dr(_r,t,this.t),dr(this,_r.s,this.s),this.s?this.t+=_r.t:this.s=_r.t},valueOf:function(){return this.s}};var _r=new pr;function dr(t,n,e){var i=t.s=n+e,r=i-n,o=i-r;t.t=n-o+(e-r)}var vr=1e-6,gr=1e-12,yr=Math.PI,mr=yr/2,xr=yr/4,wr=2*yr,br=yr/180,Mr=Math.abs,Sr=Math.atan,Nr=Math.atan2,Cr=Math.cos,Er=(Math.ceil,Math.exp),Tr=(Math.floor,Math.log),kr=(Math.pow,Math.sin),Ar=Math.sign||function(t){return t>0?1:t<0?-1:0},Ur=Math.sqrt,Pr=Math.tan;function Dr(t){return t>1?0:t<-1?yr:Math.acos(t)}function Lr(t){return t>1?mr:t<-1?-mr:Math.asin(t)}function Fr(){}fr(),fr();function Rr(t){var n=t[0],e=t[1],i=Cr(e);return[i*Cr(n),i*kr(n),kr(e)]}function zr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Or(t){var n=Ur(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}fr();function jr(t,n){return[Mr(t)>yr?t+Math.round(-t/wr)*wr:t,n]}jr.invert=jr;var Hr=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Fr,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Vr=function(t,n){return Mr(t[0]-n[0])<vr&&Mr(t[1]-n[1])<vr};function qr(t,n,e,i){this.x=t,this.z=n,this.o=e,this.e=i,this.v=!1,this.n=this.p=null}var Yr=function(t,n,e,i,r){var o,s,a=[],u=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],s=t[n];if(Vr(i,s)){for(r.lineStart(),o=0;o<n;++o)r.point((i=t[o])[0],i[1]);r.lineEnd()}else a.push(e=new qr(i,t,null,!0)),u.push(e.o=new qr(i,null,e,!1)),a.push(e=new qr(s,t,null,!1)),u.push(e.o=new qr(s,null,e,!0))}})),a.length){for(u.sort(n),Br(a),Br(u),o=0,s=u.length;o<s;++o)u[o].e=e=!e;for(var h,c,l=a[0];;){for(var f=l,p=!0;f.v;)if((f=f.n)===l)return;h=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(o=0,s=h.length;o<s;++o)r.point((c=h[o])[0],c[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(p)for(h=f.p.z,o=h.length-1;o>=0;--o)r.point((c=h[o])[0],c[1]);else i(f.x,f.p.x,-1,r);f=f.p}h=(f=f.o).z,p=!p}while(!f.v);r.lineEnd()}}};function Br(t){if(n=t.length){for(var n,e,i=0,r=t[0];++i<n;)r.n=e=t[i],e.p=r,r=e;r.n=e=t[0],e.p=r}}var Ir=fr();function Xr(t){return Mr(t[0])<=yr?t[0]:Ar(t[0])*((Mr(t[0])+yr)%wr-yr)}var $r=function(t,n){var e=Xr(n),i=n[1],r=kr(i),o=[kr(e),-Cr(e),0],s=0,a=0;Ir.reset(),1===r?i=mr+vr:-1===r&&(i=-mr-vr);for(var u=0,h=t.length;u<h;++u)if(l=(c=t[u]).length)for(var c,l,f=c[l-1],p=Xr(f),_=f[1]/2+xr,d=kr(_),v=Cr(_),g=0;g<l;++g,p=m,d=w,v=b,f=y){var y=c[g],m=Xr(y),x=y[1]/2+xr,w=kr(x),b=Cr(x),M=m-p,S=M>=0?1:-1,N=S*M,C=N>yr,E=d*w;if(Ir.add(Nr(E*S*kr(N),v*b+E*Cr(N))),s+=C?M+S*wr:M,C^p>=e^m>=e){var T=zr(Rr(f),Rr(y));Or(T);var k=zr(o,T);Or(k);var A=(C^M>=0?-1:1)*Lr(k[2]);(i>A||i===A&&(T[0]||T[1]))&&(a+=C^M>=0?1:-1)}}return(s<-vr||s<vr&&Ir<-vr)^1&a},Zr=function(t,n,e,i){return function(r){var o,s,u,h=n(r),c=Hr(),l=n(c),f=!1,p={point:_,lineStart:v,lineEnd:g,polygonStart:function(){p.point=y,p.lineStart=m,p.lineEnd=x,s=[],o=[]},polygonEnd:function(){p.point=_,p.lineStart=v,p.lineEnd=g,s=a(s);var t=$r(o,i);s.length?(f||(r.polygonStart(),f=!0),Yr(s,Qr,t,e,r)):t&&(f||(r.polygonStart(),f=!0),r.lineStart(),e(null,null,1,r),r.lineEnd()),f&&(r.polygonEnd(),f=!1),s=o=null},sphere:function(){r.polygonStart(),r.lineStart(),e(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function _(n,e){t(n,e)&&r.point(n,e)}function d(t,n){h.point(t,n)}function v(){p.point=d,h.lineStart()}function g(){p.point=_,h.lineEnd()}function y(t,n){u.push([t,n]),l.point(t,n)}function m(){l.lineStart(),u=[]}function x(){y(u[0][0],u[0][1]),l.lineEnd();var t,n,e,i,a=l.clean(),h=c.result(),p=h.length;if(u.pop(),o.push(u),u=null,p)if(1&a){if((n=(e=h[0]).length-1)>0){for(f||(r.polygonStart(),f=!0),r.lineStart(),t=0;t<n;++t)r.point((i=e[t])[0],i[1]);r.lineEnd()}}else p>1&&2&a&&h.push(h.pop().concat(h.shift())),s.push(h.filter(Wr))}return p}};function Wr(t){return t.length>1}function Qr(t,n){return((t=t.x)[0]<0?t[1]-mr-vr:mr-t[1])-((n=n.x)[0]<0?n[1]-mr-vr:mr-n[1])}Zr((function(){return!0}),(function(t){var n,e=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,s){var a=o>0?yr:-yr,u=Mr(o-e);Mr(u-yr)<vr?(t.point(e,i=(i+s)/2>0?mr:-mr),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(a,i),t.point(o,i),n=0):r!==a&&u>=yr&&(Mr(e-r)<vr&&(e-=r*vr),Mr(o-a)<vr&&(o-=a*vr),i=function(t,n,e,i){var r,o,s=kr(t-e);return Mr(s)>vr?Sr((kr(n)*(o=Cr(i))*kr(e)-kr(i)*(r=Cr(n))*kr(t))/(r*o*s)):(n+i)/2}(e,i,o,s),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(a,i),n=0),t.point(e=o,i=s),r=a},lineEnd:function(){t.lineEnd(),e=i=NaN},clean:function(){return 2-n}}}),(function(t,n,e,i){var r;if(null==t)r=e*mr,i.point(-yr,r),i.point(0,r),i.point(yr,r),i.point(yr,0),i.point(yr,-r),i.point(0,-r),i.point(-yr,-r),i.point(-yr,0),i.point(-yr,r);else if(Mr(t[0]-n[0])>vr){var o=t[0]<n[0]?yr:-yr;r=e*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(n[0],n[1])}),[-yr,-mr]);fr();fr(),fr();function Jr(t){this._context=t}Jr.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,wr)}},result:Fr};fr();function Gr(){this._string=[]}function Kr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Gr.prototype={_radius:4.5,_circle:Kr(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Kr(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function to(t){return function(n){var e=new no;for(var i in t)e[i]=t[i];return e.stream=n,e}}function no(){}no.prototype={constructor:no,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Cr(30*br);to({point:function(t,n){this.stream.point(t*br,n*br)}});function eo(t){return function(n,e){var i=Cr(n),r=Cr(e),o=t(i*r);return[o*r*kr(n),o*kr(e)]}}function io(t){return function(n,e){var i=Ur(n*n+e*e),r=t(i),o=kr(r),s=Cr(r);return[Nr(n*o,i*s),Lr(i&&e*o/i)]}}var ro=eo((function(t){return Ur(2/(1+t))}));ro.invert=io((function(t){return 2*Lr(t/2)}));var oo=eo((function(t){return(t=Dr(t))&&t/kr(t)}));oo.invert=io((function(t){return t}));function so(t,n){return[t,Tr(Pr((mr+n)/2))]}so.invert=function(t,n){return[t,2*Sr(Er(n))-mr]};function ao(t,n){return[t,n]}ao.invert=ao;var uo=1.340264,ho=-.081106,co=893e-6,lo=.003796,fo=Ur(3)/2;function po(t,n){var e=Lr(fo*kr(n)),i=e*e,r=i*i*i;return[t*Cr(e)/(fo*(uo+3*ho*i+r*(7*co+9*lo*i))),e*(uo+ho*i+r*(co+lo*i))]}po.invert=function(t,n){for(var e,i=n,r=i*i,o=r*r*r,s=0;s<12&&(o=(r=(i-=e=(i*(uo+ho*r+o*(co+lo*r))-n)/(uo+3*ho*r+o*(7*co+9*lo*r)))*i)*r*r,!(Mr(e)<gr));++s);return[fo*t*(uo+3*ho*r+o*(7*co+9*lo*r))/Cr(i),Lr(kr(i)/fo)]};function _o(t,n){var e=Cr(n),i=Cr(t)*e;return[e*kr(t)/i,kr(n)/i]}_o.invert=io(Sr);function vo(t,n){var e=n*n,i=e*e;return[t*(.8707-.131979*e+i*(i*(.003971*e-.001529*i)-.013791)),n*(1.007226+e*(.015085+i*(.028874*e-.044475-.005916*i)))]}vo.invert=function(t,n){var e,i=n,r=25;do{var o=i*i,s=o*o;i-=e=(i*(1.007226+o*(.015085+s*(.028874*o-.044475-.005916*s)))-n)/(1.007226+o*(.045255+s*(.259866*o-.311325-.005916*11*s)))}while(Mr(e)>vr&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]};function go(t,n){return[Cr(n)*kr(t),kr(n)]}go.invert=io(Lr);function yo(t,n){var e=Cr(n),i=1+Cr(t)*e;return[e*kr(t)/i,kr(n)/i]}yo.invert=io((function(t){return 2*Sr(t)}));function mo(t,n){return[Tr(Pr((mr+n)/2)),-t]}mo.invert=function(t,n){return[-n,2*Sr(Er(t))-mr]};function xo(t){var n=0,e=t.children,i=e&&e.length;if(i)for(;--i>=0;)n+=e[i].value;else n=1;t.value=n}function wo(t,n){var e,i,r,o,s,a=new No(t),u=+t.value&&(a.value=t.value),h=[a];for(null==n&&(n=bo);e=h.pop();)if(u&&(e.value=+e.data.value),(r=n(e.data))&&(s=r.length))for(e.children=new Array(s),o=s-1;o>=0;--o)h.push(i=e.children[o]=new No(r[o])),i.parent=e,i.depth=e.depth+1;return a.eachBefore(So)}function bo(t){return t.children}function Mo(t){t.data=t.data.data}function So(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function No(t){this.data=t,this.depth=this.height=0,this.parent=null}No.prototype=wo.prototype={constructor:No,count:function(){return this.eachAfter(xo)},each:function(t){var n,e,i,r,o=this,s=[o];do{for(n=s.reverse(),s=[];o=n.pop();)if(t(o),e=o.children)for(i=0,r=e.length;i<r;++i)s.push(e[i])}while(s.length);return this},eachAfter:function(t){for(var n,e,i,r=this,o=[r],s=[];r=o.pop();)if(s.push(r),n=r.children)for(e=0,i=n.length;e<i;++e)o.push(n[e]);for(;r=s.pop();)t(r);return this},eachBefore:function(t){for(var n,e,i=this,r=[i];i=r.pop();)if(t(i),n=i.children)for(e=n.length-1;e>=0;--e)r.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,i=n.children,r=i&&i.length;--r>=0;)e+=i[r].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),i=n.ancestors(),r=null;t=e.pop(),n=i.pop();for(;t===n;)r=t,t=e.pop(),n=i.pop();return r}(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var r=i.length;t!==e;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return wo(this).eachBefore(Mo)}};Array.prototype.slice;var Co=function(t,n,e,i,r){for(var o,s=t.children,a=-1,u=s.length,h=t.value&&(i-n)/t.value;++a<u;)(o=s[a]).y0=e,o.y1=r,o.x0=n,o.x1=n+=o.value*h};function Eo(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Eo.prototype=Object.create(No.prototype);var To=function(t,n,e,i,r){for(var o,s=t.children,a=-1,u=s.length,h=t.value&&(r-e)/t.value;++a<u;)(o=s[a]).x0=n,o.x1=i,o.y0=e,o.y1=e+=o.value*h},ko=(1+Math.sqrt(5))/2;function Ao(t,n,e,i,r,o){for(var s,a,u,h,c,l,f,p,_,d,v,g=[],y=n.children,m=0,x=0,w=y.length,b=n.value;m<w;){u=r-e,h=o-i;do{c=y[x++].value}while(!c&&x<w);for(l=f=c,v=c*c*(d=Math.max(h/u,u/h)/(b*t)),_=Math.max(f/v,v/l);x<w;++x){if(c+=a=y[x].value,a<l&&(l=a),a>f&&(f=a),v=c*c*d,(p=Math.max(f/v,v/l))>_){c-=a;break}_=p}g.push(s={value:c,dice:u<h,children:y.slice(m,x)}),s.dice?Co(s,e,i,r,b?i+=h*c/b:o):To(s,e,i,b?e+=u*c/b:r,o),b-=c,m=x}return g}(function t(n){function e(t,e,i,r,o){Ao(n,t,e,i,r,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(ko),function t(n){function e(t,e,i,r,o){if((s=t._squarify)&&s.ratio===n)for(var s,a,u,h,c,l=-1,f=s.length,p=t.value;++l<f;){for(u=(a=s[l]).children,h=a.value=0,c=u.length;h<c;++h)a.value+=u[h].value;a.dice?Co(a,e,i,r,i+=(o-i)*a.value/p):To(a,e,i,e+=(r-e)*a.value/p,o),p-=a.value}else t._squarify=s=Ao(n,t,e,i,r,o),s.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ko);var Uo=function(){return Math.random()},Po=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Uo),function t(n){function e(t,e){var i,r;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=i)o=i,i=null;else do{i=2*n()-1,o=2*n()-1,r=i*i+o*o}while(!r||r>1);return t+e*o*Math.sqrt(-2*Math.log(r)/r)}}return e.source=t,e}(Uo)),Do=(function t(n){function e(){var t=Po.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Uo),function t(n){function e(t){return function(){for(var e=0,i=0;i<t;++i)e+=n();return e}}return e.source=t,e}(Uo));(function t(n){function e(t){var e=Do.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Uo),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Uo);var Lo=Array.prototype;Lo.map,Lo.slice;var Fo=new Date,Ro=new Date;function zo(t,n,e,i){function r(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return r.floor=function(n){return t(n=new Date(+n)),n},r.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},r.round=function(t){var n=r(t),e=r.ceil(t);return t-n<e-t?n:e},r.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},r.range=function(e,i,o){var s,a=[];if(e=r.ceil(e),o=null==o?1:Math.floor(o),!(e<i&&o>0))return a;do{a.push(s=new Date(+e)),n(e,o),t(e)}while(s<e&&e<i);return a},r.filter=function(e){return zo((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;n(t,-1),!e(t););else for(;--i>=0;)for(;n(t,1),!e(t););}))},e&&(r.count=function(n,i){return Fo.setTime(+n),Ro.setTime(+i),t(Fo),t(Ro),Math.floor(e(Fo,Ro))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(n){return i(n)%t==0}:function(n){return r.count(0,n)%t==0}):r:null}),r}var Oo=zo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Oo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?zo((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var jo=Oo,Ho=(Oo.range,zo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Vo=(Ho.range,6e4),qo=6048e5;function Yo(t){return zo((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Vo)/qo}))}var Bo=Yo(0),Io=Yo(1),Xo=Yo(2),$o=Yo(3),Zo=Yo(4),Wo=Yo(5),Qo=Yo(6),Jo=(Bo.range,Io.range,Xo.range,$o.range,Zo.range,Wo.range,Qo.range,zo((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Vo)/864e5}),(function(t){return t.getDate()-1}))),Go=Jo,Ko=(Jo.range,zo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Vo)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),ts=(Ko.range,zo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+n*Vo)}),(function(t,n){return(n-t)/Vo}),(function(t){return t.getMinutes()}))),ns=(ts.range,zo((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),es=(ns.range,zo((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));es.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?zo((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):es:null};es.range;function is(t){return zo((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/qo}))}var rs=is(0),os=is(1),ss=is(2),as=is(3),us=is(4),hs=is(5),cs=is(6),ls=(rs.range,os.range,ss.range,as.range,us.range,hs.range,cs.range,zo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),fs=ls,ps=(ls.range,zo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));ps.every=function(t){return isFinite(t=Math.floor(t))&&t>0?zo((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var _s=ps;ps.range;function ds(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function vs(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function gs(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var ys,ms={"-":"",_:" ",0:"0"},xs=/^\s*\d+/,ws=/^%/,bs=/[\\^$*+?|[\]().{}]/g;function Ms(t,n,e){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<e?new Array(e-o+1).join(n)+r:r)}function Ss(t){return t.replace(bs,"\\$&")}function Ns(t){return new RegExp("^(?:"+t.map(Ss).join("|")+")","i")}function Cs(t){for(var n={},e=-1,i=t.length;++e<i;)n[t[e].toLowerCase()]=e;return n}function Es(t,n,e){var i=xs.exec(n.slice(e,e+1));return i?(t.w=+i[0],e+i[0].length):-1}function Ts(t,n,e){var i=xs.exec(n.slice(e,e+1));return i?(t.u=+i[0],e+i[0].length):-1}function ks(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.U=+i[0],e+i[0].length):-1}function As(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.V=+i[0],e+i[0].length):-1}function Us(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.W=+i[0],e+i[0].length):-1}function Ps(t,n,e){var i=xs.exec(n.slice(e,e+4));return i?(t.y=+i[0],e+i[0].length):-1}function Ds(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),e+i[0].length):-1}function Ls(t,n,e){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),e+i[0].length):-1}function Fs(t,n,e){var i=xs.exec(n.slice(e,e+1));return i?(t.q=3*i[0]-3,e+i[0].length):-1}function Rs(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.m=i[0]-1,e+i[0].length):-1}function zs(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.d=+i[0],e+i[0].length):-1}function Os(t,n,e){var i=xs.exec(n.slice(e,e+3));return i?(t.m=0,t.d=+i[0],e+i[0].length):-1}function js(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.H=+i[0],e+i[0].length):-1}function Hs(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.M=+i[0],e+i[0].length):-1}function Vs(t,n,e){var i=xs.exec(n.slice(e,e+2));return i?(t.S=+i[0],e+i[0].length):-1}function qs(t,n,e){var i=xs.exec(n.slice(e,e+3));return i?(t.L=+i[0],e+i[0].length):-1}function Ys(t,n,e){var i=xs.exec(n.slice(e,e+6));return i?(t.L=Math.floor(i[0]/1e3),e+i[0].length):-1}function Bs(t,n,e){var i=ws.exec(n.slice(e,e+1));return i?e+i[0].length:-1}function Is(t,n,e){var i=xs.exec(n.slice(e));return i?(t.Q=+i[0],e+i[0].length):-1}function Xs(t,n,e){var i=xs.exec(n.slice(e));return i?(t.s=+i[0],e+i[0].length):-1}function $s(t,n){return Ms(t.getDate(),n,2)}function Zs(t,n){return Ms(t.getHours(),n,2)}function Ws(t,n){return Ms(t.getHours()%12||12,n,2)}function Qs(t,n){return Ms(1+Go.count(jo(t),t),n,3)}function Js(t,n){return Ms(t.getMilliseconds(),n,3)}function Gs(t,n){return Js(t,n)+"000"}function Ks(t,n){return Ms(t.getMonth()+1,n,2)}function ta(t,n){return Ms(t.getMinutes(),n,2)}function na(t,n){return Ms(t.getSeconds(),n,2)}function ea(t){var n=t.getDay();return 0===n?7:n}function ia(t,n){return Ms(Bo.count(jo(t)-1,t),n,2)}function ra(t,n){var e=t.getDay();return t=e>=4||0===e?Zo(t):Zo.ceil(t),Ms(Zo.count(jo(t),t)+(4===jo(t).getDay()),n,2)}function oa(t){return t.getDay()}function sa(t,n){return Ms(Io.count(jo(t)-1,t),n,2)}function aa(t,n){return Ms(t.getFullYear()%100,n,2)}function ua(t,n){return Ms(t.getFullYear()%1e4,n,4)}function ha(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ms(n/60|0,"0",2)+Ms(n%60,"0",2)}function ca(t,n){return Ms(t.getUTCDate(),n,2)}function la(t,n){return Ms(t.getUTCHours(),n,2)}function fa(t,n){return Ms(t.getUTCHours()%12||12,n,2)}function pa(t,n){return Ms(1+fs.count(_s(t),t),n,3)}function _a(t,n){return Ms(t.getUTCMilliseconds(),n,3)}function da(t,n){return _a(t,n)+"000"}function va(t,n){return Ms(t.getUTCMonth()+1,n,2)}function ga(t,n){return Ms(t.getUTCMinutes(),n,2)}function ya(t,n){return Ms(t.getUTCSeconds(),n,2)}function ma(t){var n=t.getUTCDay();return 0===n?7:n}function xa(t,n){return Ms(rs.count(_s(t)-1,t),n,2)}function wa(t,n){var e=t.getUTCDay();return t=e>=4||0===e?us(t):us.ceil(t),Ms(us.count(_s(t),t)+(4===_s(t).getUTCDay()),n,2)}function ba(t){return t.getUTCDay()}function Ma(t,n){return Ms(os.count(_s(t)-1,t),n,2)}function Sa(t,n){return Ms(t.getUTCFullYear()%100,n,2)}function Na(t,n){return Ms(t.getUTCFullYear()%1e4,n,4)}function Ca(){return"+0000"}function Ea(){return"%"}function Ta(t){return+t}function ka(t){return Math.floor(+t/1e3)}!function(t){ys=function(t){var n=t.dateTime,e=t.date,i=t.time,r=t.periods,o=t.days,s=t.shortDays,a=t.months,u=t.shortMonths,h=Ns(r),c=Cs(r),l=Ns(o),f=Cs(o),p=Ns(s),_=Cs(s),d=Ns(a),v=Cs(a),g=Ns(u),y=Cs(u),m={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:$s,e:$s,f:Gs,H:Zs,I:Ws,j:Qs,L:Js,m:Ks,M:ta,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ta,s:ka,S:na,u:ea,U:ia,V:ra,w:oa,W:sa,x:null,X:null,y:aa,Y:ua,Z:ha,"%":Ea},x={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:ca,e:ca,f:da,H:la,I:fa,j:pa,L:_a,m:va,M:ga,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ta,s:ka,S:ya,u:ma,U:xa,V:wa,w:ba,W:Ma,x:null,X:null,y:Sa,Y:Na,Z:Ca,"%":Ea},w={a:function(t,n,e){var i=p.exec(n.slice(e));return i?(t.w=_[i[0].toLowerCase()],e+i[0].length):-1},A:function(t,n,e){var i=l.exec(n.slice(e));return i?(t.w=f[i[0].toLowerCase()],e+i[0].length):-1},b:function(t,n,e){var i=g.exec(n.slice(e));return i?(t.m=y[i[0].toLowerCase()],e+i[0].length):-1},B:function(t,n,e){var i=d.exec(n.slice(e));return i?(t.m=v[i[0].toLowerCase()],e+i[0].length):-1},c:function(t,e,i){return S(t,n,e,i)},d:zs,e:zs,f:Ys,H:js,I:js,j:Os,L:qs,m:Rs,M:Hs,p:function(t,n,e){var i=h.exec(n.slice(e));return i?(t.p=c[i[0].toLowerCase()],e+i[0].length):-1},q:Fs,Q:Is,s:Xs,S:Vs,u:Ts,U:ks,V:As,w:Es,W:Us,x:function(t,n,i){return S(t,e,n,i)},X:function(t,n,e){return S(t,i,n,e)},y:Ds,Y:Ps,Z:Ls,"%":Bs};function b(t,n){return function(e){var i,r,o,s=[],a=-1,u=0,h=t.length;for(e instanceof Date||(e=new Date(+e));++a<h;)37===t.charCodeAt(a)&&(s.push(t.slice(u,a)),null!=(r=ms[i=t.charAt(++a)])?i=t.charAt(++a):r="e"===i?" ":"0",(o=n[i])&&(i=o(e,r)),s.push(i),u=a+1);return s.push(t.slice(u,a)),s.join("")}}function M(t,n){return function(e){var i,r,o=gs(1900,void 0,1);if(S(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!n||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=vs(gs(o.y,0,1))).getUTCDay(),i=r>4||0===r?os.ceil(i):os(i),i=fs.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=ds(gs(o.y,0,1))).getDay(),i=r>4||0===r?Io.ceil(i):Io(i),i=Go.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?vs(gs(o.y,0,1)).getUTCDay():ds(gs(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,vs(o)):ds(o)}}function S(t,n,e,i){for(var r,o,s=0,a=n.length,u=e.length;s<a;){if(i>=u)return-1;if(37===(r=n.charCodeAt(s++))){if(r=n.charAt(s++),!(o=w[r in ms?n.charAt(s++):r])||(i=o(t,e,i))<0)return-1}else if(r!=e.charCodeAt(i++))return-1}return i}return(m.x=b(e,m),m.X=b(i,m),m.c=b(n,m),x.x=b(e,x),x.X=b(i,x),x.c=b(n,x),{format:function(t){var n=b(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}})}(t),ys.format,ys.parse,ys.utcFormat,ys.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Aa=zo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Ua=(Aa.range,zo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Pa=(Ua.range,zo((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Vo)}),(function(t,n){return(n-t)/Vo}),(function(t){return t.getUTCMinutes()})));Pa.range;Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Da=1e-12,La=Math.PI,Fa=2*La;function Ra(t){this._context=t}Ra.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var za=function(t){return new Ra(t)};ja(za);function Oa(t){this._curve=t}function ja(t){function n(n){return new Oa(t(n))}return n._curve=t,n}Oa.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Ha=Math.sin(La/10)/Math.sin(7*La/10),Va=(Math.sin(Fa/10),Math.cos(Fa/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function qa(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Ya(t){this._context=t}Ya.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:qa(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:qa(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ba(t){this._context=t}Ba.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:qa(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ia(t){this._context=t}Ia.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:qa(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Xa(t,n){this._basis=new Ya(t),this._beta=n}Xa.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var i,r=t[0],o=n[0],s=t[e]-r,a=n[e]-o,u=-1;++u<=e;)i=u/e,this._basis.point(this._beta*t[u]+(1-this._beta)*(r+i*s),this._beta*n[u]+(1-this._beta)*(o+i*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Ya(t):new Xa(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function $a(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Za(t,n){this._context=t,this._k=(1-n)/6}Za.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:$a(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:$a(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Za(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Wa(t,n){this._context=t,this._k=(1-n)/6}Wa.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:$a(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Wa(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Qa(t,n){this._context=t,this._k=(1-n)/6}Qa.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:$a(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Qa(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ja(t,n,e){var i=t._x1,r=t._y1,o=t._x2,s=t._y2;if(t._l01_a>Da){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,r=(r*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Da){var h=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*h+t._x1*t._l23_2a-n*t._l12_2a)/c,s=(s*h+t._y1*t._l23_2a-e*t._l12_2a)/c}t._context.bezierCurveTo(i,r,o,s,t._x2,t._y2)}function Ga(t,n){this._context=t,this._alpha=n}Ga.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ja(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ga(t,n):new Za(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ka(t,n){this._context=t,this._alpha=n}Ka.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ja(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ka(t,n):new Wa(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function tu(t,n){this._context=t,this._alpha=n}tu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ja(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new tu(t,n):new Qa(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function nu(t){this._context=t}nu.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function eu(t){return t<0?-1:1}function iu(t,n,e){var i=t._x1-t._x0,r=n-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),s=(e-t._y1)/(r||i<0&&-0),a=(o*r+s*i)/(i+r);return(eu(o)+eu(s))*Math.min(Math.abs(o),Math.abs(s),.5*Math.abs(a))||0}function ru(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function ou(t,n,e){var i=t._x0,r=t._y0,o=t._x1,s=t._y1,a=(o-i)/3;t._context.bezierCurveTo(i+a,r+a*n,o-a,s-a*e,o,s)}function su(t){this._context=t}function au(t){this._context=new uu(t)}function uu(t){this._context=t}function hu(t){this._context=t}function cu(t){var n,e,i=t.length-1,r=new Array(i),o=new Array(i),s=new Array(i);for(r[0]=0,o[0]=2,s[0]=t[0]+2*t[1],n=1;n<i-1;++n)r[n]=1,o[n]=4,s[n]=4*t[n]+2*t[n+1];for(r[i-1]=2,o[i-1]=7,s[i-1]=8*t[i-1]+t[i],n=1;n<i;++n)e=r[n]/o[n-1],o[n]-=e,s[n]-=e*s[n-1];for(r[i-1]=s[i-1]/o[i-1],n=i-2;n>=0;--n)r[n]=(s[n]-r[n+1])/o[n];for(o[i-1]=(t[i]+r[i-1])/2,n=0;n<i-1;++n)o[n]=2*t[n+1]-r[n+1];return[r,o]}su.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ou(this,this._t0,ru(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,ou(this,ru(this,e=iu(this,t,n)),e);break;default:ou(this,this._t0,e=iu(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(au.prototype=Object.create(su.prototype)).point=function(t,n){su.prototype.point.call(this,n,t)},uu.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,i,r,o){this._context.bezierCurveTo(n,t,i,e,o,r)}},hu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var i=cu(t),r=cu(n),o=0,s=1;s<e;++o,++s)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[s],n[s]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function lu(t,n){this._context=t,this._t=n}lu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function fu(){this._=null}function pu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function _u(t,n){var e=n,i=n.R,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.R=i.L,e.R&&(e.R.U=e),i.L=e}function du(t,n){var e=n,i=n.L,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.L=i.R,e.L&&(e.L.U=e),i.R=e}function vu(t){for(;t.L;)t=t.L;return t}fu.prototype={constructor:fu,insert:function(t,n){var e,i,r;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=vu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(i=e.U).L?(r=i.R)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.R&&(_u(this,e),e=(t=e).U),e.C=!1,i.C=!0,du(this,i)):(r=i.L)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.L&&(du(this,e),e=(t=e).U),e.C=!1,i.C=!0,_u(this,i)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,i,r=t.U,o=t.L,s=t.R;if(e=o?s?vu(s):o:s,r?r.L===t?r.L=e:r.R=e:this._=e,o&&s?(i=e.C,e.C=t.C,e.L=o,o.U=e,e!==s?(r=e.U,e.U=t.U,t=e.R,r.L=t,e.R=s,s.U=e):(e.U=r,r=e,t=e.R)):(i=t.C,t=e),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((n=r.R).C&&(n.C=!1,r.C=!0,_u(this,r),n=r.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,du(this,n),n=r.R),n.C=r.C,r.C=n.R.C=!1,_u(this,r),t=this._;break}}else if((n=r.L).C&&(n.C=!1,r.C=!0,du(this,r),n=r.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,_u(this,n),n=r.L),n.C=r.C,r.C=n.L.C=!1,du(this,r),t=this._;break}n.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var gu=fu;function yu(t,n,e,i){var r=[null,null],o=qu.push(r)-1;return r.left=t,r.right=n,e&&xu(r,t,n,e),i&&xu(r,n,t,i),Hu[t.index].halfedges.push(o),Hu[n.index].halfedges.push(o),r}function mu(t,n,e){var i=[n,e];return i.left=t,i}function xu(t,n,e,i){t[0]||t[1]?t.left===e?t[1]=i:t[0]=i:(t[0]=i,t.left=n,t.right=e)}function wu(t,n,e,i,r){var o,s=t[0],a=t[1],u=s[0],h=s[1],c=0,l=1,f=a[0]-u,p=a[1]-h;if(o=n-u,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>c&&(c=o)}if(o=i-u,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<l&&(l=o)}if(o=e-h,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>c&&(c=o)}if(o=r-h,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<l&&(l=o)}return!(c>0||l<1)||(c>0&&(t[0]=[u+c*f,h+c*p]),l<1&&(t[1]=[u+l*f,h+l*p]),!0)}}}}}function bu(t,n,e,i,r){var o=t[1];if(o)return!0;var s,a,u=t[0],h=t.left,c=t.right,l=h[0],f=h[1],p=c[0],_=c[1],d=(l+p)/2,v=(f+_)/2;if(_===f){if(d<n||d>=i)return;if(l>p){if(u){if(u[1]>=r)return}else u=[d,e];o=[d,r]}else{if(u){if(u[1]<e)return}else u=[d,r];o=[d,e]}}else if(a=v-(s=(l-p)/(_-f))*d,s<-1||s>1)if(l>p){if(u){if(u[1]>=r)return}else u=[(e-a)/s,e];o=[(r-a)/s,r]}else{if(u){if(u[1]<e)return}else u=[(r-a)/s,r];o=[(e-a)/s,e]}else if(f<_){if(u){if(u[0]>=i)return}else u=[n,s*n+a];o=[i,s*i+a]}else{if(u){if(u[0]<n)return}else u=[i,s*i+a];o=[n,s*n+a]}return t[0]=u,t[1]=o,!0}function Mu(t,n){var e=t.site,i=n.left,r=n.right;return e===r&&(r=i,i=e),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(e===i?(i=n[1],r=n[0]):(i=n[0],r=n[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function Su(t,n){return n[+(n.left!==t.site)]}function Nu(t,n){return n[+(n.left===t.site)]}var Cu,Eu=[];function Tu(){pu(this),this.x=this.y=this.arc=this.site=this.cy=null}function ku(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,r=t.site,o=e.site;if(i!==o){var s=r[0],a=r[1],u=i[0]-s,h=i[1]-a,c=o[0]-s,l=o[1]-a,f=2*(u*l-h*c);if(!(f>=-Bu)){var p=u*u+h*h,_=c*c+l*l,d=(l*p-h*_)/f,v=(u*_-c*p)/f,g=Eu.pop()||new Tu;g.arc=t,g.site=r,g.x=d+s,g.y=(g.cy=v+a)+Math.sqrt(d*d+v*v),t.circle=g;for(var y=null,m=Vu._;m;)if(g.y<m.y||g.y===m.y&&g.x<=m.x){if(!m.L){y=m.P;break}m=m.L}else{if(!m.R){y=m;break}m=m.R}Vu.insert(y,g),y||(Cu=g)}}}}function Au(t){var n=t.circle;n&&(n.P||(Cu=n.N),Vu.remove(n),Eu.push(n),pu(n),t.circle=null)}var Uu=[];function Pu(){pu(this),this.edge=this.site=this.circle=null}function Du(t){var n=Uu.pop()||new Pu;return n.site=t,n}function Lu(t){Au(t),ju.remove(t),Uu.push(t),pu(t)}function Fu(t){var n=t.circle,e=n.x,i=n.cy,r=[e,i],o=t.P,s=t.N,a=[t];Lu(t);for(var u=o;u.circle&&Math.abs(e-u.circle.x)<Yu&&Math.abs(i-u.circle.cy)<Yu;)o=u.P,a.unshift(u),Lu(u),u=o;a.unshift(u),Au(u);for(var h=s;h.circle&&Math.abs(e-h.circle.x)<Yu&&Math.abs(i-h.circle.cy)<Yu;)s=h.N,a.push(h),Lu(h),h=s;a.push(h),Au(h);var c,l=a.length;for(c=1;c<l;++c)h=a[c],u=a[c-1],xu(h.edge,u.site,h.site,r);u=a[0],(h=a[l-1]).edge=yu(u.site,h.site,null,r),ku(u),ku(h)}function Ru(t){for(var n,e,i,r,o=t[0],s=t[1],a=ju._;a;)if((i=zu(a,s)-o)>Yu)a=a.L;else{if(!((r=o-Ou(a,s))>Yu)){i>-Yu?(n=a.P,e=a):r>-Yu?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Hu[t.index]={site:t,halfedges:[]}}(t);var u=Du(t);if(ju.insert(n,u),n||e){if(n===e)return Au(n),e=Du(n.site),ju.insert(u,e),u.edge=e.edge=yu(n.site,u.site),ku(n),void ku(e);if(e){Au(n),Au(e);var h=n.site,c=h[0],l=h[1],f=t[0]-c,p=t[1]-l,_=e.site,d=_[0]-c,v=_[1]-l,g=2*(f*v-p*d),y=f*f+p*p,m=d*d+v*v,x=[(v*y-p*m)/g+c,(f*m-d*y)/g+l];xu(e.edge,h,_,x),u.edge=yu(h,t,null,x),e.edge=yu(t,_,null,x),ku(n),ku(e)}else u.edge=yu(n.site,u.site)}}function zu(t,n){var e=t.site,i=e[0],r=e[1],o=r-n;if(!o)return i;var s=t.P;if(!s)return-1/0;var a=(e=s.site)[0],u=e[1],h=u-n;if(!h)return a;var c=a-i,l=1/o-1/h,f=c/h;return l?(-f+Math.sqrt(f*f-2*l*(c*c/(-2*h)-u+h/2+r-o/2)))/l+i:(i+a)/2}function Ou(t,n){var e=t.N;if(e)return zu(e,n);var i=t.site;return i[1]===n?i[0]:1/0}var ju,Hu,Vu,qu,Yu=1e-6,Bu=1e-12;function Iu(t,n){return n[1]-t[1]||n[0]-t[0]}function Xu(t,n){var e,i,r,o=t.sort(Iu).pop();for(qu=[],Hu=new Array(t.length),ju=new gu,Vu=new gu;;)if(r=Cu,o&&(!r||o[1]<r.y||o[1]===r.y&&o[0]<r.x))o[0]===e&&o[1]===i||(Ru(o),e=o[0],i=o[1]),o=t.pop();else{if(!r)break;Fu(r.arc)}if(function(){for(var t,n,e,i,r=0,o=Hu.length;r<o;++r)if((t=Hu[r])&&(i=(n=t.halfedges).length)){var s=new Array(i),a=new Array(i);for(e=0;e<i;++e)s[e]=e,a[e]=Mu(t,qu[n[e]]);for(s.sort((function(t,n){return a[n]-a[t]})),e=0;e<i;++e)a[e]=n[s[e]];for(e=0;e<i;++e)n[e]=a[e]}}(),n){var s=+n[0][0],a=+n[0][1],u=+n[1][0],h=+n[1][1];!function(t,n,e,i){for(var r,o=qu.length;o--;)bu(r=qu[o],t,n,e,i)&&wu(r,t,n,e,i)&&(Math.abs(r[0][0]-r[1][0])>Yu||Math.abs(r[0][1]-r[1][1])>Yu)||delete qu[o]}(s,a,u,h),function(t,n,e,i){var r,o,s,a,u,h,c,l,f,p,_,d,v=Hu.length,g=!0;for(r=0;r<v;++r)if(o=Hu[r]){for(s=o.site,a=(u=o.halfedges).length;a--;)qu[u[a]]||u.splice(a,1);for(a=0,h=u.length;a<h;)_=(p=Nu(o,qu[u[a]]))[0],d=p[1],l=(c=Su(o,qu[u[++a%h]]))[0],f=c[1],(Math.abs(_-l)>Yu||Math.abs(d-f)>Yu)&&(u.splice(a,0,qu.push(mu(s,p,Math.abs(_-t)<Yu&&i-d>Yu?[t,Math.abs(l-t)<Yu?f:i]:Math.abs(d-i)<Yu&&e-_>Yu?[Math.abs(f-i)<Yu?l:e,i]:Math.abs(_-e)<Yu&&d-n>Yu?[e,Math.abs(l-e)<Yu?f:n]:Math.abs(d-n)<Yu&&_-t>Yu?[Math.abs(f-n)<Yu?l:t,n]:null))-1),++h);h&&(g=!1)}if(g){var y,m,x,w=1/0;for(r=0,g=null;r<v;++r)(o=Hu[r])&&(x=(y=(s=o.site)[0]-t)*y+(m=s[1]-n)*m)<w&&(w=x,g=o);if(g){var b=[t,n],M=[t,i],S=[e,i],N=[e,n];g.halfedges.push(qu.push(mu(s=g.site,b,M))-1,qu.push(mu(s,M,S))-1,qu.push(mu(s,S,N))-1,qu.push(mu(s,N,b))-1)}}for(r=0;r<v;++r)(o=Hu[r])&&(o.halfedges.length||delete Hu[r])}(s,a,u,h)}this.edges=qu,this.cells=Hu,ju=Vu=qu=Hu=null}Xu.prototype={constructor:Xu,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Su(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,i){if(o=(r=e.halfedges).length)for(var r,o,s,a,u,h,c=e.site,l=-1,f=n[r[o-1]],p=f.left===c?f.right:f.left;++l<o;)s=p,p=(f=n[r[l]]).left===c?f.right:f.left,s&&p&&i<s.index&&i<p.index&&(u=s,h=p,((a=c)[0]-h[0])*(u[1]-a[1])-(a[0]-u[0])*(h[1]-a[1])<0)&&t.push([c.data,s.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var i,r,o=this,s=o._found||0,a=o.cells.length;!(r=o.cells[s]);)if(++s>=a)return null;var u=t-r.site[0],h=n-r.site[1],c=u*u+h*h;do{r=o.cells[i=s],s=null,r.halfedges.forEach((function(e){var i=o.edges[e],a=i.left;if(a!==r.site&&a||(a=i.right)){var u=t-a[0],h=n-a[1],l=u*u+h*h;l<c&&(c=l,s=a.index)}}))}while(null!==s);return o._found=i,null==e||c<=e*e?r.site:null}};function $u(t,n,e){this.k=t,this.x=n,this.y=e}$u.prototype={constructor:$u,scale:function(t){return 1===t?this:new $u(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new $u(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new $u(1,0,0);$u.prototype;var Zu=function(t,n){var e=this;this.filterData=function(t){var n=t.reduce((function(t,n){return function(e){return t(e)&&n(e)}}));e.filteredData=e.data.filter((function(t){return n(t)})),e.adapter.update(e.filteredData)},this.adapter=n,Yi(t).then((function(t){e.data=t.slice(0),e.filteredData=e.data,n.update(e.filteredData)}))},Wu=e(3),Qu=(e(5),function(){var t=this;this.registreeFilter=document.getElementById("registreeFilter"),this.statusFilter=document.getElementById("statusFilter"),this.sexFilter=document.getElementById("sexFilter"),this.originFilter=document.getElementById("originFilter"),this.occupationFilter=document.getElementById("occupationFilter"),this.masterFilter=document.getElementById("masterFilter"),this.masterResidenceFilter=document.getElementById("masterResidenceFilter"),this.registrationDistrictFilter=document.getElementById("registrationDistrictFilter"),this.sourcesFilter=document.getElementById("sourcesFilter"),this.ageSlider=Wu.create(document.getElementById("ageSlider"),{start:[0,100],connect:!0,range:{min:0,max:100},tooltips:!0,format:wNumb({decimals:0}),step:1}),this.dateSlider=Wu.create(document.getElementById("dateSlider"),{start:[0,100],connect:!0,range:{min:0,max:100},tooltips:!0,format:wNumb({decimals:0}),step:1}),this.predicates={registree:function(t){return!0},status:function(t){return!0},sex:function(t){return!0},origin:function(t){return!0},age:function(t){return!0},occupation:function(t){return!0},master:function(t){return!0},masterResidence:function(t){return!0},registrationDate:function(t){return!0},registrationDistrict:function(t){return!0},sources:function(t){return!0}},this.registreeFilter.onchange=function(){t.predicates.registree=function(n){return""===t.registreeFilter.value||n.Registree===t.registreeFilter.value}}}),Ju=function(t,n,e,i,r,o){this.redraw=function(t){console.log("redrawing donut")},console.log("Constructing donut")},Gu=function(t,n,e,i,r){this.redraw=function(t){console.log("Redrawing histogram")},console.log("Constructing histogram")},Ku=function(t,n,e,i,r,o){this.redraw=function(t){console.log("Redrawing map")},console.log("Constructing map")},th=function(t,n,e,i,r){this.redraw=function(t){console.log("Redrawing table")},console.log("Constructing table")},nh=function(t){var n=this;this.vizualizerHeight=600,this.updateActiveViz=function(t){return n.activeViz.redraw(t)},this.fillDatalists=function(t){},this.adapter=t,this.filters=new Qu;var e=document.getElementById("vizualizers"),i=t.getData();this.donut=new Ju(i,document.getElementById("donutChart"),document.getElementById("dountSelect"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.histogram=new Gu(i,document.getElementById("histogramOverTimeChart"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.map=new Ku(i,document.getElementById("mapChart"),document.getElementById("mapSelect"),this.filters,this.vizualizerHeight,e.offsetWidth-10),this.table=new th(i,"tableChart",this.filters,this.vizualizerHeight,e.offsetWidth-10),this.activeViz=this.map},eh=new Zu("boc.csv",{update:function(t){ih.updateActiveViz(t),ih.fillDatalists(t)}}),ih=new nh({getData:function(){return eh.data},refilter:function(t){eh.filterData([function(t){return t=={}}])}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,