!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=13)}([,,,function(t,e,n){var r,i,o;/*! nouislider - 13.1.5 - 4/24/2019 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.5";function e(t){t.parentElement.removeChild(t)}function n(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,e,n){n>0&&(l(t,e),setTimeout((function(){c(t,e)}),n))}function a(t){return Math.max(Math.min(t,100),0)}function s(t){return Array.isArray(t)?t:[t]}function u(t){var e=(t=String(t)).split(".");return e.length>1?e[1].length:0}function l(t,e){t.classList?t.classList.add(e):t.className+=" "+e}function c(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function h(t){var e=void 0!==window.pageXOffset,n="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:n?t.documentElement.scrollLeft:t.body.scrollLeft,y:e?window.pageYOffset:n?t.documentElement.scrollTop:t.body.scrollTop}}function f(t,e){return 100/(e-t)}function p(t,e){return 100*e/(t[1]-t[0])}function d(t,e){for(var n=1;t>=e[n];)n+=1;return n}function g(t,e,n){if(n>=t.slice(-1)[0])return 100;var r=d(n,t),i=t[r-1],o=t[r],a=e[r-1],s=e[r];return a+function(t,e){return p(t,t[0]<0?e+Math.abs(t[0]):e-t[0])}([i,o],n)/f(a,s)}function v(t,e,n,r){if(100===r)return r;var i=d(r,t),o=t[i-1],a=t[i];return n?r-o>(a-o)/2?a:o:e[i-1]?t[i-1]+function(t,e){return Math.round(t/e)*e}(r-t[i-1],e[i-1]):r}function b(e,n,r){var o;if("number"==typeof n&&(n=[n]),!Array.isArray(n))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===e?0:"max"===e?100:parseFloat(e))||!i(n[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(n[0]),o?r.xSteps.push(!isNaN(n[1])&&n[1]):isNaN(n[1])||(r.xSteps[0]=n[1]),r.xHighestCompleteStep.push(0)}function m(t,e,n){if(e)if(n.xVal[t]!==n.xVal[t+1]){n.xSteps[t]=p([n.xVal[t],n.xVal[t+1]],e)/f(n.xPct[t],n.xPct[t+1]);var r=(n.xVal[t+1]-n.xVal[t])/n.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=n.xVal[t]+n.xNumSteps[t]*i;n.xHighestCompleteStep[t]=o}else n.xSteps[t]=n.xHighestCompleteStep[t]=n.xVal[t]}function _(t,e,n){var r;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=e;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort((function(t,e){return t[0][0]-e[0][0]})):i.sort((function(t,e){return t[0]-e[0]})),r=0;r<i.length;r++)b(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)m(r,this.xNumSteps[r],this)}_.prototype.getMargin=function(e){var n=this.xNumSteps[0];if(n&&e/n%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,e)},_.prototype.toStepping=function(t){return t=g(this.xVal,this.xPct,t)},_.prototype.fromStepping=function(t){return function(t,e,n){if(n>=100)return t.slice(-1)[0];var r=d(n,e),i=t[r-1],o=t[r],a=e[r-1];return function(t,e){return e*(t[1]-t[0])/100+t[0]}([i,o],(n-a)*f(a,e[r]))}(this.xVal,this.xPct,t)},_.prototype.getStep=function(t){return t=v(this.xPct,this.xSteps,this.snap,t)},_.prototype.getDefaultStep=function(t,e,n){var r=d(t,this.xPct);return(100===t||e&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/n},_.prototype.getNearbySteps=function(t){var e=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e],step:this.xNumSteps[e],highestStep:this.xHighestCompleteStep[e]}}},_.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(u);return Math.max.apply(null,t)},_.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var y={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function x(e){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(e))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function w(e,n){if(!i(n))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");e.singleStep=n}function M(e,n){if("object"!=typeof n||Array.isArray(n))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===n.min||void 0===n.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(n.min===n.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new _(n,e.snap,e.singleStep)}function k(e,n){if(n=s(n),!Array.isArray(n)||!n.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");e.handles=n.length,e.start=n}function S(e,n){if(e.snap=n,"boolean"!=typeof n)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(e,n){if(e.animate=n,"boolean"!=typeof n)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function E(e,n){if(e.animationDuration=n,"number"!=typeof n)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function N(e,n){var r,i=[!1];if("lower"===n?n=[!0,!1]:"upper"===n&&(n=[!1,!0]),!0===n||!1===n){for(r=1;r<e.handles;r++)i.push(n);i.push(!1)}else{if(!Array.isArray(n)||!n.length||n.length!==e.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=n}e.connect=i}function U(e,n){switch(n){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function T(e,n){if(!i(n))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==n&&(e.margin=e.spectrum.getMargin(n),!e.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function A(e,n){if(!i(n))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(n),!e.limit||e.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function z(e,n){if(!i(n)&&!Array.isArray(n))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(n)&&2!==n.length&&!i(n[0])&&!i(n[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==n){if(Array.isArray(n)||(n=[n,n]),e.padding=[e.spectrum.getMargin(n[0]),e.spectrum.getMargin(n[1])],!1===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(e.padding[0]+e.padding[1]>100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function D(e,n){switch(n){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function F(e,n){if("string"!=typeof n)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=n.indexOf("tap")>=0,i=n.indexOf("drag")>=0,o=n.indexOf("fixed")>=0,a=n.indexOf("snap")>=0,s=n.indexOf("hover")>=0,u=n.indexOf("unconstrained")>=0;if(o){if(2!==e.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");T(e,e.start[1]-e.start[0])}if(u&&(e.margin||e.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:r||a,drag:i,fixed:o,snap:a,hover:s,unconstrained:u}}function L(e,n){if(!1!==n)if(!0===n){e.tooltips=[];for(var r=0;r<e.handles;r++)e.tooltips.push(!0)}else{if(e.tooltips=s(n),e.tooltips.length!==e.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");e.tooltips.forEach((function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")}))}}function P(t,e){t.ariaFormat=e,x(e)}function B(t,e){t.format=e,x(e)}function R(e,n){if(e.keyboardSupport=n,"boolean"!=typeof n)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function H(t,e){t.documentElement=e}function O(e,n){if("string"!=typeof n&&!1!==n)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");e.cssPrefix=n}function I(e,n){if("object"!=typeof n)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var r in e.cssClasses={},n)n.hasOwnProperty(r)&&(e.cssClasses[r]=e.cssPrefix+n[r]);else e.cssClasses=n}function j(e){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:y,format:y},i={step:{r:!1,t:w},start:{r:!0,t:k},connect:{r:!0,t:N},direction:{r:!0,t:D},snap:{r:!1,t:S},animate:{r:!1,t:C},animationDuration:{r:!1,t:E},range:{r:!0,t:M},orientation:{r:!1,t:U},margin:{r:!1,t:T},limit:{r:!1,t:A},padding:{r:!1,t:z},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:P},format:{r:!1,t:B},tooltips:{r:!1,t:L},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:H},cssPrefix:{r:!0,t:O},cssClasses:{r:!0,t:I}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(i).forEach((function(a){if(!n(e[a])&&void 0===o[a]){if(i[a].r)throw new Error("noUiSlider ("+t+"): '"+a+"' is required.");return!0}i[a].t(r,n(e[a])?e[a]:o[a])})),r.pips=e.pips;var a=document.createElement("div"),s=void 0!==a.style.msTransform,u=void 0!==a.style.transform;return r.transformRule=u?"transform":s?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function V(n,i,u){var f,p,d,g,v,b,m,_,y=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},x=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),w=n,M=i.spectrum,k=[],S=[],C=[],E=0,N={},U=n.ownerDocument,T=i.documentElement||U.documentElement,A=U.body,z=-1,D=0,F=1,L=2,P="rtl"===U.dir||1===i.ort?0:100;function B(t,e){var n=U.createElement("div");return e&&l(n,e),t.appendChild(n),n}function R(t,e){var n=B(t,i.cssClasses.origin),r=B(n,i.cssClasses.handle);return B(r,i.cssClasses.touchArea),r.setAttribute("data-handle",e),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",(function(t){return function(t,e){if(I()||V(e))return!1;var n=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?n.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),a=o===r[0]||o===n[0],s=o===r[1]||o===n[1];if(!a&&!s)return!0;t.preventDefault();var u=a?0:1,l=mt(e)[u];return null!==l&&(!1===l&&(l=M.getDefaultStep(S[e],a,10)),l=Math.max(l,1e-7),l*=a?-1:1,vt(e,k[e]+l,!0),!1)}(t,e)}))),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===e?l(r,i.cssClasses.handleLower):e===i.handles-1&&l(r,i.cssClasses.handleUpper),n}function H(t,e){return!!e&&B(t,i.cssClasses.connect)}function O(t,e){return!!i.tooltips[e]&&B(t.firstChild,i.cssClasses.tooltip)}function I(){return w.hasAttribute("disabled")}function V(t){return p[t].hasAttribute("disabled")}function q(){v&&(ot("update.tooltips"),v.forEach((function(t){t&&e(t)})),v=null)}function Y(){q(),v=p.map(O),it("update.tooltips",(function(t,e,n){if(v[e]){var r=t[e];!0!==i.tooltips[e]&&(r=i.tooltips[e].to(n[e])),v[e].innerHTML=r}}))}function $(t,e,n){var r=U.createElement("div"),o=[];o[D]=i.cssClasses.valueNormal,o[F]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var a=[];a[D]=i.cssClasses.markerNormal,a[F]=i.cssClasses.markerLarge,a[L]=i.cssClasses.markerSub;var s=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],u=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function c(t,e){var n=e===i.cssClasses.value,r=n?o:a;return e+" "+(n?s:u)[i.ort]+" "+r[t]}return l(r,i.cssClasses.pips),l(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach((function(o){!function(t,o,a){if((a=e?e(o,a):a)!==z){var s=B(r,!1);s.className=c(a,i.cssClasses.marker),s.style[i.style]=t+"%",a>D&&((s=B(r,!1)).className=c(a,i.cssClasses.value),s.setAttribute("data-value",o),s.style[i.style]=t+"%",s.innerHTML=n.to(o))}}(o,t[o][0],t[o][1])})),r}function X(){g&&(e(g),g=null)}function W(e){X();var n=e.mode,r=e.density||1,i=e.filter||!1,o=function(e,n,r){if("range"===e||"steps"===e)return M.xVal;if("count"===e){if(n<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=n-1,o=100/i;for(n=[];i--;)n[i]=i*o;n.push(100),e="positions"}return"positions"===e?n.map((function(t){return M.fromStepping(r?M.getStep(t):t)})):"values"===e?r?n.map((function(t){return M.fromStepping(M.getStep(M.toStepping(t)))})):n:void 0}(n,e.values||!1,e.stepped||!1),a=function(t,e,n){var r,i={},o=M.xVal[0],a=M.xVal[M.xVal.length-1],s=!1,u=!1,l=0;return r=n.slice().sort((function(t,e){return t-e})),(n=r.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==o&&(n.unshift(o),s=!0),n[n.length-1]!==a&&(n.push(a),u=!0),n.forEach((function(r,o){var a,c,h,f,p,d,g,v,b,m,_=r,y=n[o+1],x="steps"===e;if(x&&(a=M.xNumSteps[o]),a||(a=y-_),!1!==_&&void 0!==y)for(a=Math.max(a,1e-7),c=_;c<=y;c=(c+a).toFixed(7)/1){for(v=(p=(f=M.toStepping(c))-l)/t,m=p/(b=Math.round(v)),h=1;h<=b;h+=1)i[(d=l+h*m).toFixed(5)]=[M.fromStepping(d),0];g=n.indexOf(c)>-1?F:x?L:D,!o&&s&&(g=0),c===y&&u||(i[f.toFixed(5)]=[c,g]),l=f}})),i}(r,n,o),s=e.format||{to:Math.round};return g=w.appendChild($(a,i,s))}function Z(){var t=f.getBoundingClientRect(),e="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||f[e]:t.height||f[e]}function J(t,e,n,r){var o=function(o){return!!(o=function(t,e,n){var r,i,o=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),s=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(s=!0),o){var u=function(t){return t.target===n||n.contains(t.target)};if("touchstart"===t.type){var l=Array.prototype.filter.call(t.touches,u);if(l.length>1)return!1;r=l[0].pageX,i=l[0].pageY}else{var c=Array.prototype.find.call(t.changedTouches,u);if(!c)return!1;r=c.pageX,i=c.pageY}}return e=e||h(U),(a||s)&&(r=t.clientX+e.x,i=t.clientY+e.y),t.pageOffset=e,t.points=[r,i],t.cursor=a||s,t}(o,r.pageOffset,r.target||e))&&!(I()&&!r.doNotReject)&&(a=w,s=i.cssClasses.tap,!((a.classList?a.classList.contains(s):new RegExp("\\b"+s+"\\b").test(a.className))&&!r.doNotReject)&&!(t===y.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(x||o.preventDefault(),o.calcPoint=o.points[i.ort],void n(o,r)));var a,s},a=[];return t.split(" ").forEach((function(t){e.addEventListener(t,o,!!x&&{passive:!0}),a.push([t,o])})),a}function Q(t){var e,n,r,o,s,u,l=100*(t-(e=f,n=i.ort,r=e.getBoundingClientRect(),o=e.ownerDocument,s=o.documentElement,u=h(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(u.x=0),n?r.top+u.y-s.clientTop:r.left+u.x-s.clientLeft))/Z();return l=a(l),i.dir?100-l:l}function G(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&tt(t,e)}function K(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return tt(t,e);var n=(i.dir?-1:1)*(t.calcPoint-e.startCalcPoint);lt(n>0,100*n/e.baseSize,e.locations,e.handleNumbers)}function tt(t,e){e.handle&&(c(e.handle,i.cssClasses.active),E-=1),e.listeners.forEach((function(t){T.removeEventListener(t[0],t[1])})),0===E&&(c(w,i.cssClasses.drag),ht(),t.cursor&&(A.style.cursor="",A.removeEventListener("selectstart",r))),e.handleNumbers.forEach((function(t){at("change",t),at("set",t),at("end",t)}))}function et(t,e){if(e.handleNumbers.some(V))return!1;var n;1===e.handleNumbers.length&&(n=p[e.handleNumbers[0]].children[0],E+=1,l(n,i.cssClasses.active)),t.stopPropagation();var o=[],a=J(y.move,T,K,{target:t.target,handle:n,listeners:o,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:S.slice()}),s=J(y.end,T,tt,{target:t.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers}),u=J("mouseout",T,G,{target:t.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers});o.push.apply(o,a.concat(s,u)),t.cursor&&(A.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&l(w,i.cssClasses.drag),A.addEventListener("selectstart",r,!1)),e.handleNumbers.forEach((function(t){at("start",t)}))}function nt(t){t.stopPropagation();var e=Q(t.calcPoint),n=function(t){var e=100,n=!1;return p.forEach((function(r,i){if(!V(i)){var o=Math.abs(S[i]-t);(o<e||100===o&&100===e)&&(n=i,e=o)}})),n}(e);if(!1===n)return!1;i.events.snap||o(w,i.cssClasses.tap,i.animationDuration),ft(n,e,!0,!0),ht(),at("slide",n,!0),at("update",n,!0),at("change",n,!0),at("set",n,!0),i.events.snap&&et(t,{handleNumbers:[n]})}function rt(t){var e=Q(t.calcPoint),n=M.getStep(e),r=M.fromStepping(n);Object.keys(N).forEach((function(t){"hover"===t.split(".")[0]&&N[t].forEach((function(t){t.call(b,r)}))}))}function it(t,e){N[t]=N[t]||[],N[t].push(e),"update"===t.split(".")[0]&&p.forEach((function(t,e){at("update",e)}))}function ot(t){var e=t&&t.split(".")[0],n=e&&t.substring(e.length);Object.keys(N).forEach((function(t){var r=t.split(".")[0],i=t.substring(r.length);e&&e!==r||n&&n!==i||delete N[t]}))}function at(t,e,n){Object.keys(N).forEach((function(r){var o=r.split(".")[0];t===o&&N[r].forEach((function(t){t.call(b,k.map(i.format.to),e,k.slice(),n||!1,S.slice())}))}))}function st(t,e,n,r,o,s){return p.length>1&&!i.events.unconstrained&&(r&&e>0&&(n=Math.max(n,t[e-1]+i.margin)),o&&e<p.length-1&&(n=Math.min(n,t[e+1]-i.margin))),p.length>1&&i.limit&&(r&&e>0&&(n=Math.min(n,t[e-1]+i.limit)),o&&e<p.length-1&&(n=Math.max(n,t[e+1]-i.limit))),i.padding&&(0===e&&(n=Math.max(n,i.padding[0])),e===p.length-1&&(n=Math.min(n,100-i.padding[1]))),!((n=a(n=M.getStep(n)))===t[e]&&!s)&&n}function ut(t,e){var n=i.ort;return(n?e:t)+", "+(n?t:e)}function lt(t,e,n,r){var i=n.slice(),o=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,n){var r=st(i,t,i[t]+e,o[n],a[n],!1);!1===r?e=0:(e=r-i[t],i[t]=r)})):o=a=[!0];var s=!1;r.forEach((function(t,r){s=ft(t,n[t]+e,o[r],a[r])||s})),s&&r.forEach((function(t){at("update",t),at("slide",t)}))}function ct(t,e){return i.dir?100-t-e:t}function ht(){C.forEach((function(t){var e=S[t]>50?-1:1,n=3+(p.length+e*t);p[t].style.zIndex=n}))}function ft(t,e,n,r){return!1!==(e=st(S,t,e,n,r,!1))&&(function(t,e){S[t]=e,k[t]=M.fromStepping(e);var n="translate("+ut(ct(e,0)-P+"%","0")+")";p[t].style[i.transformRule]=n,pt(t),pt(t+1)}(t,e),!0)}function pt(t){if(d[t]){var e=0,n=100;0!==t&&(e=S[t-1]),t!==d.length-1&&(n=S[t]);var r=n-e,o="translate("+ut(ct(e,r)+"%","0")+")",a="scale("+ut(r/100,"1")+")";d[t].style[i.transformRule]=o+" "+a}}function dt(t,e){return null===t||!1===t||void 0===t?S[e]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?S[e]:t)}function gt(t,e){var n=s(t),r=void 0===S[0];e=void 0===e||!!e,i.animate&&!r&&o(w,i.cssClasses.tap,i.animationDuration),C.forEach((function(t){ft(t,dt(n[t],t),!0,!1)})),C.forEach((function(t){ft(t,S[t],!0,!0)})),ht(),C.forEach((function(t){at("update",t),null!==n[t]&&e&&at("set",t)}))}function vt(e,n,r){if(!((e=Number(e))>=0&&e<C.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+e);ft(e,dt(n,e),!0,!0),at("update",e),r&&at("set",e)}function bt(){var t=k.map(i.format.to);return 1===t.length?t[0]:t}function mt(t){var e=S[t],n=M.getNearbySteps(e),r=k[t],o=n.thisStep.step,a=null;if(i.snap)return[r-n.stepBefore.startValue||null,n.stepAfter.startValue-r||null];!1!==o&&r+o>n.stepAfter.startValue&&(o=n.stepAfter.startValue-r),a=r>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&r-n.stepBefore.highestStep,100===e?o=null:0===e&&(a=null);var s=M.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==a&&!1!==a&&(a=Number(a.toFixed(s))),[a,o]}return l(m=w,i.cssClasses.target),0===i.dir?l(m,i.cssClasses.ltr):l(m,i.cssClasses.rtl),0===i.ort?l(m,i.cssClasses.horizontal):l(m,i.cssClasses.vertical),f=B(m,i.cssClasses.base),function(t,e){var n=B(e,i.cssClasses.connects);p=[],(d=[]).push(H(n,t[0]));for(var r=0;r<i.handles;r++)p.push(R(e,r)),C[r]=r,d.push(H(n,t[r+1]))}(i.connect,f),(_=i.events).fixed||p.forEach((function(t,e){J(y.start,t.children[0],et,{handleNumbers:[e]})})),_.tap&&J(y.start,f,nt,{}),_.hover&&J(y.move,f,rt,{hover:!0}),_.drag&&d.forEach((function(t,e){if(!1!==t&&0!==e&&e!==d.length-1){var n=p[e-1],r=p[e],o=[t];l(t,i.cssClasses.draggable),_.fixed&&(o.push(n.children[0]),o.push(r.children[0])),o.forEach((function(t){J(y.start,t,et,{handles:[n,r],handleNumbers:[e-1,e]})}))}})),gt(i.start),i.pips&&W(i.pips),i.tooltips&&Y(),it("update",(function(t,e,n,r,o){C.forEach((function(t){var e=p[t],r=st(S,t,0,!0,!0,!0),a=st(S,t,100,!0,!0,!0),s=o[t],u=i.ariaFormat.to(n[t]);r=M.fromStepping(r).toFixed(1),a=M.fromStepping(a).toFixed(1),s=M.fromStepping(s).toFixed(1),e.children[0].setAttribute("aria-valuemin",r),e.children[0].setAttribute("aria-valuemax",a),e.children[0].setAttribute("aria-valuenow",s),e.children[0].setAttribute("aria-valuetext",u)}))})),b={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&c(w,i.cssClasses[t]);for(;w.firstChild;)w.removeChild(w.firstChild);delete w.noUiSlider},steps:function(){return C.map(mt)},on:it,off:ot,get:bt,set:gt,setHandle:vt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,e,n){lt(t,e,S,n)},options:u,updateOptions:function(t,e){var n=bt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach((function(e){void 0!==t[e]&&(u[e]=t[e])}));var o=j(u);r.forEach((function(e){void 0!==t[e]&&(i[e]=o[e])})),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?W(i.pips):X(),i.tooltips?Y():q(),S=[],gt(t.start||n,e)},target:w,removePips:X,removeTooltips:q,pips:W}}return{__spectrum:_,version:t,create:function(e,n){if(!e||!e.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=V(e,j(n),n);return e.noUiSlider=r,r}}})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(t,e){return e?e.querySelector(t):document.querySelector(t)},u=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=s.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),l=null,c=0,h=[],f=n(10);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(_(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(_(r.parts[a],e));o[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],a=e.base?o[0]+e.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function g(t,e){var n=u(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),h.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=u(t.insertAt.before,n);n.insertBefore(e,i)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function b(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return m(e,t.attrs),g(t,e),e}function m(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function _(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var a=c++;n=l||(l=b(e)),r=w.bind(null,n,a,!1),i=w.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),g(t,e),e}(e),r=k.bind(null,n,e),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=M.bind(null,n),i=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return p(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}t&&p(d(t,e),e);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete o[s.id]}}}};var y,x=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function w(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function M(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function k(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=f(r)),i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},,function(t,e,n){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function e(t){return t.split("").reverse().join("")}function n(t,e){return t.substring(0,e.length)===e}function r(t,e,n){if((t[e]||t[n])&&t[e]===t[n])throw new Error(e)}function i(t){return"number"==typeof t&&isFinite(t)}function o(t,n,r,o,a,s,u,l,c,h,f,p){var d,g,v,b,m,_=p,y="",x="";return s&&(p=s(p)),!!i(p)&&(!1!==t&&0===parseFloat(p.toFixed(t))&&(p=0),p<0&&(d=!0,p=Math.abs(p)),!1!==t&&(m=t,b=(b=p).toString().split("e"),p=(+((b=(b=Math.round(+(b[0]+"e"+(b[1]?+b[1]+m:m)))).toString().split("e"))[0]+"e"+(b[1]?+b[1]-m:-m))).toFixed(m)),-1!==(p=p.toString()).indexOf(".")?(v=(g=p.split("."))[0],r&&(y=r+g[1])):v=p,n&&(v=e(v).match(/.{1,3}/g),v=e(v.join(e(n)))),d&&l&&(x+=l),o&&(x+=o),d&&c&&(x+=c),x+=v,x+=y,a&&(x+=a),h&&(x=h(x,_)),x)}function a(t,e,r,o,a,s,u,l,c,h,f,p){var d,g="";return f&&(p=f(p)),!(!p||"string"!=typeof p)&&(l&&n(p,l)&&(p=p.replace(l,""),d=!0),o&&n(p,o)&&(p=p.replace(o,"")),c&&n(p,c)&&(p=p.replace(c,""),d=!0),a&&function(t,e){return t.slice(-1*e.length)===e}(p,a)&&(p=p.slice(0,-1*a.length)),e&&(p=p.split(e).join("")),r&&(p=p.replace(r,".")),d&&(g+="-"),""!==(g=(g+=p).replace(/[^0-9\.\-.]/g,""))&&(g=Number(g),u&&(g=u(g)),!!i(g)&&g))}function s(e,n,r){var i,o=[];for(i=0;i<t.length;i+=1)o.push(e[t[i]]);return o.push(r),n.apply("",o)}return function e(n){if(!(this instanceof e))return new e(n);"object"==typeof n&&(n=function(e){var n,i,o,a={};for(void 0===e.suffix&&(e.suffix=e.postfix),n=0;n<t.length;n+=1)if(void 0===(o=e[i=t[n]]))"negative"!==i||a.negativeBefore?"mark"===i&&"."!==a.thousand?a[i]=".":a[i]=!1:a[i]="-";else if("decimals"===i){if(!(o>=0&&o<8))throw new Error(i);a[i]=o}else if("encoder"===i||"decoder"===i||"edit"===i||"undo"===i){if("function"!=typeof o)throw new Error(i);a[i]=o}else{if("string"!=typeof o)throw new Error(i);a[i]=o}return r(a,"mark","thousand"),r(a,"prefix","negative"),r(a,"prefix","negativeBefore"),a}(n),this.to=function(t){return s(n,o,t)},this.from=function(t){return s(n,a,t)})}})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(9);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,'/* Tabulator v4.4.3 (c) Oliver Folkerd */\n.tabulator{position:relative;border:1px solid #999;background-color:#888;font-size:14px;text-align:left;overflow:hidden;transform:translatez(0)}.tabulator[tabulator-layout=fitDataFill] .tabulator-tableHolder .tabulator-table{min-width:100%}.tabulator.tabulator-block-select{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.tabulator .tabulator-header{position:relative;box-sizing:border-box;width:100%;border-bottom:1px solid #999;background-color:#e6e6e6;color:#555;font-weight:700;white-space:nowrap;overflow:hidden;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator .tabulator-header.tabulator-header-hidden{display:none}.tabulator .tabulator-header .tabulator-col{display:inline-block;position:relative;box-sizing:border-box;border-right:1px solid #aaa;background:#e6e6e6;text-align:left;vertical-align:bottom;overflow:hidden}.tabulator .tabulator-header .tabulator-col.tabulator-moving{position:absolute;border:1px solid #999;background:#cdcdcd;pointer-events:none}.tabulator .tabulator-header .tabulator-col .tabulator-col-content{box-sizing:border-box;position:relative;padding:4px}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title{box-sizing:border-box;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;vertical-align:bottom}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor{box-sizing:border-box;width:100%;border:1px solid #999;padding:1px;background:#fff}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-arrow{display:inline-block;position:absolute;top:9px;right:8px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #bbb}.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols{position:relative;display:-ms-flexbox;display:flex;border-top:1px solid #aaa;overflow:hidden}.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols .tabulator-col:last-child{margin-right:-1px}.tabulator .tabulator-header .tabulator-col:first-child .tabulator-col-resize-handle.prev{display:none}.tabulator .tabulator-header .tabulator-col.ui-sortable-helper{position:absolute;background-color:#e6e6e6!important;border:1px solid #aaa}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter{position:relative;box-sizing:border-box;margin-top:2px;width:100%;text-align:center}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea{height:auto!important}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg{margin-top:3px}.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear{width:0;height:0}.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title{padding-right:25px}.tabulator .tabulator-header .tabulator-col.tabulator-sortable:hover{cursor:pointer;background-color:#cdcdcd}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-arrow{border-top:none;border-bottom:6px solid #bbb}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=asc] .tabulator-col-content .tabulator-arrow{border-top:none;border-bottom:6px solid #666}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=desc] .tabulator-col-content .tabulator-arrow{border-top:6px solid #666;border-bottom:none}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title{-ms-writing-mode:tb-rl;writing-mode:vertical-rl;text-orientation:mixed;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title{transform:rotate(180deg)}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title{padding-right:0;padding-top:20px}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title{padding-right:0;padding-bottom:20px}.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-arrow{right:calc(50% - 6px)}.tabulator .tabulator-header .tabulator-frozen{display:inline-block;position:absolute;z-index:10}.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left{border-right:2px solid #aaa}.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator .tabulator-header .tabulator-calcs-holder{box-sizing:border-box;min-width:600%;background:#f3f3f3!important;border-top:1px solid #aaa;border-bottom:1px solid #aaa;overflow:hidden}.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row{background:#f3f3f3!important}.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle{display:none}.tabulator .tabulator-header .tabulator-frozen-rows-holder{min-width:600%}.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty{display:none}.tabulator .tabulator-tableHolder{position:relative;width:100%;white-space:nowrap;overflow:auto;-webkit-overflow-scrolling:touch}.tabulator .tabulator-tableHolder:focus{outline:none}.tabulator .tabulator-tableHolder .tabulator-placeholder{box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%}.tabulator .tabulator-tableHolder .tabulator-placeholder[tabulator-render-mode=virtual]{position:absolute;top:0;left:0;height:100%}.tabulator .tabulator-tableHolder .tabulator-placeholder span{display:inline-block;margin:0 auto;padding:10px;color:#ccc;font-weight:700;font-size:20px}.tabulator .tabulator-tableHolder .tabulator-table{position:relative;display:inline-block;background-color:#fff;white-space:nowrap;overflow:visible;color:#333}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs{font-weight:700;background:#e2e2e2!important}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top{border-bottom:2px solid #aaa}.tabulator .tabulator-tableHolder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom{border-top:2px solid #aaa}.tabulator .tabulator-footer{padding:5px 10px;border-top:1px solid #999;background-color:#e6e6e6;text-align:right;color:#555;font-weight:700;white-space:nowrap;-ms-user-select:none;user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator .tabulator-footer .tabulator-calcs-holder{box-sizing:border-box;width:calc(100% + 20px);margin:-5px -10px 5px;text-align:left;background:#f3f3f3!important;border-bottom:1px solid #aaa;border-top:1px solid #aaa;overflow:hidden}.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row{background:#f3f3f3!important}.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle{display:none}.tabulator .tabulator-footer .tabulator-calcs-holder:only-child{margin-bottom:-5px;border-bottom:none}.tabulator .tabulator-footer .tabulator-paginator{color:#555;font-family:inherit;font-weight:inherit;font-size:inherit}.tabulator .tabulator-footer .tabulator-page-size{display:inline-block;margin:0 5px;padding:2px 5px;border:1px solid #aaa;border-radius:3px}.tabulator .tabulator-footer .tabulator-pages{margin:0 7px}.tabulator .tabulator-footer .tabulator-page{display:inline-block;margin:0 2px;padding:2px 5px;border:1px solid #aaa;border-radius:3px;background:hsla(0,0%,100%,.2)}.tabulator .tabulator-footer .tabulator-page.active{color:#d00}.tabulator .tabulator-footer .tabulator-page:disabled{opacity:.5}.tabulator .tabulator-footer .tabulator-page:not(.disabled):hover{cursor:pointer;background:rgba(0,0,0,.2);color:#fff}.tabulator .tabulator-col-resize-handle{position:absolute;right:0;top:0;bottom:0;width:5px}.tabulator .tabulator-col-resize-handle.prev{left:0;right:auto}.tabulator .tabulator-col-resize-handle:hover{cursor:ew-resize}.tabulator .tabulator-loader{position:absolute;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;top:0;left:0;z-index:100;height:100%;width:100%;background:rgba(0,0,0,.4);text-align:center}.tabulator .tabulator-loader .tabulator-loader-msg{display:inline-block;margin:0 auto;padding:10px 20px;border-radius:10px;background:#fff;font-weight:700;font-size:16px}.tabulator .tabulator-loader .tabulator-loader-msg.tabulator-loading{border:4px solid #333;color:#000}.tabulator .tabulator-loader .tabulator-loader-msg.tabulator-error{border:4px solid #d00;color:#590000}.tabulator-row{position:relative;box-sizing:border-box;min-height:22px;background-color:#fff}.tabulator-row.tabulator-row-even{background-color:#efefef}.tabulator-row.tabulator-selectable:hover{background-color:#bbb;cursor:pointer}.tabulator-row.tabulator-selected{background-color:#9abcea}.tabulator-row.tabulator-selected:hover{background-color:#769bcc;cursor:pointer}.tabulator-row.tabulator-row-moving{border:1px solid #000;background:#fff}.tabulator-row.tabulator-moving{position:absolute;border-top:1px solid #aaa;border-bottom:1px solid #aaa;pointer-events:none;z-index:15}.tabulator-row .tabulator-row-resize-handle{position:absolute;right:0;bottom:0;left:0;height:5px}.tabulator-row .tabulator-row-resize-handle.prev{top:0;bottom:auto}.tabulator-row .tabulator-row-resize-handle:hover{cursor:ns-resize}.tabulator-row .tabulator-frozen{display:inline-block;position:absolute;background-color:inherit;z-index:10}.tabulator-row .tabulator-frozen.tabulator-frozen-left{border-right:2px solid #aaa}.tabulator-row .tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator-row .tabulator-responsive-collapse{box-sizing:border-box;padding:5px;border-top:1px solid #aaa;border-bottom:1px solid #aaa}.tabulator-row .tabulator-responsive-collapse:empty{display:none}.tabulator-row .tabulator-responsive-collapse table{font-size:14px}.tabulator-row .tabulator-responsive-collapse table tr td{position:relative}.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type{padding-right:10px}.tabulator-row .tabulator-cell{display:inline-block;position:relative;box-sizing:border-box;padding:4px;border-right:1px solid #aaa;vertical-align:middle;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.tabulator-row .tabulator-cell.tabulator-editing{border:1px solid #1d68cd;padding:0}.tabulator-row .tabulator-cell.tabulator-editing input,.tabulator-row .tabulator-cell.tabulator-editing select{border:1px;background:transparent}.tabulator-row .tabulator-cell.tabulator-validation-fail{border:1px solid #d00}.tabulator-row .tabulator-cell.tabulator-validation-fail input,.tabulator-row .tabulator-cell.tabulator-validation-fail select{border:1px;background:transparent;color:#d00}.tabulator-row .tabulator-cell:first-child .tabulator-col-resize-handle.prev{display:none}.tabulator-row .tabulator-cell.tabulator-row-handle{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box{width:80%}.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar{width:100%;height:3px;margin-top:2px;background:#666}.tabulator-row .tabulator-cell .tabulator-data-tree-branch{display:inline-block;vertical-align:middle;height:9px;width:7px;margin-top:-9px;margin-right:5px;border-bottom-left-radius:1px;border-left:2px solid #aaa;border-bottom:2px solid #aaa}.tabulator-row .tabulator-cell .tabulator-data-tree-control{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;vertical-align:middle;height:11px;width:11px;margin-right:5px;border:1px solid #333;border-radius:2px;background:rgba(0,0,0,.1);overflow:hidden}.tabulator-row .tabulator-cell .tabulator-data-tree-control:hover{cursor:pointer;background:rgba(0,0,0,.2)}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse{display:inline-block;position:relative;height:7px;width:1px;background:transparent}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after{position:absolute;content:"";left:-3px;top:3px;height:1px;width:7px;background:#333}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand{display:inline-block;position:relative;height:7px;width:1px;background:#333}.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after{position:absolute;content:"";left:-3px;top:3px;height:1px;width:7px;background:#333}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none;height:15px;width:15px;border-radius:20px;background:#666;color:#fff;font-weight:700;font-size:1.1em}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover{opacity:.7}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close{display:initial}.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open,.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close{display:none}.tabulator-row .tabulator-cell .tabulator-traffic-light{display:inline-block;height:14px;width:14px;border-radius:14px}.tabulator-row.tabulator-group{box-sizing:border-box;border-bottom:1px solid #999;border-right:1px solid #aaa;border-top:1px solid #999;padding:5px;padding-left:10px;background:#ccc;font-weight:700;min-width:100%}.tabulator-row.tabulator-group:hover{cursor:pointer;background-color:rgba(0,0,0,.1)}.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow{margin-right:10px;border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #666;border-bottom:0}.tabulator-row.tabulator-group.tabulator-group-level-1{padding-left:30px}.tabulator-row.tabulator-group.tabulator-group-level-2{padding-left:50px}.tabulator-row.tabulator-group.tabulator-group-level-3{padding-left:70px}.tabulator-row.tabulator-group.tabulator-group-level-4{padding-left:90px}.tabulator-row.tabulator-group.tabulator-group-level-5{padding-left:110px}.tabulator-row.tabulator-group .tabulator-arrow{display:inline-block;width:0;height:0;margin-right:16px;border-top:6px solid transparent;border-bottom:6px solid transparent;border-right:0;border-left:6px solid #666;vertical-align:middle}.tabulator-row.tabulator-group span{margin-left:10px;color:#d00}.tabulator-edit-select-list{position:absolute;display:inline-block;box-sizing:border-box;max-height:200px;background:#fff;border:1px solid #aaa;font-size:14px;overflow-y:auto;-webkit-overflow-scrolling:touch;z-index:10000}.tabulator-edit-select-list .tabulator-edit-select-list-item{padding:4px;color:#333}.tabulator-edit-select-list .tabulator-edit-select-list-item.active{color:#fff;background:#1d68cd}.tabulator-edit-select-list .tabulator-edit-select-list-item:hover{cursor:pointer;color:#fff;background:#1d68cd}.tabulator-edit-select-list .tabulator-edit-select-list-group{border-bottom:1px solid #aaa;padding:4px;padding-top:6px;color:#333;font-weight:700}.tabulator-print-fullscreen{position:absolute;top:0;bottom:0;left:0;right:0;z-index:10000}body.tabulator-print-fullscreen-hide>:not(.tabulator-print-fullscreen){display:none!important}.tabulator-print-table{border-collapse:collapse}\n',""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(t,e,n){var r=n(12);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,'/*! nouislider - 13.1.5 - 4/24/2019 */\n.noUi-target,.noUi-target *{-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-ms-touch-action:none;touch-action:none;-ms-user-select:none;-moz-user-select:none;user-select:none;-moz-box-sizing:border-box;box-sizing:border-box}.noUi-target{position:relative;direction:ltr}.noUi-base,.noUi-connects{width:100%;height:100%;position:relative;z-index:1}.noUi-connects{overflow:hidden;z-index:0}.noUi-connect,.noUi-origin{will-change:transform;position:absolute;z-index:1;top:0;left:0;height:100%;width:100%;-ms-transform-origin:0 0;-webkit-transform-origin:0 0;-webkit-transform-style:preserve-3d;transform-origin:0 0;transform-style:flat}html:not([dir=rtl]) .noUi-horizontal .noUi-origin{left:auto;right:0}.noUi-vertical .noUi-origin{width:0}.noUi-horizontal .noUi-origin{height:0}.noUi-handle{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute}.noUi-touch-area{height:100%;width:100%}.noUi-state-tap .noUi-connect,.noUi-state-tap .noUi-origin{-webkit-transition:transform .3s;transition:transform .3s}.noUi-state-drag *{cursor:inherit!important}.noUi-horizontal{height:18px}.noUi-horizontal .noUi-handle{width:34px;height:28px;left:-17px;top:-6px}.noUi-vertical{width:18px}.noUi-vertical .noUi-handle{width:28px;height:34px;left:-6px;top:-17px}html:not([dir=rtl]) .noUi-horizontal .noUi-handle{right:-17px;left:auto}.noUi-target{background:#FAFAFA;border-radius:4px;border:1px solid #D3D3D3;box-shadow:inset 0 1px 1px #F0F0F0,0 3px 6px -5px #BBB}.noUi-connects{border-radius:3px}.noUi-connect{background:#3FB8AF}.noUi-draggable{cursor:ew-resize}.noUi-vertical .noUi-draggable{cursor:ns-resize}.noUi-handle{border:1px solid #D9D9D9;border-radius:3px;background:#FFF;cursor:default;box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #EBEBEB,0 3px 6px -3px #BBB}.noUi-active{box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #DDD,0 3px 6px -3px #BBB}.noUi-handle:after,.noUi-handle:before{content:"";display:block;position:absolute;height:14px;width:1px;background:#E8E7E6;left:14px;top:6px}.noUi-handle:after{left:17px}.noUi-vertical .noUi-handle:after,.noUi-vertical .noUi-handle:before{width:14px;height:1px;left:6px;top:14px}.noUi-vertical .noUi-handle:after{top:17px}[disabled] .noUi-connect{background:#B8B8B8}[disabled] .noUi-handle,[disabled].noUi-handle,[disabled].noUi-target{cursor:not-allowed}.noUi-pips,.noUi-pips *{-moz-box-sizing:border-box;box-sizing:border-box}.noUi-pips{position:absolute;color:#999}.noUi-value{position:absolute;white-space:nowrap;text-align:center}.noUi-value-sub{color:#ccc;font-size:10px}.noUi-marker{position:absolute;background:#CCC}.noUi-marker-sub{background:#AAA}.noUi-marker-large{background:#AAA}.noUi-pips-horizontal{padding:10px 0;height:80px;top:100%;left:0;width:100%}.noUi-value-horizontal{-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}.noUi-rtl .noUi-value-horizontal{-webkit-transform:translate(50%,50%);transform:translate(50%,50%)}.noUi-marker-horizontal.noUi-marker{margin-left:-1px;width:2px;height:5px}.noUi-marker-horizontal.noUi-marker-sub{height:10px}.noUi-marker-horizontal.noUi-marker-large{height:15px}.noUi-pips-vertical{padding:0 10px;height:100%;top:0;left:100%}.noUi-value-vertical{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);padding-left:25px}.noUi-rtl .noUi-value-vertical{-webkit-transform:translate(0,50%);transform:translate(0,50%)}.noUi-marker-vertical.noUi-marker{width:5px;height:2px;margin-top:-1px}.noUi-marker-vertical.noUi-marker-sub{width:10px}.noUi-marker-vertical.noUi-marker-large{width:15px}.noUi-tooltip{display:block;position:absolute;border:1px solid #D9D9D9;border-radius:3px;background:#fff;color:#000;padding:5px;text-align:center;white-space:nowrap}.noUi-horizontal .noUi-tooltip{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);left:50%;bottom:120%}.noUi-vertical .noUi-tooltip{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);top:50%;right:120%}',""])},function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=(o.left,a);var u=function(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},l=Array.prototype,c=(l.slice,l.map,Math.sqrt(50)),h=Math.sqrt(10),f=Math.sqrt(2),p=function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=d(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o};function d(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=c?10:o>=h?5:o>=f?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=c?10:o>=h?5:o>=f?2:1)}function g(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=c?i*=10:o>=h?i*=5:o>=f&&(i*=2),e<t?-i:i}var v=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--a]=r[e];return n};var b=Array.prototype.slice,m=function(t){return t},_=1,y=2,x=3,w=4,M=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function S(t){return"translate(0,"+(t+.5)+")"}function C(t){return function(e){return+t(e)}}function E(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function N(){return!this.__axis}function U(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u=t===_||t===w?-1:1,l=t===w||t===y?"x":"y",c=t===_||t===x?k:S;function h(h){var f=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):m:i,d=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,b=+g[g.length-1]+.5,k=(e.bandwidth?E:C)(e.copy()),S=h.selection?h.selection():h,U=S.selectAll(".domain").data([null]),T=S.selectAll(".tick").data(f,e).order(),A=T.exit(),z=T.enter().append("g").attr("class","tick"),D=T.select("line"),F=T.select("text");U=U.merge(U.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),T=T.merge(z),D=D.merge(z.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),F=F.merge(z.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",t===_?"0em":t===x?"0.71em":"0.32em")),h!==S&&(U=U.transition(h),T=T.transition(h),D=D.transition(h),F=F.transition(h),A=A.transition(h).attr("opacity",M).attr("transform",(function(t){return isFinite(t=k(t))?c(t):this.getAttribute("transform")})),z.attr("opacity",M).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:k(t))}))),A.remove(),U.attr("d",t===w||t==y?a?"M"+u*a+","+v+"H0.5V"+b+"H"+u*a:"M0.5,"+v+"V"+b:a?"M"+v+","+u*a+"V0.5H"+b+"V"+u*a:"M"+v+",0.5H"+b),T.attr("opacity",1).attr("transform",(function(t){return c(k(t))})),D.attr(l+"2",u*o),F.attr(l,u*d).text(p),S.filter(N).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===y?"start":t===w?"end":"middle"),S.each((function(){this.__axis=k}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=b.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:b.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:b.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function T(t){return U(w,t)}var A={value:function(){}};function z(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new D(r)}function D(t){this._=t}function F(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function L(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function P(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=A,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}D.prototype=z.prototype={constructor:D,on:function(t,e){var n,r=this._,i=F(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=P(r[n],t.name,e);else if(null==e)for(n in r)r[n]=P(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=L(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new D(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var B=z,R="http://www.w3.org/1999/xhtml",H={svg:"http://www.w3.org/2000/svg",xhtml:R,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},O=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),H.hasOwnProperty(e)?{space:H[e],local:t}:t};function I(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===R&&e.documentElement.namespaceURI===R?e.createElement(t):e.createElementNS(n,t)}}function j(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var V=function(t){var e=O(t);return(e.local?j:I)(e)};function q(){}var Y=function(t){return null==t?q:function(){return this.querySelector(t)}};function $(){return[]}var X=function(t){return null==t?$:function(){return this.querySelectorAll(t)}},W=function(t){return function(){return this.matches(t)}},Z=function(t){return new Array(t.length)};function J(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}J.prototype={constructor:J,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Q="$";function G(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new J(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function K(t,e,n,r,i,o,a){var s,u,l,c={},h=e.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=e[s])&&(p[s]=l=Q+a.call(u,u.__data__,s,e),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=Q+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):n[s]=new J(t,o[s]);for(s=0;s<h;++s)(u=e[s])&&c[p[s]]===u&&(i[s]=u)}function tt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function et(t){return function(){this.removeAttribute(t)}}function nt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function rt(t,e){return function(){this.setAttribute(t,e)}}function it(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ot(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function at(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var st=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ut(t){return function(){this.style.removeProperty(t)}}function lt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function ct(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function ht(t,e){return t.style.getPropertyValue(e)||st(t).getComputedStyle(t,null).getPropertyValue(e)}function ft(t){return function(){delete this[t]}}function pt(t,e){return function(){this[t]=e}}function dt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function gt(t){return t.trim().split(/^|\s+/)}function vt(t){return t.classList||new bt(t)}function bt(t){this._node=t,this._names=gt(t.getAttribute("class")||"")}function mt(t,e){for(var n=vt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function _t(t,e){for(var n=vt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function yt(t){return function(){mt(this,t)}}function xt(t){return function(){_t(this,t)}}function wt(t,e){return function(){(e.apply(this,arguments)?mt:_t)(this,t)}}bt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Mt(){this.textContent=""}function kt(t){return function(){this.textContent=t}}function St(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ct(){this.innerHTML=""}function Et(t){return function(){this.innerHTML=t}}function Nt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Ut(){this.nextSibling&&this.parentNode.appendChild(this)}function Tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function At(){return null}function zt(){var t=this.parentNode;t&&t.removeChild(this)}function Dt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ft(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Lt={},Pt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Lt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Bt(t,e,n){return t=Rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Rt(t,e,n){return function(r){var i=Pt;Pt=r;try{t.call(this,this.__data__,e,n)}finally{Pt=i}}}function Ht(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Ot(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function It(t,e,n){var r=Lt.hasOwnProperty(t.type)?Bt:Rt;return function(i,o,a){var s,u=this.__on,l=r(e,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(s):this.__on=[s]}}function jt(t,e,n){var r=st(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Vt(t,e){return function(){return jt(this,t,e)}}function qt(t,e){return function(){return jt(this,t,e.apply(this,arguments))}}var Yt=[null];function $t(t,e){this._groups=t,this._parents=e}function Xt(){return new $t([[document.documentElement]],Yt)}$t.prototype=Xt.prototype={constructor:$t,select:function(t){"function"!=typeof t&&(t=Y(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new $t(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=X(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new $t(r,i)},filter:function(t){"function"!=typeof t&&(t=W(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new $t(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?K:G,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),b=s[c]=new Array(g);r(h,f,v,b,l[c]=new Array(p),d,e);for(var m,_,y=0,x=0;y<g;++y)if(m=v[y]){for(y>=x&&(x=y+1);!(_=b[x])&&++x<g;);m._next=_||null}}return(s=new $t(s,i))._enter=u,s._exit=l,s},enter:function(){return new $t(this._enter||this._groups.map(Z),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(Z),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new $t(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=tt);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new $t(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=O(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?nt:et:"function"==typeof e?n.local?at:ot:n.local?it:rt)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ut:"function"==typeof e?ct:lt)(t,e,null==n?"":n)):ht(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?ft:"function"==typeof e?dt:pt)(t,e)):this.node()[t]},classed:function(t,e){var n=gt(t+"");if(arguments.length<2){for(var r=vt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?wt:e?yt:xt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Mt:("function"==typeof t?St:kt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ct:("function"==typeof t?Nt:Et)(t)):this.node().innerHTML},raise:function(){return this.each(Ut)},lower:function(){return this.each(Tt)},append:function(t){var e="function"==typeof t?t:V(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:V(t),r=null==e?At:"function"==typeof e?e:Y(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(zt)},clone:function(t){return this.select(t?Ft:Dt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=Ht(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?It:Ot,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?qt:Vt)(t,e))}};var Wt=Xt,Zt=function(t){return"string"==typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Yt)},Jt=0;function Qt(){this._="@"+(++Jt).toString(36)}Qt.prototype=function(){return new Qt}.prototype={constructor:Qt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Gt(t,e,n,r,i,o,a,s,u,l){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=u,this._=l}Gt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Kt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function te(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ee(){}var ne="\\s*([+-]?\\d+)\\s*",re="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ie="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",oe=/^#([0-9a-f]{3,8})$/,ae=new RegExp("^rgb\\("+[ne,ne,ne]+"\\)$"),se=new RegExp("^rgb\\("+[ie,ie,ie]+"\\)$"),ue=new RegExp("^rgba\\("+[ne,ne,ne,re]+"\\)$"),le=new RegExp("^rgba\\("+[ie,ie,ie,re]+"\\)$"),ce=new RegExp("^hsl\\("+[re,ie,ie]+"\\)$"),he=new RegExp("^hsla\\("+[re,ie,ie,re]+"\\)$"),fe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function pe(){return this.rgb().formatHex()}function de(){return this.rgb().formatRgb()}function ge(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=oe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ve(e):3===n?new ye(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new ye(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new ye(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ae.exec(t))?new ye(e[1],e[2],e[3],1):(e=se.exec(t))?new ye(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ue.exec(t))?be(e[1],e[2],e[3],e[4]):(e=le.exec(t))?be(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ce.exec(t))?ke(e[1],e[2]/100,e[3]/100,1):(e=he.exec(t))?ke(e[1],e[2]/100,e[3]/100,e[4]):fe.hasOwnProperty(t)?ve(fe[t]):"transparent"===t?new ye(NaN,NaN,NaN,0):null}function ve(t){return new ye(t>>16&255,t>>8&255,255&t,1)}function be(t,e,n,r){return r<=0&&(t=e=n=NaN),new ye(t,e,n,r)}function me(t){return t instanceof ee||(t=ge(t)),t?new ye((t=t.rgb()).r,t.g,t.b,t.opacity):new ye}function _e(t,e,n,r){return 1===arguments.length?me(t):new ye(t,e,n,null==r?1:r)}function ye(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function xe(){return"#"+Me(this.r)+Me(this.g)+Me(this.b)}function we(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Me(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ke(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ee(t,e,n,r)}function Se(t){if(t instanceof Ee)return new Ee(t.h,t.s,t.l,t.opacity);if(t instanceof ee||(t=ge(t)),!t)return new Ee;if(t instanceof Ee)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Ee(a,s,u,t.opacity)}function Ce(t,e,n,r){return 1===arguments.length?Se(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ne(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Ue(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}Kt(ee,ge,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:pe,formatHex:pe,formatHsl:function(){return Se(this).formatHsl()},formatRgb:de,toString:de}),Kt(ye,_e,te(ee,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:xe,formatHex:xe,formatRgb:we,toString:we})),Kt(Ee,Ce,te(ee,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new ye(Ne(t>=240?t-240:t+120,i,r),Ne(t,i,r),Ne(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Te=function(t){return function(){return t}};function Ae(t,e){return function(n){return t+n*e}}function ze(t,e){var n=e-t;return n?Ae(t,n>180||n<-180?n-360*Math.round(n/360):n):Te(isNaN(t)?e:t)}function De(t){return 1==(t=+t)?Fe:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Te(isNaN(e)?n:e)}}function Fe(t,e){var n=e-t;return n?Ae(t,n):Te(isNaN(t)?e:t)}var Le=function t(e){var n=De(e);function r(t,e){var r=n((t=_e(t)).r,(e=_e(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Fe(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Pe(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=_e(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}Pe((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Ue((n-r/e)*e,a,i,o,s)}})),Pe((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Ue((n-r/e)*e,i,o,a,s)}}));var Be=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=We(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},Re=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},He=function(t,e){return e-=t=+t,function(n){return t+e*n}},Oe=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=We(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Ie=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,je=new RegExp(Ie.source,"g");var Ve,qe,Ye,$e,Xe=function(t,e){var n,r,i,o=Ie.lastIndex=je.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=Ie.exec(t))&&(r=je.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:He(n,r)})),o=je.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})},We=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Te(e):("number"===r?He:"string"===r?(n=ge(e))?(e=n,Le):Xe:e instanceof ge?Le:e instanceof Date?Re:Array.isArray(e)?Be:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Oe:He)(t,e)},Ze=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Je=180/Math.PI,Qe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Ge=function(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Je,skewX:Math.atan(u)*Je,scaleX:a,scaleY:s}};function Ke(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:He(t,i)},{i:u-2,x:He(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:He(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:He(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:He(t,n)},{i:s-2,x:He(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var tn=Ke((function(t){return"none"===t?Qe:(Ve||(Ve=document.createElement("DIV"),qe=document.documentElement,Ye=document.defaultView),Ve.style.transform=t,t=Ye.getComputedStyle(qe.appendChild(Ve),null).getPropertyValue("transform"),qe.removeChild(Ve),t=t.slice(7,-1).split(","),Ge(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),en=Ke((function(t){return null==t?Qe:($e||($e=document.createElementNS("http://www.w3.org/2000/svg","g")),$e.setAttribute("transform",t),(t=$e.transform.baseVal.consolidate())?(t=t.matrix,Ge(t.a,t.b,t.c,t.d,t.e,t.f)):Qe)}),", ",")",")");Math.SQRT2;function nn(t){return function(e,n){var r=t((e=Ce(e)).h,(n=Ce(n)).h),i=Fe(e.s,n.s),o=Fe(e.l,n.l),a=Fe(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}nn(ze),nn(Fe);var rn=Math.PI/180,on=180/Math.PI,an=.96422,sn=1,un=.82521,ln=4/29,cn=6/29,hn=3*cn*cn,fn=cn*cn*cn;function pn(t){if(t instanceof gn)return new gn(t.l,t.a,t.b,t.opacity);if(t instanceof wn)return Mn(t);t instanceof ye||(t=me(t));var e,n,r=_n(t.r),i=_n(t.g),o=_n(t.b),a=vn((.2225045*r+.7168786*i+.0606169*o)/sn);return r===i&&i===o?e=n=a:(e=vn((.4360747*r+.3850649*i+.1430804*o)/an),n=vn((.0139322*r+.0971045*i+.7141733*o)/un)),new gn(116*a-16,500*(e-a),200*(a-n),t.opacity)}function dn(t,e,n,r){return 1===arguments.length?pn(t):new gn(t,e,n,null==r?1:r)}function gn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function vn(t){return t>fn?Math.pow(t,1/3):t/hn+ln}function bn(t){return t>cn?t*t*t:hn*(t-ln)}function mn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function _n(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function yn(t){if(t instanceof wn)return new wn(t.h,t.c,t.l,t.opacity);if(t instanceof gn||(t=pn(t)),0===t.a&&0===t.b)return new wn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*on;return new wn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function xn(t,e,n,r){return 1===arguments.length?yn(t):new wn(t,e,n,null==r?1:r)}function wn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Mn(t){if(isNaN(t.h))return new gn(t.l,0,0,t.opacity);var e=t.h*rn;return new gn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function kn(t){return function(e,n){var r=t((e=xn(e)).h,(n=xn(n)).h),i=Fe(e.c,n.c),o=Fe(e.l,n.l),a=Fe(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}Kt(gn,dn,te(ee,{brighter:function(t){return new gn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new gn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ye(mn(3.1338561*(e=an*bn(e))-1.6168667*(t=sn*bn(t))-.4906146*(n=un*bn(n))),mn(-.9787684*e+1.9161415*t+.033454*n),mn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Kt(wn,xn,te(ee,{brighter:function(t){return new wn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new wn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mn(this).rgb()}}));kn(ze),kn(Fe);var Sn=-.29227,Cn=-.90649,En=1.97294,Nn=En*Cn,Un=1.78277*En,Tn=1.78277*Sn- -.14861*Cn;function An(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof zn)return new zn(t.h,t.s,t.l,t.opacity);t instanceof ye||(t=me(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Tn*r+Nn*e-Un*n)/(Tn+Nn-Un),o=r-i,a=(En*(n-i)-Sn*o)/Cn,s=Math.sqrt(a*a+o*o)/(En*i*(1-i)),u=s?Math.atan2(a,o)*on-120:NaN;return new zn(u<0?u+360:u,s,i,t.opacity)}(t):new zn(t,e,n,null==r?1:r)}function zn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Dn(t){return function e(n){function r(e,r){var i=t((e=An(e)).h,(r=An(r)).h),o=Fe(e.s,r.s),a=Fe(e.l,r.l),s=Fe(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}Kt(zn,An,te(ee,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new zn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new zn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*rn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new ye(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(Sn*r+Cn*i)),255*(e+n*(En*r)),this.opacity)}}));Dn(ze),Dn(Fe);var Fn,Ln,Pn=0,Bn=0,Rn=0,Hn=1e3,On=0,In=0,jn=0,Vn="object"==typeof performance&&performance.now?performance:Date,qn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Yn(){return In||(qn($n),In=Vn.now()+jn)}function $n(){In=0}function Xn(){this._call=this._time=this._next=null}function Wn(t,e,n){var r=new Xn;return r.restart(t,e,n),r}function Zn(){In=(On=Vn.now())+jn,Pn=Bn=0;try{!function(){Yn(),++Pn;for(var t,e=Fn;e;)(t=In-e._time)>=0&&e._call.call(null,t),e=e._next;--Pn}()}finally{Pn=0,function(){var t,e,n=Fn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Fn=e);Ln=t,Qn(r)}(),In=0}}function Jn(){var t=Vn.now(),e=t-On;e>Hn&&(jn-=e,On=t)}function Qn(t){Pn||(Bn&&(Bn=clearTimeout(Bn)),t-In>24?(t<1/0&&(Bn=setTimeout(Zn,t-Vn.now()-jn)),Rn&&(Rn=clearInterval(Rn))):(Rn||(On=Vn.now(),Rn=setInterval(Jn,Hn)),Pn=1,qn(Zn)))}Xn.prototype=Wn.prototype={constructor:Xn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Yn():+n)+(null==e?0:+e),this._next||Ln===this||(Ln?Ln._next=this:Fn=this,Ln=this),this._call=t,this._time=n,Qn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qn())}};var Gn=function(t,e,n){var r=new Xn;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Kn=B("start","end","cancel","interrupt"),tr=[],er=0,nr=1,rr=2,ir=3,or=4,ar=5,sr=6,ur=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,h,f;if(n.state!==nr)return s();for(l in i)if((f=i[l]).name===n.name){if(f.state===ir)return Gn(o);f.state===or?(f.state=sr,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<e&&(f.state=sr,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Gn((function(){n.state===ir&&(n.state=or,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=rr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===rr){for(n.state=ir,r=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=ar,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===ar&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=sr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Wn((function(t){n.state=nr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Kn,tween:tr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:er})};function lr(t,e){var n=hr(t,e);if(n.state>er)throw new Error("too late; already scheduled");return n}function cr(t,e){var n=hr(t,e);if(n.state>ir)throw new Error("too late; already running");return n}function hr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var fr=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>rr&&n.state<ar,n.state=sr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}};function pr(t,e){var n,r;return function(){var i=cr(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function dr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=cr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function gr(t,e,n){var r=t._id;return t.each((function(){var t=cr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return hr(t,r).value[e]}}var vr=function(t,e){var n;return("number"==typeof e?He:e instanceof ge?Le:(n=ge(e))?(e=n,Le):Xe)(t,e)};function br(t){return function(){this.removeAttribute(t)}}function mr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _r(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function yr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function xr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function wr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Mr(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}function kr(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i}function Sr(t,e){return function(){lr(this,t).delay=+e.apply(this,arguments)}}function Cr(t,e){return e=+e,function(){lr(this,t).delay=e}}function Er(t,e){return function(){cr(this,t).duration=+e.apply(this,arguments)}}function Nr(t,e){return e=+e,function(){cr(this,t).duration=e}}function Ur(t,e){if("function"!=typeof e)throw new Error;return function(){cr(this,t).ease=e}}function Tr(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?lr:cr;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var Ar=Wt.prototype.constructor;function zr(t){return function(){this.style.removeProperty(t)}}function Dr(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,o,n)),r}return o._value=e,o}var Fr=0;function Lr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Pr(){return++Fr}var Br=Wt.prototype;Lr.prototype=function(t){return Wt().transition(t)}.prototype={constructor:Lr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Y(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,ur(h[f],e,n,f,h,hr(s,n)));return new Lr(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=X(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=hr(u,n),g=0,v=p.length;g<v;++g)(f=p[g])&&ur(f,e,n,g,p,d);o.push(p),a.push(u)}return new Lr(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=W(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Lr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new Lr(a,this._parents,this._name,this._id)},selection:function(){return new Ar(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Pr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=hr(a,e);ur(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Lr(r,this._parents,t,n)},call:Br.call,nodes:Br.nodes,node:Br.node,size:Br.size,empty:Br.empty,each:Br.each,on:function(t,e){var n=this._id;return arguments.length<2?hr(this.node(),n).on.on(t):this.each(Tr(n,t,e))},attr:function(t,e){var n=O(t),r="transform"===n?en:vr;return this.attrTween(t,"function"==typeof e?(n.local?wr:xr)(n,r,gr(this,"attr."+t,e)):null==e?(n.local?mr:br)(n):(n.local?yr:_r)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=O(t);return this.tween(n,(r.local?Mr:kr)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?tn:vr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=ht(this,t),a=(this.style.removeProperty(t),ht(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,zr(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=ht(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=ht(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,gr(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=cr(this,t),l=u.on,c=null==u.value[a]?o||(o=zr(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=ht(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Dr(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=hr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?pr:dr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Sr:Cr)(e,t)):hr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Er:Nr)(e,t)):hr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Ur(e,t)):hr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=cr(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var Rr=2*Math.PI,Hr=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Rr);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*Rr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Rr);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*Rr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Rr);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*Rr)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Or(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Hr.time=Yn(),Hr;return n}Wt.prototype.interrupt=function(t){return this.each((function(){fr(this,t)}))},Wt.prototype.transition=function(t){var e,n;t instanceof Lr?(e=t._id,t=t._name):(e=Pr(),(n=Hr).time=Yn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&ur(a,t,e,l,s,n||Or(a,e));return new Lr(r,this._parents,t,e)};function Ir(t){return[+t[0],+t[1]]}function jr(t){return[Ir(t[0]),Ir(t[1])]}["w","e"].map(Vr),["n","s"].map(Vr),["n","w","e","s","nw","ne","sw","se"].map(Vr);function Vr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var qr=Math.PI,Yr=2*qr,$r=Yr-1e-6;function Xr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Wr(){return new Xr}Xr.prototype=Wr.prototype={constructor:Xr,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=n-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),b=Math.sqrt(h),m=i*Math.tan((qr-Math.acos((d+h-g)/(2*v*b)))/2),_=m/b,y=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+y*s)+","+(this._y1=e+y*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,h=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(h<0&&(h=h%Yr+Yr),h>$r?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=qr)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Zr=Wr;function Jr(){}function Qr(t,e){var n=new Jr;if(t instanceof Jr)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}Jr.prototype=Qr.prototype={constructor:Jr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Gr=Qr;function Kr(){}var ti=Gr.prototype;function ei(t,e){var n=new Kr;if(t instanceof Kr)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}Kr.prototype=ei.prototype={constructor:Kr,has:ti.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ti.remove,clear:ti.clear,values:ti.keys,size:ti.size,empty:ti.empty,each:ti.each};Array.prototype.slice;var ni={},ri={},ii=34,oi=10,ai=13;function si(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function ui(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function li(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function ci(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+li(-e,6):e>9999?"+"+li(e,6):li(e,4))+"-"+li(t.getUTCMonth()+1,2)+"-"+li(t.getUTCDate(),2)+(o?"T"+li(n,2)+":"+li(r,2)+":"+li(i,2)+"."+li(o,3)+"Z":i?"T"+li(n,2)+":"+li(r,2)+":"+li(i,2)+"Z":r||n?"T"+li(n,2)+":"+li(r,2)+"Z":"")}var hi=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,u=o<=0,l=!1;function c(){if(u)return ri;if(l)return l=!1,ni;var e,r,i=a;if(t.charCodeAt(i)===ii){for(;a++<o&&t.charCodeAt(a)!==ii||t.charCodeAt(++a)===ii;);return(e=a)>=o?u=!0:(r=t.charCodeAt(a++))===oi?l=!0:r===ai&&(l=!0,t.charCodeAt(a)===oi&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(e=a++))===oi)l=!0;else if(r===ai)l=!0,t.charCodeAt(a)===oi&&++a;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===oi&&--o,t.charCodeAt(o-1)===ai&&--o;(r=c())!==ri;){for(var h=[];r!==ni&&r!==ri;)h.push(r),r=c();e&&null==(h=e(h,s++))||i.push(h)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?ci(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=si(t);return function(r,i){return e(n(r),i,t)}}(t,e):si(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=ui(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=ui(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},fi=hi(","),pi=fi.parse,di=(fi.parseRows,fi.format,fi.formatBody,fi.formatRows,hi("\t")),gi=di.parse;di.parseRows,di.format,di.formatBody,di.formatRows;function vi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var bi=function(t,e){return fetch(t,e).then(vi)};function mi(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),bi(e,n).then((function(e){return t(e,r)}))}}var _i=mi(pi);mi(gi);function yi(t){return function(e,n){return bi(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}yi("application/xml"),yi("text/html"),yi("image/svg+xml");function xi(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,s,u,l,c,h,f,p=t._root,d={data:r},g=t._x0,v=t._y0,b=t._x1,m=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=e>=(o=(g+b)/2))?g=o:b=o,(c=n>=(a=(v+m)/2))?v=a:m=a,i=p,!(p=p[h=c<<1|l]))return i[h]=d,t;if(s=+t._x.call(null,p.data),u=+t._y.call(null,p.data),e===s&&n===u)return d.next=p,i?i[h]=d:t._root=d,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(l=e>=(o=(g+b)/2))?g=o:b=o,(c=n>=(a=(v+m)/2))?v=a:m=a}while((h=c<<1|l)==(f=(u>=a)<<1|s>=o));return i[f]=p,i[h]=d,t}var wi=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Mi(t){return t[0]}function ki(t){return t[1]}function Si(t,e,n){var r=new Ci(null==e?Mi:e,null==n?ki:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Ci(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ei(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Ni=Si.prototype=Ci.prototype;Ni.copy=function(){var t,e,n=new Ci(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Ei(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Ei(e));return n},Ni.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return xi(this.cover(e,n),e,n,t)},Ni.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),s=new Array(o),u=1/0,l=1/0,c=-1/0,h=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,s[n]=i,r<u&&(u=r),r>c&&(c=r),i<l&&(l=i),i>h&&(h=i));if(u>c||l>h)return this;for(this.cover(u,l).cover(c,h),n=0;n<o;++n)xi(this,a[n],s[n],t[n]);return this},Ni.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,s,u=i-n,l=this._root;n>t||t>=i||r>e||e>=o;)switch(s=(e<r)<<1|t<n,(a=new Array(4))[s]=l,l=a,u*=2,s){case 0:i=n+u,o=r+u;break;case 1:n=i-u,o=r+u;break;case 2:i=n+u,r=o-u;break;case 3:n=i-u,r=o-u}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},Ni.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Ni.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ni.find=function(t,e,n){var r,i,o,a,s,u,l,c=this._x0,h=this._y0,f=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new wi(g,c,h,f,p)),null==n?n=1/0:(c=t-n,h=e-n,f=t+n,p=e+n,n*=n);u=d.pop();)if(!(!(g=u.node)||(i=u.x0)>f||(o=u.y0)>p||(a=u.x1)<c||(s=u.y1)<h))if(g.length){var v=(i+a)/2,b=(o+s)/2;d.push(new wi(g[3],v,b,a,s),new wi(g[2],i,b,v,s),new wi(g[1],v,o,a,b),new wi(g[0],i,o,v,b)),(l=(e>=b)<<1|t>=v)&&(u=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=u)}else{var m=t-+this._x.call(null,g.data),_=e-+this._y.call(null,g.data),y=m*m+_*_;if(y<n){var x=Math.sqrt(n=y);c=t-x,h=e-x,f=t+x,p=e+x,r=g.data}}return r},Ni.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,s,u,l,c,h,f,p=this._root,d=this._x0,g=this._y0,v=this._x1,b=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(s=(d+v)/2))?d=s:v=s,(c=a>=(u=(g+b)/2))?g=u:b=u,e=p,!(p=p[h=c<<1|l]))return this;if(!p.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,f=h)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[h]=i:delete e[h],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[f]=p:this._root=p),this):(this._root=i,this)},Ni.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Ni.root=function(){return this._root},Ni.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Ni.visit=function(t){var e,n,r,i,o,a,s=[],u=this._root;for(u&&s.push(new wi(u,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(u=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&u.length){var l=(r+o)/2,c=(i+a)/2;(n=u[3])&&s.push(new wi(n,l,c,o,a)),(n=u[2])&&s.push(new wi(n,r,c,l,a)),(n=u[1])&&s.push(new wi(n,l,i,o,c)),(n=u[0])&&s.push(new wi(n,r,i,l,c))}return this},Ni.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new wi(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,s=e.y0,u=e.x1,l=e.y1,c=(a+u)/2,h=(s+l)/2;(o=i[0])&&n.push(new wi(o,a,s,c,h)),(o=i[1])&&n.push(new wi(o,c,s,u,h)),(o=i[2])&&n.push(new wi(o,a,h,c,l)),(o=i[3])&&n.push(new wi(o,c,h,u,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Ni.x=function(t){return arguments.length?(this._x=t,this):this._x},Ni.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ui=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Ti=function(t){return(t=Ui(Math.abs(t)))?t[1]:NaN},Ai=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function zi(t){if(!(e=Ai.exec(t)))throw new Error("invalid format: "+t);var e;return new Di({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Di(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}zi.prototype=Di.prototype,Di.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Fi,Li,Pi,Bi,Ri=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Hi=function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Oi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Hi(100*t,e)},r:Hi,s:function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Fi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ui(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ii=function(t){return t},ji=Array.prototype.map,Vi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Li=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Ii:(e=ji.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Ii:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ji.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=zi(t)).fill,n=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,b=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Oi[m]||(void 0===v&&(v=12),b=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",y="$"===f?o:/[%p]/.test(m)?u:"",x=Oi[m],w=/[defgprs%]/.test(m);function M(t){var i,o,u,f=_,M=y;if("c"===m)M=x(t)+M,t="";else{var k=(t=+t)<0;if(t=isNaN(t)?c:x(Math.abs(t),v),b&&(t=Ri(t)),k&&0==+t&&(k=!1),f=(k?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===m?Vi[8+Fi/3]:"")+M+(k&&"("===h?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){M=(46===u?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var S=f.length+t.length+M.length,C=S<d?new Array(d-S+1).join(e):"";switch(g&&p&&(t=r(C+t,C.length?d-M.length:1/0),C=""),n){case"<":t=f+t+M+C;break;case"=":t=f+C+t+M;break;case"^":t=C.slice(0,S=C.length>>1)+f+t+M+C.slice(S);break;default:t=C+f+t+M}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,e){var n=h(((t=zi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ti(e)/3))),i=Math.pow(10,-r),o=Vi[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Pi=Li.format,Bi=Li.formatPrefix;var qi=function(){return new Yi};function Yi(){this.reset()}Yi.prototype={constructor:Yi,reset:function(){this.s=this.t=0},add:function(t){Xi($i,t,this.t),Xi(this,$i.s,this.s),this.s?this.t+=$i.t:this.s=$i.t},valueOf:function(){return this.s}};var $i=new Yi;function Xi(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}var Wi=1e-6,Zi=1e-12,Ji=Math.PI,Qi=Ji/2,Gi=Ji/4,Ki=2*Ji,to=Ji/180,eo=Math.abs,no=Math.atan,ro=Math.atan2,io=Math.cos,oo=(Math.ceil,Math.exp),ao=(Math.floor,Math.log),so=(Math.pow,Math.sin),uo=Math.sign||function(t){return t>0?1:t<0?-1:0},lo=Math.sqrt,co=Math.tan;function ho(t){return t>1?0:t<-1?Ji:Math.acos(t)}function fo(t){return t>1?Qi:t<-1?-Qi:Math.asin(t)}function po(){}qi(),qi();function go(t){var e=t[0],n=t[1],r=io(n);return[r*io(e),r*so(e),so(n)]}function vo(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function bo(t){var e=lo(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}qi();function mo(t,e){return[eo(t)>Ji?t+Math.round(-t/Ki)*Ki:t,e]}mo.invert=mo;var _o=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:po,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},yo=function(t,e){return eo(t[0]-e[0])<Wi&&eo(t[1]-e[1])<Wi};function xo(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var wo=function(t,e,n,r,i){var o,a,s=[],u=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],a=t[e];if(yo(r,a)){for(i.lineStart(),o=0;o<e;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else s.push(n=new xo(r,t,null,!0)),u.push(n.o=new xo(r,null,n,!1)),s.push(n=new xo(a,t,null,!1)),u.push(n.o=new xo(a,null,n,!0))}})),s.length){for(u.sort(e),Mo(s),Mo(u),o=0,a=u.length;o<a;++o)u[o].e=n=!n;for(var l,c,h=s[0];;){for(var f=h,p=!0;f.v;)if((f=f.n)===h)return;l=f.z,i.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(o=0,a=l.length;o<a;++o)i.point((c=l[o])[0],c[1]);else r(f.x,f.n.x,1,i);f=f.n}else{if(p)for(l=f.p.z,o=l.length-1;o>=0;--o)i.point((c=l[o])[0],c[1]);else r(f.x,f.p.x,-1,i);f=f.p}l=(f=f.o).z,p=!p}while(!f.v);i.lineEnd()}}};function Mo(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var ko=qi();function So(t){return eo(t[0])<=Ji?t[0]:uo(t[0])*((eo(t[0])+Ji)%Ki-Ji)}var Co=function(t,e){var n=So(e),r=e[1],i=so(r),o=[so(n),-io(n),0],a=0,s=0;ko.reset(),1===i?r=Qi+Wi:-1===i&&(r=-Qi-Wi);for(var u=0,l=t.length;u<l;++u)if(h=(c=t[u]).length)for(var c,h,f=c[h-1],p=So(f),d=f[1]/2+Gi,g=so(d),v=io(d),b=0;b<h;++b,p=_,g=x,v=w,f=m){var m=c[b],_=So(m),y=m[1]/2+Gi,x=so(y),w=io(y),M=_-p,k=M>=0?1:-1,S=k*M,C=S>Ji,E=g*x;if(ko.add(ro(E*k*so(S),v*w+E*io(S))),a+=C?M+k*Ki:M,C^p>=n^_>=n){var N=vo(go(f),go(m));bo(N);var U=vo(o,N);bo(U);var T=(C^M>=0?-1:1)*fo(U[2]);(r>T||r===T&&(N[0]||N[1]))&&(s+=C^M>=0?1:-1)}}return(a<-Wi||a<Wi&&ko<-Wi)^1&s},Eo=function(t,e,n,r){return function(i){var o,a,s,u=e(i),l=_o(),c=e(l),h=!1,f={point:p,lineStart:g,lineEnd:b,polygonStart:function(){f.point=m,f.lineStart=_,f.lineEnd=y,a=[],o=[]},polygonEnd:function(){f.point=p,f.lineStart=g,f.lineEnd=b,a=v(a);var t=Co(o,r);a.length?(h||(i.polygonStart(),h=!0),wo(a,Uo,t,n,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(e,n){t(e,n)&&i.point(e,n)}function d(t,e){u.point(t,e)}function g(){f.point=d,u.lineStart()}function b(){f.point=p,u.lineEnd()}function m(t,e){s.push([t,e]),c.point(t,e)}function _(){c.lineStart(),s=[]}function y(){m(s[0][0],s[0][1]),c.lineEnd();var t,e,n,r,u=c.clean(),f=l.result(),p=f.length;if(s.pop(),o.push(s),s=null,p)if(1&u){if((e=(n=f[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else p>1&&2&u&&f.push(f.pop().concat(f.shift())),a.push(f.filter(No))}return f}};function No(t){return t.length>1}function Uo(t,e){return((t=t.x)[0]<0?t[1]-Qi-Wi:Qi-t[1])-((e=e.x)[0]<0?e[1]-Qi-Wi:Qi-e[1])}Eo((function(){return!0}),(function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var s=o>0?Ji:-Ji,u=eo(o-n);eo(u-Ji)<Wi?(t.point(n,r=(r+a)/2>0?Qi:-Qi),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),t.point(o,r),e=0):i!==s&&u>=Ji&&(eo(n-i)<Wi&&(n-=i*Wi),eo(o-s)<Wi&&(o-=s*Wi),r=function(t,e,n,r){var i,o,a=so(t-n);return eo(a)>Wi?no((so(e)*(o=io(r))*so(n)-so(r)*(i=io(e))*so(t))/(i*o*a)):(e+r)/2}(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),e=0),t.point(n=o,r=a),i=s},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var i;if(null==t)i=n*Qi,r.point(-Ji,i),r.point(0,i),r.point(Ji,i),r.point(Ji,0),r.point(Ji,-i),r.point(0,-i),r.point(-Ji,-i),r.point(-Ji,0),r.point(-Ji,i);else if(eo(t[0]-e[0])>Wi){var o=t[0]<e[0]?Ji:-Ji;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}),[-Ji,-Qi]);qi();qi(),qi();function To(t){this._context=t}To.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Ki)}},result:po};qi();function Ao(){this._string=[]}function zo(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Ao.prototype={_radius:4.5,_circle:zo(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=zo(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Do(t){return function(e){var n=new Fo;for(var r in t)n[r]=t[r];return n.stream=e,n}}function Fo(){}Fo.prototype={constructor:Fo,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};io(30*to);Do({point:function(t,e){this.stream.point(t*to,e*to)}});function Lo(t){return function(e,n){var r=io(e),i=io(n),o=t(r*i);return[o*i*so(e),o*so(n)]}}function Po(t){return function(e,n){var r=lo(e*e+n*n),i=t(r),o=so(i),a=io(i);return[ro(e*o,r*a),fo(r&&n*o/r)]}}var Bo=Lo((function(t){return lo(2/(1+t))}));Bo.invert=Po((function(t){return 2*fo(t/2)}));var Ro=Lo((function(t){return(t=ho(t))&&t/so(t)}));Ro.invert=Po((function(t){return t}));function Ho(t,e){return[t,ao(co((Qi+e)/2))]}Ho.invert=function(t,e){return[t,2*no(oo(e))-Qi]};function Oo(t,e){return[t,e]}Oo.invert=Oo;var Io=1.340264,jo=-.081106,Vo=893e-6,qo=.003796,Yo=lo(3)/2;function $o(t,e){var n=fo(Yo*so(e)),r=n*n,i=r*r*r;return[t*io(n)/(Yo*(Io+3*jo*r+i*(7*Vo+9*qo*r))),n*(Io+jo*r+i*(Vo+qo*r))]}$o.invert=function(t,e){for(var n,r=e,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=n=(r*(Io+jo*i+o*(Vo+qo*i))-e)/(Io+3*jo*i+o*(7*Vo+9*qo*i)))*r)*i*i,!(eo(n)<Zi));++a);return[Yo*t*(Io+3*jo*i+o*(7*Vo+9*qo*i))/io(r),fo(so(r)/Yo)]};function Xo(t,e){var n=io(e),r=io(t)*n;return[n*so(t)/r,so(e)/r]}Xo.invert=Po(no);function Wo(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Wo.invert=function(t,e){var n,r=e,i=25;do{var o=r*r,a=o*o;r-=n=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-e)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(eo(n)>Wi&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function Zo(t,e){return[io(e)*so(t),so(e)]}Zo.invert=Po(fo);function Jo(t,e){var n=io(e),r=1+io(t)*n;return[n*so(t)/r,so(e)/r]}Jo.invert=Po((function(t){return 2*no(t)}));function Qo(t,e){return[ao(co((Qi+e)/2)),-t]}Qo.invert=function(t,e){return[-e,2*no(oo(t))-Qi]};function Go(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Ko(t,e){var n,r,i,o,a,s=new ra(t),u=+t.value&&(s.value=t.value),l=[s];for(null==e&&(e=ta);n=l.pop();)if(u&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)l.push(r=n.children[o]=new ra(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(na)}function ta(t){return t.children}function ea(t){t.data=t.data.data}function na(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function ra(t){this.data=t,this.depth=this.height=0,this.parent=null}ra.prototype=Ko.prototype={constructor:ra,count:function(){return this.eachAfter(Go)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Ko(this).eachBefore(ea)}};Array.prototype.slice;var ia=function(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(r-e)/t.value;++s<u;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*l};function oa(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}oa.prototype=Object.create(ra.prototype);var aa=function(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(i-n)/t.value;++s<u;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*l},sa=(1+Math.sqrt(5))/2;function ua(t,e,n,r,i,o){for(var a,s,u,l,c,h,f,p,d,g,v,b=[],m=e.children,_=0,y=0,x=m.length,w=e.value;_<x;){u=i-n,l=o-r;do{c=m[y++].value}while(!c&&y<x);for(h=f=c,v=c*c*(g=Math.max(l/u,u/l)/(w*t)),d=Math.max(f/v,v/h);y<x;++y){if(c+=s=m[y].value,s<h&&(h=s),s>f&&(f=s),v=c*c*g,(p=Math.max(f/v,v/h))>d){c-=s;break}d=p}b.push(a={value:c,dice:u<l,children:m.slice(_,y)}),a.dice?ia(a,n,r,i,w?r+=l*c/w:o):aa(a,n,r,w?n+=u*c/w:i,o),w-=c,_=y}return b}(function t(e){function n(t,n,r,i,o){ua(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(sa),function t(e){function n(t,n,r,i,o){if((a=t._squarify)&&a.ratio===e)for(var a,s,u,l,c,h=-1,f=a.length,p=t.value;++h<f;){for(u=(s=a[h]).children,l=s.value=0,c=u.length;l<c;++l)s.value+=u[l].value;s.dice?ia(s,n,r,i,r+=(o-r)*s.value/p):aa(s,n,r,n+=(i-n)*s.value/p,o),p-=s.value}else t._squarify=a=ua(e,t,n,r,i,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(sa);var la=function(){return Math.random()},ca=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(la),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(la)),ha=(function t(e){function n(){var t=ca.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(la),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(la));(function t(e){function n(t){var n=ha.source(e)(t);return function(){return n()/t}}return n.source=t,n})(la),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(la);function fa(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var pa=Array.prototype,da=pa.map,ga=pa.slice;var va=function(t){return function(){return t}},ba=function(t){return+t},ma=[0,1];function _a(t){return t}function ya(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:va(isNaN(e)?NaN:.5)}function xa(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function wa(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ya(i,r),o=n(a,o)):(r=ya(r,i),o=n(o,a)),function(t){return o(r(t))}}function Ma(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ya(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function ka(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Sa(){var t,e,n,r,i,o,a=ma,s=ma,u=We,l=_a;function c(){return r=Math.min(a.length,s.length)>2?Ma:wa,i=o=null,h}function h(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(l(e)))}return h.invert=function(n){return l(e((o||(o=r(s,a.map(t),He)))(n)))},h.domain=function(t){return arguments.length?(a=da.call(t,ba),l===_a||(l=xa(a)),c()):a.slice()},h.range=function(t){return arguments.length?(s=ga.call(t),c()):s.slice()},h.rangeRound=function(t){return s=ga.call(t),u=Ze,c()},h.clamp=function(t){return arguments.length?(l=t?xa(a):_a,h):l!==_a},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,r){return t=n,e=r,c()}}function Ca(t,e){return Sa()(t,e)}var Ea=function(t,e,n,r){var i,o=g(t,e,n);switch((r=zi(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ti(e)/3)))-Ti(Math.abs(t)))}(o,a))||(r.precision=i),Bi(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Ti(e)-Ti(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ti(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Pi(r)};function Na(t){var e=t.domain;return t.ticks=function(t){var n=e();return p(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Ea(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=d(s,u,n))>0?r=d(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=d(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,e(i)),t},t}function Ua(){var t=Ca(_a,_a);return t.copy=function(){return ka(t,Ua())},fa.apply(t,arguments),Na(t)}var Ta=new Date,Aa=new Date;function za(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return za((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Ta.setTime(+e),Aa.setTime(+r),t(Ta),t(Aa),Math.floor(n(Ta,Aa))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Da=za((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Da.every=function(t){return isFinite(t=Math.floor(t))&&t>0?za((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Fa=Da,La=(Da.range,za((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Pa=(La.range,6e4),Ba=6048e5;function Ra(t){return za((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Pa)/Ba}))}var Ha=Ra(0),Oa=Ra(1),Ia=Ra(2),ja=Ra(3),Va=Ra(4),qa=Ra(5),Ya=Ra(6),$a=(Ha.range,Oa.range,Ia.range,ja.range,Va.range,qa.range,Ya.range,za((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Pa)/864e5}),(function(t){return t.getDate()-1}))),Xa=$a,Wa=($a.range,za((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Pa)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Za=(Wa.range,za((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*Pa)}),(function(t,e){return(e-t)/Pa}),(function(t){return t.getMinutes()}))),Ja=(Za.range,za((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Qa=(Ja.range,za((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Qa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?za((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Qa:null};Qa.range;function Ga(t){return za((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Ba}))}var Ka=Ga(0),ts=Ga(1),es=Ga(2),ns=Ga(3),rs=Ga(4),is=Ga(5),os=Ga(6),as=(Ka.range,ts.range,es.range,ns.range,rs.range,is.range,os.range,za((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),ss=as,us=(as.range,za((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));us.every=function(t){return isFinite(t=Math.floor(t))&&t>0?za((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var ls=us;us.range;function cs(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function hs(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function fs(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var ps,ds={"-":"",_:" ",0:"0"},gs=/^\s*\d+/,vs=/^%/,bs=/[\\^$*+?|[\]().{}]/g;function ms(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function _s(t){return t.replace(bs,"\\$&")}function ys(t){return new RegExp("^(?:"+t.map(_s).join("|")+")","i")}function xs(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ws(t,e,n){var r=gs.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ms(t,e,n){var r=gs.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function ks(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ss(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Cs(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Es(t,e,n){var r=gs.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Ns(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Us(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ts(t,e,n){var r=gs.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function As(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function zs(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Ds(t,e,n){var r=gs.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Fs(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Ls(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ps(t,e,n){var r=gs.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Bs(t,e,n){var r=gs.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Rs(t,e,n){var r=gs.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Hs(t,e,n){var r=vs.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Os(t,e,n){var r=gs.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Is(t,e,n){var r=gs.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function js(t,e){return ms(t.getDate(),e,2)}function Vs(t,e){return ms(t.getHours(),e,2)}function qs(t,e){return ms(t.getHours()%12||12,e,2)}function Ys(t,e){return ms(1+Xa.count(Fa(t),t),e,3)}function $s(t,e){return ms(t.getMilliseconds(),e,3)}function Xs(t,e){return $s(t,e)+"000"}function Ws(t,e){return ms(t.getMonth()+1,e,2)}function Zs(t,e){return ms(t.getMinutes(),e,2)}function Js(t,e){return ms(t.getSeconds(),e,2)}function Qs(t){var e=t.getDay();return 0===e?7:e}function Gs(t,e){return ms(Ha.count(Fa(t)-1,t),e,2)}function Ks(t,e){var n=t.getDay();return t=n>=4||0===n?Va(t):Va.ceil(t),ms(Va.count(Fa(t),t)+(4===Fa(t).getDay()),e,2)}function tu(t){return t.getDay()}function eu(t,e){return ms(Oa.count(Fa(t)-1,t),e,2)}function nu(t,e){return ms(t.getFullYear()%100,e,2)}function ru(t,e){return ms(t.getFullYear()%1e4,e,4)}function iu(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ms(e/60|0,"0",2)+ms(e%60,"0",2)}function ou(t,e){return ms(t.getUTCDate(),e,2)}function au(t,e){return ms(t.getUTCHours(),e,2)}function su(t,e){return ms(t.getUTCHours()%12||12,e,2)}function uu(t,e){return ms(1+ss.count(ls(t),t),e,3)}function lu(t,e){return ms(t.getUTCMilliseconds(),e,3)}function cu(t,e){return lu(t,e)+"000"}function hu(t,e){return ms(t.getUTCMonth()+1,e,2)}function fu(t,e){return ms(t.getUTCMinutes(),e,2)}function pu(t,e){return ms(t.getUTCSeconds(),e,2)}function du(t){var e=t.getUTCDay();return 0===e?7:e}function gu(t,e){return ms(Ka.count(ls(t)-1,t),e,2)}function vu(t,e){var n=t.getUTCDay();return t=n>=4||0===n?rs(t):rs.ceil(t),ms(rs.count(ls(t),t)+(4===ls(t).getUTCDay()),e,2)}function bu(t){return t.getUTCDay()}function mu(t,e){return ms(ts.count(ls(t)-1,t),e,2)}function _u(t,e){return ms(t.getUTCFullYear()%100,e,2)}function yu(t,e){return ms(t.getUTCFullYear()%1e4,e,4)}function xu(){return"+0000"}function wu(){return"%"}function Mu(t){return+t}function ku(t){return Math.floor(+t/1e3)}!function(t){ps=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=ys(i),c=xs(i),h=ys(o),f=xs(o),p=ys(a),d=xs(a),g=ys(s),v=xs(s),b=ys(u),m=xs(u),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:js,e:js,f:Xs,H:Vs,I:qs,j:Ys,L:$s,m:Ws,M:Zs,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Mu,s:ku,S:Js,u:Qs,U:Gs,V:Ks,w:tu,W:eu,x:null,X:null,y:nu,Y:ru,Z:iu,"%":wu},y={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:ou,e:ou,f:cu,H:au,I:su,j:uu,L:lu,m:hu,M:fu,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Mu,s:ku,S:pu,u:du,U:gu,V:vu,w:bu,W:mu,x:null,X:null,y:_u,Y:yu,Z:xu,"%":wu},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=b.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:zs,e:zs,f:Rs,H:Fs,I:Fs,j:Ds,L:Bs,m:As,M:Ls,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:Ts,Q:Os,s:Is,S:Ps,u:Ms,U:ks,V:Ss,w:ws,W:Cs,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:Ns,Y:Es,Z:Us,"%":Hs};function w(t,e){return function(n){var r,i,o,a=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=ds[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,e){return function(n){var r,i,o=fs(1900,void 0,1);if(k(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=hs(fs(o.y,0,1))).getUTCDay(),r=i>4||0===i?ts.ceil(r):ts(r),r=ss.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=cs(fs(o.y,0,1))).getDay(),r=i>4||0===i?Oa.ceil(r):Oa(r),r=Xa.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?hs(fs(o.y,0,1)).getUTCDay():cs(fs(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,hs(o)):cs(o)}}function k(t,e,n,r){for(var i,o,a=0,s=e.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in ds?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(_.x=w(n,_),_.X=w(r,_),_.c=w(e,_),y.x=w(n,y),y.X=w(r,y),y.c=w(e,y),{format:function(t){var e=w(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",y);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t+="",!0);return e.toString=function(){return t},e}})}(t),ps.format,ps.parse,ps.utcFormat,ps.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Su=za((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Cu=(Su.range,za((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Eu=(Cu.range,za((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Pa)}),(function(t,e){return(e-t)/Pa}),(function(t){return t.getUTCMinutes()})));Eu.range;var Nu=function(t){return function(){return t}},Uu=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,1e-12),Tu=Math.PI,Au=2*Tu;function zu(t){this._context=t}zu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Du=function(t){return new zu(t)};function Fu(t){return t[0]}function Lu(t){return t[1]}var Pu=function(){var t=Fu,e=Lu,n=Nu(!0),r=null,i=Du,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=Zr())),s=0;s<=c;++s)!(s<c&&n(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+e(u,s,a));if(l)return o=null,l+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Nu(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Nu(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Nu(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a};Ru(Du);function Bu(t){this._curve=t}function Ru(t){function e(e){return new Bu(t(e))}return e._curve=t,e}Bu.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Hu=Math.sin(Tu/10)/Math.sin(7*Tu/10),Ou=(Math.sin(Au/10),Math.cos(Au/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Iu(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function ju(t){this._context=t}ju.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Iu(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Iu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Vu(t){this._context=t}Vu.prototype={areaStart:Ou,areaEnd:Ou,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Iu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function qu(t){this._context=t}qu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Iu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Yu(t,e){this._basis=new ju(t),this._beta=e}Yu.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,s=e[n]-o,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*a),this._beta*e[u]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new ju(t):new Yu(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function $u(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Xu(t,e){this._context=t,this._k=(1-e)/6}Xu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:$u(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:$u(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Xu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Wu(t,e){this._context=t,this._k=(1-e)/6}Wu.prototype={areaStart:Ou,areaEnd:Ou,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:$u(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Wu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Zu(t,e){this._context=t,this._k=(1-e)/6}Zu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:$u(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Zu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Ju(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Uu){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Uu){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Qu(t,e){this._context=t,this._alpha=e}Qu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Ju(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Qu(t,e):new Xu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Gu(t,e){this._context=t,this._alpha=e}Gu.prototype={areaStart:Ou,areaEnd:Ou,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Ju(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Gu(t,e):new Wu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Ku(t,e){this._context=t,this._alpha=e}Ku.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ju(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Ku(t,e):new Zu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function tl(t){this._context=t}tl.prototype={areaStart:Ou,areaEnd:Ou,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function el(t){return t<0?-1:1}function nl(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(el(o)+el(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function rl(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function il(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function ol(t){this._context=t}function al(t){this._context=new sl(t)}function sl(t){this._context=t}function ul(t){return new ol(t)}function ll(t){this._context=t}function cl(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}ol.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:il(this,this._t0,rl(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,il(this,rl(this,n=nl(this,t,e)),n);break;default:il(this,this._t0,n=nl(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(al.prototype=Object.create(ol.prototype)).point=function(t,e){ol.prototype.point.call(this,e,t)},sl.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},ll.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=cl(t),i=cl(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function hl(t,e){this._context=t,this._t=e}hl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function fl(){this._=null}function pl(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function dl(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function gl(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function vl(t){for(;t.L;)t=t.L;return t}fl.prototype={constructor:fl,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=vl(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(dl(this,n),n=(t=n).U),n.C=!1,r.C=!0,gl(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(gl(this,n),n=(t=n).U),n.C=!1,r.C=!0,dl(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?vl(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,dl(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,gl(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,dl(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,gl(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,dl(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,gl(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var bl=fl;function ml(t,e,n,r){var i=[null,null],o=jl.push(i)-1;return i.left=t,i.right=e,n&&yl(i,t,e,n),r&&yl(i,e,t,r),Ol[t.index].halfedges.push(o),Ol[e.index].halfedges.push(o),i}function _l(t,e,n){var r=[e,n];return r.left=t,r}function yl(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function xl(t,e,n,r,i){var o,a=t[0],s=t[1],u=a[0],l=a[1],c=0,h=1,f=s[0]-u,p=s[1]-l;if(o=e-u,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<h&&(h=o)}else if(f>0){if(o>h)return;o>c&&(c=o)}if(o=r-u,f||!(o<0)){if(o/=f,f<0){if(o>h)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<h&&(h=o)}if(o=n-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<h&&(h=o)}else if(p>0){if(o>h)return;o>c&&(c=o)}if(o=i-l,p||!(o<0)){if(o/=p,p<0){if(o>h)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<h&&(h=o)}return!(c>0||h<1)||(c>0&&(t[0]=[u+c*f,l+c*p]),h<1&&(t[1]=[u+h*f,l+h*p]),!0)}}}}}function wl(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,u=t[0],l=t.left,c=t.right,h=l[0],f=l[1],p=c[0],d=c[1],g=(h+p)/2,v=(f+d)/2;if(d===f){if(g<e||g>=r)return;if(h>p){if(u){if(u[1]>=i)return}else u=[g,n];o=[g,i]}else{if(u){if(u[1]<n)return}else u=[g,i];o=[g,n]}}else if(s=v-(a=(h-p)/(d-f))*g,a<-1||a>1)if(h>p){if(u){if(u[1]>=i)return}else u=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(u){if(u[1]<n)return}else u=[(i-s)/a,i];o=[(n-s)/a,n]}else if(f<d){if(u){if(u[0]>=r)return}else u=[e,a*e+s];o=[r,a*r+s]}else{if(u){if(u[0]<e)return}else u=[r,a*r+s];o=[e,a*e+s]}return t[0]=u,t[1]=o,!0}function Ml(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function kl(t,e){return e[+(e.left!==t.site)]}function Sl(t,e){return e[+(e.left===t.site)]}var Cl,El=[];function Nl(){pl(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ul(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],u=r[0]-a,l=r[1]-s,c=o[0]-a,h=o[1]-s,f=2*(u*h-l*c);if(!(f>=-ql)){var p=u*u+l*l,d=c*c+h*h,g=(h*p-l*d)/f,v=(u*d-c*p)/f,b=El.pop()||new Nl;b.arc=t,b.site=i,b.x=g+a,b.y=(b.cy=v+s)+Math.sqrt(g*g+v*v),t.circle=b;for(var m=null,_=Il._;_;)if(b.y<_.y||b.y===_.y&&b.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}Il.insert(m,b),m||(Cl=b)}}}}function Tl(t){var e=t.circle;e&&(e.P||(Cl=e.N),Il.remove(e),El.push(e),pl(e),t.circle=null)}var Al=[];function zl(){pl(this),this.edge=this.site=this.circle=null}function Dl(t){var e=Al.pop()||new zl;return e.site=t,e}function Fl(t){Tl(t),Hl.remove(t),Al.push(t),pl(t)}function Ll(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Fl(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<Vl&&Math.abs(r-u.circle.cy)<Vl;)o=u.P,s.unshift(u),Fl(u),u=o;s.unshift(u),Tl(u);for(var l=a;l.circle&&Math.abs(n-l.circle.x)<Vl&&Math.abs(r-l.circle.cy)<Vl;)a=l.N,s.push(l),Fl(l),l=a;s.push(l),Tl(l);var c,h=s.length;for(c=1;c<h;++c)l=s[c],u=s[c-1],yl(l.edge,u.site,l.site,i);u=s[0],(l=s[h-1]).edge=ml(u.site,l.site,null,i),Ul(u),Ul(l)}function Pl(t){for(var e,n,r,i,o=t[0],a=t[1],s=Hl._;s;)if((r=Bl(s,a)-o)>Vl)s=s.L;else{if(!((i=o-Rl(s,a))>Vl)){r>-Vl?(e=s.P,n=s):i>-Vl?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){Ol[t.index]={site:t,halfedges:[]}}(t);var u=Dl(t);if(Hl.insert(e,u),e||n){if(e===n)return Tl(e),n=Dl(e.site),Hl.insert(u,n),u.edge=n.edge=ml(e.site,u.site),Ul(e),void Ul(n);if(n){Tl(e),Tl(n);var l=e.site,c=l[0],h=l[1],f=t[0]-c,p=t[1]-h,d=n.site,g=d[0]-c,v=d[1]-h,b=2*(f*v-p*g),m=f*f+p*p,_=g*g+v*v,y=[(v*m-p*_)/b+c,(f*_-g*m)/b+h];yl(n.edge,l,d,y),u.edge=ml(l,t,null,y),n.edge=ml(t,d,null,y),Ul(e),Ul(n)}else u.edge=ml(e.site,u.site)}}function Bl(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],u=n[1],l=u-e;if(!l)return s;var c=s-r,h=1/o-1/l,f=c/l;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*l)-u+l/2+i-o/2)))/h+r:(r+s)/2}function Rl(t,e){var n=t.N;if(n)return Bl(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Hl,Ol,Il,jl,Vl=1e-6,ql=1e-12;function Yl(t,e){return e[1]-t[1]||e[0]-t[0]}function $l(t,e){var n,r,i,o=t.sort(Yl).pop();for(jl=[],Ol=new Array(t.length),Hl=new bl,Il=new bl;;)if(i=Cl,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Pl(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Ll(i.arc)}if(function(){for(var t,e,n,r,i=0,o=Ol.length;i<o;++i)if((t=Ol[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=Ml(t,jl[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],u=+e[1][0],l=+e[1][1];!function(t,e,n,r){for(var i,o=jl.length;o--;)wl(i=jl[o],t,e,n,r)&&xl(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Vl||Math.abs(i[0][1]-i[1][1])>Vl)||delete jl[o]}(a,s,u,l),function(t,e,n,r){var i,o,a,s,u,l,c,h,f,p,d,g,v=Ol.length,b=!0;for(i=0;i<v;++i)if(o=Ol[i]){for(a=o.site,s=(u=o.halfedges).length;s--;)jl[u[s]]||u.splice(s,1);for(s=0,l=u.length;s<l;)d=(p=Sl(o,jl[u[s]]))[0],g=p[1],h=(c=kl(o,jl[u[++s%l]]))[0],f=c[1],(Math.abs(d-h)>Vl||Math.abs(g-f)>Vl)&&(u.splice(s,0,jl.push(_l(a,p,Math.abs(d-t)<Vl&&r-g>Vl?[t,Math.abs(h-t)<Vl?f:r]:Math.abs(g-r)<Vl&&n-d>Vl?[Math.abs(f-r)<Vl?h:n,r]:Math.abs(d-n)<Vl&&g-e>Vl?[n,Math.abs(h-n)<Vl?f:e]:Math.abs(g-e)<Vl&&d-t>Vl?[Math.abs(f-e)<Vl?h:t,e]:null))-1),++l);l&&(b=!1)}if(b){var m,_,y,x=1/0;for(i=0,b=null;i<v;++i)(o=Ol[i])&&(y=(m=(a=o.site)[0]-t)*m+(_=a[1]-e)*_)<x&&(x=y,b=o);if(b){var w=[t,e],M=[t,r],k=[n,r],S=[n,e];b.halfedges.push(jl.push(_l(a=b.site,w,M))-1,jl.push(_l(a,M,k))-1,jl.push(_l(a,k,S))-1,jl.push(_l(a,S,w))-1)}}for(i=0;i<v;++i)(o=Ol[i])&&(o.halfedges.length||delete Ol[i])}(a,s,u,l)}this.edges=jl,this.cells=Ol,Hl=Il=jl=Ol=null}$l.prototype={constructor:$l,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return kl(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,u,l,c=n.site,h=-1,f=e[i[o-1]],p=f.left===c?f.right:f.left;++h<o;)a=p,p=(f=e[i[h]]).left===c?f.right:f.left,a&&p&&r<a.index&&r<p.index&&(u=a,l=p,((s=c)[0]-l[0])*(u[1]-s[1])-(s[0]-u[0])*(l[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var u=t-i.site[0],l=e-i.site[1],c=u*u+l*l;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=t-s[0],l=e-s[1],h=u*u+l*l;h<c&&(c=h,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};function Xl(t,e,n){this.k=t,this.x=e,this.y=n}Xl.prototype={constructor:Xl,scale:function(t){return 1===t?this:new Xl(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Xl(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Xl(1,0,0);Xl.prototype;var Wl=function(t,e){var n=this;this.filterData=function(t){n.filteredData=n.data.filter((function(e){return t(e)})),n.adapter.updateView(n.filteredData)},this.adapter=e,_i(t).then((function(t){n.data=t.slice(0),n.filteredData=n.data,e.updateView(n.filteredData)}))},Zl=n(3),Jl=n(7),Ql=function(t){var e=this;this.fillDatalists=function(t){[e.registreeDatalist,e.statusDatalist,e.sexDatalist,e.originDatalist,e.occupationDatalist,e.masterDatalist,e.masterResidenceDatalist,e.registrationDistrictDatalist,e.sourcesDatalist].forEach((function(e){e.innerHTML="",Array.from(new Set(t.map((function(t){return t[e.attributes[1].value]})))).sort().forEach((function(t){var n=document.createElement("option");n.value=t,e.appendChild(n)}))}))},this.registreeFilter=document.getElementById("registreeFilter"),this.statusFilter=document.getElementById("statusFilter"),this.sexFilter=document.getElementById("sexFilter"),this.originFilter=document.getElementById("originFilter"),this.occupationFilter=document.getElementById("occupationFilter"),this.masterFilter=document.getElementById("masterFilter"),this.masterResidenceFilter=document.getElementById("masterResidenceFilter"),this.registrationDistrictFilter=document.getElementById("registrationDistrictFilter"),this.sourcesFilter=document.getElementById("sourcesFilter"),this.registreeDatalist=document.getElementById("registreeDatalist"),this.statusDatalist=document.getElementById("statusDatalist"),this.sexDatalist=document.getElementById("sexDatalist"),this.originDatalist=document.getElementById("originDatalist"),this.occupationDatalist=document.getElementById("occupationDatalist"),this.masterDatalist=document.getElementById("masterDatalist"),this.masterResidenceDatalist=document.getElementById("masterResidenceDatalist"),this.registrationDistrictDatalist=document.getElementById("registrationDistrictDatalist"),this.sourcesDatalist=document.getElementById("sourcesDatalist"),this.ageSlider=document.getElementById("ageSlider"),Zl.create(document.getElementById("ageSlider"),{start:[0,100],connect:!0,range:{min:0,max:100},tooltips:!0,format:Jl({decimals:0}),step:1}),this.dateSlider=document.getElementById("dateSlider"),Zl.create(this.dateSlider,{start:[1856,1875],connect:!0,range:{min:1856,max:1875},tooltips:!0,format:Jl({decimals:0}),step:1}),this.resetButton=document.getElementById("resetFiltersButton"),this.predicates={registree:function(t){return!0},status:function(t){return!0},sex:function(t){return!0},origin:function(t){return!0},age:function(t){return!0},occupation:function(t){return!0},master:function(t){return!0},masterResidence:function(t){return!0},registrationDate:function(t){return!0},registrationDistrict:function(t){return!0},sources:function(t){return!0}},this.registreeFilter.onchange=function(){e.predicates.registree=function(t){return""===e.registreeFilter.value||t.Registree===e.registreeFilter.value},t.refilter(e.predicates)},this.statusFilter.onchange=function(){e.predicates.status=function(t){return t.Status.toLowerCase().includes(e.statusFilter.value.toLowerCase())},t.refilter(e.predicates)},this.sexFilter.onchange=function(){e.predicates.sex=function(t){return t.Sex.toLowerCase()===e.sexFilter.value.toLowerCase()},t.refilter(e.predicates)},this.originFilter.onchange=function(){e.predicates.origin=function(t){return t.Origin.toLowerCase().includes(e.originFilter.value.toLowerCase())},t.refilter(e.predicates)},this.occupationFilter.onchange=function(){e.predicates.occupation=function(t){return t.Occupation.toLowerCase().includes(e.occupationFilter.value.toLowerCase())},t.refilter(e.predicates)},this.masterFilter.onchange=function(){e.predicates.master=function(t){return t.Master.toLowerCase().includes(e.masterFilter.value.toLowerCase())},t.refilter(e.predicates)},this.masterResidenceFilter.onchange=function(){e.predicates.masterResidence=function(t){return t["Master Residence"].toLowerCase().includes(e.masterResidenceFilter.value.toLowerCase())},t.refilter(e.predicates)},this.registrationDistrictFilter.onchange=function(){e.predicates.registrationDistrict=function(t){return t["Registration District"].toLowerCase().includes(e.registrationDistrictFilter.value.toLowerCase())},t.refilter(e.predicates)},this.sourcesFilter.onchange=function(){e.predicates.sources=function(t){return t.Sources.toLowerCase().includes(e.sourcesFilter.value.toLowerCase())},t.refilter(e.predicates)},this.ageSlider.noUiSlider.on("change",(function(n){var r=n.map((function(t){return parseFloat(t)}));e.predicates.age=function(t){return parseFloat(t.Age)>=r[0]&&parseFloat(t.Age)<=r[1]},t.refilter(e.predicates)})),this.dateSlider.noUiSlider.on("change",(function(n){var r=n.map((function(t){return parseFloat(t)}));e.predicates.registrationDate=function(t){var e=t["Registration Date"].substr(0,4);return e>=r[0]&&e<=r[1]},t.refilter(e.predicates)})),this.resetButton.onclick=function(){e.registreeFilter.value="",e.statusFilter.value="",e.sexFilter.value="",e.originFilter.value="",e.occupationFilter.value="",e.masterFilter.value="",e.masterResidenceFilter.value="",e.registrationDistrictFilter.value="",e.sourcesFilter.value="",e.ageSlider.noUiSlider.set([0,100]),e.dateSlider.noUiSlider.set([1856,1875]),e.predicates={registree:function(t){return!0},status:function(t){return!0},sex:function(t){return!0},origin:function(t){return!0},age:function(t){return!0},occupation:function(t){return!0},master:function(t){return!0},masterResidence:function(t){return!0},registrationDate:function(t){return!0},registrationDistrict:function(t){return!0},sources:function(t){return!0}},t.refilter(e.predicates)}},Gl=function(t,e,n,r,i,o){this.redraw=function(t){console.log("redrawing donut")}},Kl=function(){var t=function(){return"n"},e=function(){return[0,0]},n=function(){return" "},r=document.body,i=h(),o=null,a=null,s=null;function u(t){(o=function(t){var e=t.node();return e?"svg"===e.tagName.toLowerCase()?e:e.ownerSVGElement:null}(t))&&(a=o.createSVGPoint(),r.appendChild(i))}u.show=function(){var i=Array.prototype.slice.call(arguments);i[i.length-1]instanceof SVGElement&&(s=i.pop());var o,a=n.apply(this,i),h=e.apply(this,i),p=t.apply(this,i),d=f(),g=c.length,v=document.documentElement.scrollTop||r.scrollTop,b=document.documentElement.scrollLeft||r.scrollLeft;for(d.html(a).style("opacity",1).style("pointer-events","all");g--;)d.classed(c[g],!1);return o=l.get(p).apply(this),d.classed(p,!0).style("top",o.top+h[0]+v+"px").style("left",o.left+h[1]+b+"px"),u},u.hide=function(){return f().style("opacity",0).style("pointer-events","none"),u},u.attr=function(t,e){if(arguments.length<2&&"string"==typeof t)return f().attr(t);var n=Array.prototype.slice.call(arguments);return Wt.prototype.attr.apply(f(),n),u},u.style=function(t,e){if(arguments.length<2&&"string"==typeof t)return f().style(t);var n=Array.prototype.slice.call(arguments);return Wt.prototype.style.apply(f(),n),u},u.direction=function(e){return arguments.length?(t=null==e?e:d(e),u):t},u.offset=function(t){return arguments.length?(e=null==t?t:d(t),u):e},u.html=function(t){return arguments.length?(n=null==t?t:d(t),u):n},u.rootElement=function(t){return arguments.length?(r=null==t?t:d(t),u):r},u.destroy=function(){return i&&(f().remove(),i=null),u};var l=Gr({n:function(){var t=p(this);return{top:t.n.y-i.offsetHeight,left:t.n.x-i.offsetWidth/2}},s:function(){var t=p(this);return{top:t.s.y,left:t.s.x-i.offsetWidth/2}},e:function(){var t=p(this);return{top:t.e.y-i.offsetHeight/2,left:t.e.x}},w:function(){var t=p(this);return{top:t.w.y-i.offsetHeight/2,left:t.w.x-i.offsetWidth}},nw:function(){var t=p(this);return{top:t.nw.y-i.offsetHeight,left:t.nw.x-i.offsetWidth}},ne:function(){var t=p(this);return{top:t.ne.y-i.offsetHeight,left:t.ne.x}},sw:function(){var t=p(this);return{top:t.sw.y,left:t.sw.x-i.offsetWidth}},se:function(){var t=p(this);return{top:t.se.y,left:t.se.x}}}),c=l.keys();function h(){var t=Zt(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}function f(){return null==i&&(i=h(),r.appendChild(i)),Zt(i)}function p(t){for(var e=s||t;null==e.getScreenCTM&&null!=e.parentNode;)e=e.parentNode;var n={},r=e.getScreenCTM(),i=e.getBBox(),o=i.width,u=i.height,l=i.x,c=i.y;return a.x=l,a.y=c,n.nw=a.matrixTransform(r),a.x+=o,n.ne=a.matrixTransform(r),a.y+=u,n.se=a.matrixTransform(r),a.x-=o,n.sw=a.matrixTransform(r),a.y-=u/2,n.w=a.matrixTransform(r),a.x+=o,n.e=a.matrixTransform(r),a.x-=o/2,a.y-=u/2,n.n=a.matrixTransform(r),a.y+=u,n.s=a.matrixTransform(r),n}function d(t){return"function"==typeof t?t:function(){return t}}return u};const tc=(t,e,n,r)=>{const i=[],o={};return t.forEach(t=>{o[r(t[n])]=0}),e.forEach(t=>{o[r(t[n])]+=1}),Object.keys(o).forEach(t=>{i.push({x:parseFloat(t),y:o[t]})}),i},ec=(t,e)=>`${t}: ${e} ${1===e?"registree":"registrees"}`;class nc{constructor(t,e,n,r,i,o){this.element=e,this.select=n,this.filter=r,this.height=i,this.width=o,e.innerHTML="";const a=tc(t,filteredData,"Registration Date",t=>parseInt(t.substr(0,4),10));var s;margin={top:20,right:20,bottom:30,left:50},o=rawWidth-margin.left-margin.right,i=rawHeight-margin.top-margin.bottom,xScale=Ua().range([0,o]).domain(u(a,t=>t.x)).nice(),yScale=Ua().range([i,0]).domain(u(a,t=>t.y)).nice(),xAxis=(s=xScale,U(x,s)).ticks(12).tickFormat(Pi("d")),yAxis=T(yScale).ticks(12*i/o),plotLine=Pu().curve(ul).x(t=>xScale(t.x)).y(t=>yScale(t.y)),svg=Zt("#histogramOverTimeChart").append("svg").attr("width",o+margin.left+margin.right).attr("height",i+margin.top+margin.bottom),svg.append("g").attr("class","x axis ").attr("id","axis--x").attr("transform",`translate(${margin.left},${i+margin.top})`).call(xAxis),svg.append("g").attr("class","y axis").attr("transform",`translate(${margin.left},${margin.top})`).attr("id","axis--y").call(yAxis),line=svg.append("g").append("path").attr("transform",`translate(${margin.left},${margin.top})`).datum(a).attr("d",plotLine).style("fill","none").style("stroke","#684c00");const l=Kl().attr("class","d3-tip").offset([-115,0]).html(t=>ec(t.x,t.y));svg.call(l),dot=svg.append("g").attr("id","scatter").attr("transform",`translate(${margin.left},${margin.top})`).selectAll(".dot").data(a).enter().append("circle").attr("class","dot").attr("r",6).attr("cx",t=>xScale(t.x)).attr("cy",t=>yScale(t.y)).attr("stroke","white").attr("stroke-width","2px").style("fill","#684c00").on("mouseover",l.show).on("mouseout",l.hide).on("click",t=>{document.getElementById("dateSlider").noUiSlider.set([t.x,t.x])}),this.redraw=t=>{const e=tc(t,t,"Registration Date",t=>parseInt(t.substr(0,4),10));yScale.domain(u(e,t=>t.y)).nice(),yAxis=T(yScale).ticks(12*i/o),svg.select(".y").transition().duration(750).call(yAxis),line.datum(e).transition().duration(750).attr("d",plotLine).style("fill","none").style("stroke-width","2px").style("stroke","#684c00"),svg.selectAll("circle").data(e).transition().duration(750).attr("cx",t=>xScale(t.x)).attr("cy",t=>yScale(t.y)).style("fill","#864c00"),svg.selectAll("circle").data(e).enter().append("circle").attr("cx",t=>xScale(t.x)).attr("cy",t=>yScale(t.y)).attr("r",5),svg.selectAll("circle").data(e).exit().remove()}}}var rc=function(t,e,n,r,i,o){this.redraw=function(t){console.log("Redrawing map")},console.log("Constructing map")},ic=function(t,e,n,r,i){this.redraw=function(t){console.log("Redrawing table")},console.log("Constructing table")},oc=(n(8),n(11),function(t){var e=this;this.vizualizerHeight=600,this.updateActiveViz=function(t){return e.activeViz.redraw(t)},this.fillDatalists=function(t){e.filters.fillDatalists(t)},this.adapter=t,this.filters=new Ql(this.adapter);var n=document.getElementById("vizualizers"),r=t.getData();this.donut=new Gl(r,document.getElementById("donutChart"),document.getElementById("dountSelect"),this.filters,this.vizualizerHeight,n.offsetWidth-10),this.histogram=new nc(r,document.getElementById("histogramOverTimeChart"),this.filters,this.vizualizerHeight,n.offsetWidth-10),this.map=new rc(r,document.getElementById("mapChart"),document.getElementById("mapSelect"),this.filters,this.vizualizerHeight,n.offsetWidth-10),this.table=new ic(r,"tableChart",this.filters,this.vizualizerHeight,n.offsetWidth-10),this.activeViz=this.map,[document.getElementById("tableButton"),document.getElementById("donutButton"),document.getElementById("histogramOverTimeButton"),document.getElementById("mapButton")].forEach((function(t){t.onclick=function(){Array.from(document.getElementsByClassName("viz")).forEach((function(t){t.style.display="none"})),Array.from(document.getElementsByClassName("w3-bar-item")).forEach((function(t){t.className="w3-bar-item w3-button w3-light-gray"})),document.getElementById(t.id.substring(0,t.id.length-6)).style.display="block",t.className="w3-bar-item w3-button w3-dark-gray";var n=t.id.substring(0,t.id.length-6);"table"==n?e.activeViz=e.table:"donut"==n?e.activeViz=e.donut:"histogramOverTime"==n?e.activeViz=e.histogram:"map"==n&&(e.activeViz=e.map),e.updateActiveViz(r)}})),document.getElementById("toggleFilterButton").onclick=function(){var t=document.getElementById("filters"),i=document.getElementById("vizualizers"),o=document.getElementById("toggleFilterButton");">>"===o.textContent?(t.style.width="50%",i.style.width="50%",o.textContent="<<",e.donut=new Gl(r,document.getElementById("donutChart"),document.getElementById("dountSelect"),e.filters,e.vizualizerHeight,n.offsetWidth/2-10),e.histogram=new nc(r,document.getElementById("histogramOverTimeChart"),e.filters,e.vizualizerHeight,n.offsetWidth/2-10),e.map=new rc(r,document.getElementById("mapChart"),document.getElementById("mapSelect"),e.filters,e.vizualizerHeight,n.offsetWidth/2-10)):(t.style.width="0%",i.style.width="100%",o.textContent=">>",e.donut=new Gl(r,document.getElementById("donutChart"),document.getElementById("dountSelect"),e.filters,e.vizualizerHeight,2*n.offsetWidth-10),e.histogram=new nc(r,document.getElementById("histogramOverTimeChart"),e.filters,e.vizualizerHeight,2*n.offsetWidth-10),e.map=new rc(r,document.getElementById("mapChart"),document.getElementById("mapSelect"),e.filters,e.vizualizerHeight,2*n.offsetWidth-10))}}),ac=new Wl("boc.csv",{updateView:function(t){sc.updateActiveViz(t),sc.fillDatalists(t)}}),sc=new oc({getData:function(){return ac.data},refilter:function(t){var e=Object.values(t).reduce((function(t,e){return function(n){return t(n)&&e(n)}}));ac.filterData(e)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,